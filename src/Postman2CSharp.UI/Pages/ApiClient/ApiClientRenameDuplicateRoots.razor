@page "/Collection/{CollectionId}/ApiClient/{ApiClientId}/DuplicateRoots"
@inherits MainLayoutComponent

<PageTitle>Duplicate Roots</PageTitle>

<BreadCrumbs Items="@_breadCrumbs"></BreadCrumbs>

<br />

<div class="info-container">
    <MudText Typo="Typo.h1" Style="font-size: 2.3em">Resolve Duplicate Roots Tool | @SelectedApiClient?.Name</MudText>
    <br/>
    <p>
        If you are seeing this page, it's because you enabled the @InlineEmphasis("Remove Duplicate Roots") option on the Convert page.
        What that setting does is it removes duplicate classes from the generated code even if it is a root class.
        For example, if DeleteUserResponse and DeleteItemResponse both contain a single boolean json property called "Success",
        only one class would be generated with this setting enabled compared to two. This is usually ideal in most situations,
        however it can cause some confusion due to naming; you don't want the DeleteItem function
        returning a DeleteUserResponse. Instead, you would probably want them to both return a SuccessResponse. That is what this page is for.
        You get to pick the common name, e.g. SuccessResponse.
    </p>
</div>
<br/>
<br/>
@if (SelectedApiClient != null)
{
    <RenameDuplicateRootsComponent ApiClient="SelectedApiClient"></RenameDuplicateRootsComponent>
}

@code {
    private List<BreadcrumbItem> _breadCrumbs = new();

    [Parameter] public string? ApiClientId { get; set; }
    [Parameter] public string? CollectionId { get; set; }

    private ApiClient? SelectedApiClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!GetApiClientFromParameters()) return;
        if (ApiClientId == null || CollectionId == null) return;
        await TabsService.Value.AddApiClientDuplicateRootsTab(CollectionId, ApiClientId);
    }

    private ApiClient? _cachedApiClient;
    protected override async Task OnParametersSetAsync()
    {
        if (!GetApiClientFromParameters()) return;
        if (ApiClientId == null || CollectionId == null) return;

        if (SelectedApiClient != null && SelectedApiClient != _cachedApiClient)
        {
            _cachedApiClient = SelectedApiClient;
            await TabsService.Value.AddApiClientDuplicateRootsTab(CollectionId, ApiClientId);
        }
        _breadCrumbs = new()
        {
            new("Home", "/", icon: Icons.Home),
            new("Collection", $"/Collection/{CollectionId}", icon: NavMenu.FavIcon),
            new(SelectedApiClient!.Name, $"/Collection/{CollectionId}/ApiClient/{ApiClientId}"),
            new("Duplicate Roots", $"/Collection/{CollectionId}/ApiClient/{ApiClientId}/DuplicateRoots", true),
        };

    }

    private bool GetApiClientFromParameters()
    {
        if (ApiCollections == null || ApiClientId == null || CollectionId == null)
        {
            return false;
        }
        SelectedApiClient = ApiCollections?.FirstOrDefault(x => x.Id == CollectionId)?
            .ApiClients.FirstOrDefault(x => x.Id == ApiClientId);
        if (SelectedApiClient == null)
        {
            return false;
        }
        return true;
    }
}