@page "/Advanced-Settings"
@implements IDisposable

<PageHeader 
    Keywords="Settings, Options, Config, Configuration, Errors, Exceptions, Logging, Remove"
    Title="Advanced Settings"
    AddPostman2CSharpToTitle
    NotPrerenderingTitle="Advanced Settings"
    Description="Take even more control over your Api Clients by configuring ApiClient Generation Options."></PageHeader>

<BreadCrumbs Items="@BreadCrumbs"></BreadCrumbs>

<MudText Typo="Typo.h1" Class="mt-4">Advanced Settings</MudText>
<br/>
<MudText Typo="Typo.subtitle1">
    * Class generation options do not apply to any of the "Other Tools".
</MudText>
<MudDivider Class="my-divider" DividerType="DividerType.FullWidth"></MudDivider>
<div id="Advanced-Settings" class="info-container" >
    @if (AppState.IsAdvancedSettingsLoaded)
    {
        <CSharpCodeWriterOptionsComponent />
        <br />
        <br />
        <div class="f-row">
            <div style="width: 90%;">
                <MudText Style="font-weight: 500;" Typo="Typo.h2">Site Settings</MudText>
            </div>
            <div>
                @if (!Equals(AppState.SiteSettings, DefaultSiteSettings()))
                {
                    <MudTooltip Text="Resets settings to default values">
                        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="Reset">Reset</MudButton>
                    </MudTooltip>
                }
            </div>
        </div>
        <br />
        <MudGrid Spacing="3">
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCheckBox T="bool" Color="Color.Primary" @bind-Checked:get="AppState.SiteSettings.ShowSnackbarPopups"
                             @bind-Checked:set="x => { AppState.SiteSettings.ShowSnackbarPopups = x; AppState.UpdateSiteSettings(AppState.SiteSettings); }"  >Show SnackBar Popups</MudCheckBox>
            </MudItem>
            <MudItem>
                <MudCheckBox Color="Color.Primary" @bind-Checked:get="AppState.SiteSettings.SaveCollectionsToLocalStorage"
                             @bind-Checked:set="x => { AppState.SiteSettings.SaveCollectionsToLocalStorage = x; AppState.UpdateSiteSettings(AppState.SiteSettings); }">Save Collections to Local Storage</MudCheckBox>
            </MudItem>
            <MudItem>
                <MudCheckBox Color="Color.Primary" @bind-Checked:get="AppState.SiteSettings.ShowDownloadInTreeView"
                             @bind-Checked:set="x => { AppState.SiteSettings.ShowDownloadInTreeView = x; AppState.UpdateSiteSettings(AppState.SiteSettings); }">Show Download Button In Tree View</MudCheckBox>
            </MudItem>
            @if (AppState.SiteSettings.ViewedApiClientTour || AppState.SiteSettings.ViewedCollectionTour || AppState.SiteSettings.ViewedDuplicateTour)
            {
                <MudItem>
                    <MudTooltip Text="Allows you to view the guided tours again">
                        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="ResetGuidedTours">Reset guided tours</MudButton>
                    </MudTooltip>
                </MudItem>
            }
        </MudGrid>
    }
</div>
@code {
    [CascadingParameter] protected MainLayout Layout { get; set; } = null!;
    [Inject] private ISnackbar? Snackbar { get; set; }
    [Inject] private AppState AppState { get; set; } = null!;
    [Inject] private Interop Interop { get; set; } = null!;
    [Inject] private AnalyticsInterop AnalyticsInterop { get; set; } = null!;
    [Inject] private ILazyLoader LazyLoader { get; set; } = null!;

    private static readonly List<BreadcrumbItem> BreadCrumbs = new()
    {
        new("Home", "/", icon: Icons.Home),
        new("Advanced Settings", "/Advanced-Settings", true, Icons.Settings)
    };

    private static SiteSettings DefaultSiteSettings() => new();
    private static bool Equals(SiteSettings settings1, SiteSettings settings2)
    {
        return settings1.ShowSnackbarPopups == settings2.ShowSnackbarPopups && 
               settings1.SaveCollectionsToLocalStorage == settings2.SaveCollectionsToLocalStorage &&
               settings1.ShowDownloadInTreeView == settings2.ShowDownloadInTreeView;
    }

    protected override async Task OnInitializedAsync()
    {
        AppState.SettingsChanged += InvokeStateHasChanged;
        AppState.AdvancedSettingsLoaded += AdvancedSettingsLoadedChanged;
        await AnalyticsInterop.TrackAction("Visited advanced settings");
    }

    protected async Task ResetGuidedTours()
    {
        AppState.SiteSettings.ViewedApiClientTour = false;
        AppState.SiteSettings.ViewedCollectionTour = false;
        AppState.SiteSettings.ViewedDuplicateTour = false;
        AppState.UpdateSiteSettings(AppState.SiteSettings);
        await AnalyticsInterop.TrackAction("Reset guided tours");
        await Layout.SetSiteSettings();
    }

    private void InvokeStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task AdvancedSettingsLoadedChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AppState.SettingsChanged -= InvokeStateHasChanged;
        AppState.AdvancedSettingsLoaded -= AdvancedSettingsLoadedChanged;
    }

    private async Task Reset()
    {
        AppState.UpdateSiteSettings(DefaultSiteSettings());
        await AnalyticsInterop.TrackAction("Reset advanced settings default");
    }

}
