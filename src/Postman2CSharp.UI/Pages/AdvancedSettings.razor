@page "/Advanced-Settings"
@implements IDisposable

<PageHeader 
    Keywords="Settings, Options, Config, Configuration, Errors, Exceptions, Logging, Remove"
    Title="Advanced Settings"
    AddPostman2CSharpToTitle
    NotPrerenderingTitle="Advanced Settings"
    Description="Take even more control over your Api Clients by configuring ApiClient Generation Options."></PageHeader>

<BreadCrumbs Items="@BreadCrumbs"></BreadCrumbs>

<MudText Typo="Typo.h1" Class="mt-4">Advanced Settings</MudText>
<br/>
<MudText Typo="Typo.subtitle1">
    * Class generation options do not apply to other tools.
</MudText>
<MudDivider Class="my-divider" DividerType="DividerType.FullWidth"></MudDivider>
<div id="Advanced-Settings">
    @if (LazyLoader.AdvancedSettingsLoaded)
    {
        <CSharpCodeWriterOptionsComponent />
        <br />
        <br />
        <div class="f-row">
            <div style="width: 90%;">
                <MudText Style="font-weight: 500;" Typo="Typo.h2">Site Settings</MudText>
            </div>
            <div>
                @if (!Equals(SiteSettings.Instance, DefaultSiteSettings()))
                {
                    <MudTooltip Text="Resets settings to default values">
                        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="() => SiteSettings.Instance = DefaultSiteSettings()">Reset</MudButton>
                    </MudTooltip>
                }
            </div>
        </div>
        <br />
        <MudGrid Spacing="3">
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCheckBox Color="Color.Primary" @bind-Checked="SiteSettings.Instance.ShowSnackbarPopups">Show SnackBar Popups</MudCheckBox>
            </MudItem>
            <MudItem>
                <MudCheckBox Color="Color.Primary" @bind-Checked="SiteSettings.Instance.SaveCollectionsToLocalStorage">Save Collections to Local Storage</MudCheckBox>
            </MudItem>
            <MudItem>
                <MudCheckBox Color="Color.Primary" @bind-Checked="SiteSettings.Instance.ShowDownloadInTreeView">Show Download Button In Tree View</MudCheckBox>
            </MudItem>
        </MudGrid>
    }
</div>
@code {
    [Inject] private ISnackbar? Snackbar { get; set; }
    [Inject] private Interop? Interop { get; set; }
    [Inject] private LazyLoader? LazyLoader { get; set; }

    private static readonly List<BreadcrumbItem> BreadCrumbs = new()
    {
        new("Home", "/", icon: Icons.Home),
        new("Advanced Settings", "/Advanced-Settings", true, Icons.Settings)
    };

    private static SiteSettings DefaultSiteSettings() => new();
    private static bool Equals(SiteSettings settings1, SiteSettings settings2)
    {
        return settings1.ShowSnackbarPopups == settings2.ShowSnackbarPopups && 
               settings1.SaveCollectionsToLocalStorage == settings2.SaveCollectionsToLocalStorage &&
               settings1.ShowDownloadInTreeView == settings2.ShowDownloadInTreeView;
    }

    protected override void OnInitialized()
    {
        SiteSettings.OnSettingsChanged += OnSiteSettingsChanged;
        LazyLoader.AdvancedSettingsLoadedChanged += AdvancedSettingsLoadedChanged;
    }

    private void OnSiteSettingsChanged(SiteSettings siteSettings)
    {
        StateHasChanged();
    }

    private async Task AdvancedSettingsLoadedChanged(bool loaded)
    {
       if (loaded)
       {
           await InvokeAsync(StateHasChanged);
       }
    }

    public void Dispose()
    {
        SiteSettings.OnSettingsChanged -= OnSiteSettingsChanged;
        LazyLoader.AdvancedSettingsLoadedChanged -= AdvancedSettingsLoadedChanged;
    }
}
