@namespace CodeBeamMudExtensions
@inherits MudComponentBase
@using MudExtensions

<CascadingValue Value="this" IsFixed="true">
    <MudStack Class="@Class" Style="@Style"> @*Row="Vertical"*@
        <MudStack Style="@StepBorderStyle" Row="true" AlignItems="@(HeaderTextView == HeaderTextView.NewLine ? AlignItems.Start : AlignItems.Center)">
            @*Row="!Vertical"*@
            @foreach (MudStep step in _steps)
            {
                if (step.IsResultStep || (MobileView == true && !IsStepActive(step)))
                {
                    continue;
                }
                bool active = IsStepActive(step);
                <div @onclick="@(Linear ? null : () => SetActiveIndex(step))" Class="@HeaderClassname">
                        <MudAvatar Class="@((active || step.Status != StepStatus.Continued) ? $"mud-theme-{Color.ToDescriptionString()}" : null)" Variant="@Variant" Size="Size.Medium">
                            @if (step.Status == StepStatus.Completed)
                            {
                            <MudIcon Icon="@Icons.Done" Size="Size.Medium" />
                            }
                            else if (step.Status == StepStatus.Skipped)
                            {
                            <MudIcon Icon="@Icons.Remove" Size="Size.Medium" />
                            }
                            else
                            {
                                @(Steps.IndexOf(step) + 1)
                            }
                        </MudAvatar>
                    @if (HeaderTextView == HeaderTextView.All || HeaderTextView == HeaderTextView.NewLine || (HeaderTextView == HeaderTextView.OnlyActiveText && active))
                    {
                        <div>
                            <MudText Align="Align.Center" Color="@(active ? Color : Color.Default)" Style="@(active ? "font-weight: 900" : null)">@step.Title</MudText>
                            @if (step.Optional == true)
                            {
                                <MudText Align="@(HeaderTextView == HeaderTextView.NewLine ? Align.Center : Align.Start)" Typo="Typo.subtitle2" Color="@(active ? Color : Color.Default)" Style="@(active ? "font-weight: 500" : null)">Optional</MudText>
                            }
                        </div>
                    }
                </div>

                if (_steps.Count - 1 != _steps.IndexOf(step) || MobileView == true)
                {
                    <span class="@GetDashClassname(step)"></span>
                }
                
                @if (MobileView == true)
                {
                    <MudText Typo="Typo.body2" Color="@Color">@(_steps?.IndexOf(step) + 1) / @(_steps?.Count)</MudText>
                }
            }            
            
        </MudStack>
        @if (Loading)
        {
            <MudProgressLinear Indeterminate="true" Color="@Color" />
        }
        @StaticContent
        <MudStack Class="mud-width-full" Justify="Justify.SpaceBetween">
            <div class="@ContentClassname" style="@ContentStyle">
                @ChildContent
            </div>
            
            <div class="d-flex gap-4">                
                @{
                    bool showResultStep = ShowResultStep();
                    bool nextValid = true;
                    bool backValid = true;
                    if (ValidateStep != null)
                    {
                        if (AllowNext != null)
                        {
                            var nextValidTask = AllowNext.Invoke(ActiveIndex);
                            nextValidTask.Wait();
                            nextValid = nextValidTask.Result;
                        }
                        if (AllowBack != null)
                        {
                            var backValidTask = AllowBack.Invoke(ActiveIndex);
                            backValidTask.Wait();
                            backValid = backValidTask.Result;
                        }
                    }
                }

                @if (ActiveIndex != 0)
                {
                    if (ActiveIndex < Steps.Count && Steps[ActiveIndex].Status != StepStatus.Continued || showResultStep)
                    {
                        <MudIconButton Color="@Color" Disabled="!backValid" Variant="@Variant" Icon="@Icons.ChevronLeft" OnClick="@(() => Step(-1))" />
                    }
                    else
                    {
                        if (IconActionButtons || MobileView)
                        {
                            <MudTooltip Text="Previous" Delay="300">
                                <MudIconButton Color="@Color" Disabled="!backValid" Variant="@Variant" Icon="@Icons.ChevronLeft" OnClick="@(() => Step(-1))"></MudIconButton>
                            </MudTooltip>
                        }
                        else
                        {
                            <MudButton Color="@Color" Variant="@Variant" Disabled="!backValid" StartIcon="@Icons.ChevronLeft" OnClick="@(() => Step(-1))">Previous</MudButton>
                        }
                    }
                }

                @if (ActionContent != null)
                {
                    @* The user will provide their own MudSpacer in this render fragment *@
                    @ActionContent
                }
                else
                {
                    <MudSpacer />
                }

                @if (!showResultStep)
                {
                    if ((ActiveIndex < Steps.Count && Steps[ActiveIndex].Status != StepStatus.Continued) || (ActiveIndex == Steps.Count - 1 && !HasResultStep() && IsAllStepsCompleted()))
                    {
                        if (!DisableStepResultIndicator && MobileView == false)
                        {
                            <MudButton Color="@Color" Variant="@Variant" Disabled="true">@(Steps[ActiveIndex].Status == StepStatus.Completed ? "Completed" : "Skipped")</MudButton>
                        }
                    }
                    else if (ActiveIndex < Steps.Count && Steps[ActiveIndex].Optional == true)
                    {
                        if (IconActionButtons || MobileView)
                        {
                            <MudTooltip Text="Skip" Delay="300">
                                <MudIconButton Color="@Color" Disabled="!nextValid" Variant="@Variant" Icon="@Icons.SkipNext" OnClick="@(() => SkipStep())" />
                            </MudTooltip>
                        }
                        else
                        {
                            <MudButton Color="@Color" Disabled="!nextValid" Variant="@Variant" StartIcon="@Icons.ChevronRight" OnClick="@(() => SkipStep())">Skip</MudButton>
                        }
                    }
                }

                @if (!showResultStep && !(ActiveIndex == Steps.Count - 1 && !HasResultStep() && IsAllStepsCompleted()))
                {
                    if (ActiveIndex < Steps.Count && Steps[ActiveIndex].Status != StepStatus.Continued)
                    {
                        <MudIconButton Color="@Color" Disabled="!nextValid" Variant="@Variant" Icon="@Icons.ChevronRight" OnClick="@(() => Step(1))" />
                    }
                    else
                    {
                        if (IconActionButtons || MobileView)
                        {
                            <MudTooltip Text="Next" Delay="300">
                                <MudIconButton Color="@Color" Disabled="!nextValid" Variant="@Variant" Icon="@Icons.ChevronRight" OnClick="@(() => CompleteStep())" />
                            </MudTooltip>
                        }
                        else
                        {
                            <MudButton Color="@Color" Disabled="!nextValid" Variant="@Variant" StartIcon="@Icons.ChevronRight" OnClick="@(() => CompleteStep())">Next</MudButton>
                        }                        
                    }
                }
            </div>
        </MudStack>
    </MudStack>
</CascadingValue>

@if (DisableAnimation == false)
{
    <MudAnimate @ref="_animate" Selector="@($".mud-stepper-ani-{_animateGuid.ToString()}")" AnimationType="MudExtensions.Enums.AnimationType.Fade" Value="1" Duration="0.5" />
}