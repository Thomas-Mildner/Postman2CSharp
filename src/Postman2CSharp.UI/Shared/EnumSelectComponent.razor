@using Humanizer
@typeparam TEnum where TEnum : struct, Enum
<div class="enum-select-container" >
    <MudSelect T="TEnum" Disabled="Disabled" Label="@Label" Variant="Variant.Outlined" @bind-Value="Value" AutoFocus="false" >
        @foreach (var enumValue in Enum.GetValues<TEnum>().Where(x => !Exclude?.Contains(x) ?? true))
        {
            <MudSelectItem @key="enumValue" T="TEnum" Value="@enumValue">@enumValue.ToString()</MudSelectItem>
        }
    </MudSelect>
</div>
@code {
    [Parameter] public bool Disabled { get; set; }
    [Parameter, EditorRequired] public required string Label { get; set; }

    [Parameter] public EventCallback<TEnum> ValueChanged { get; set; }

    [Parameter] public IEnumerable<TEnum>? Exclude { get; set; }

    [Parameter] public bool AlwaysShowAllEnumValues { get; set; } = true;

    #pragma warning disable BL0007
    private TEnum _value;
    [Parameter]
    public TEnum Value
    {
        get => _value;
        set
        {
            if (_value.Equals(value)) return;
            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }
    #pragma warning restore BL0007
}
