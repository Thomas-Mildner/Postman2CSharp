<style>
    .mud-select {
        flex-grow: unset;
    }
</style>
@if (SelectedApiClient != null && SelectedApiClient.HttpCalls.Any(x => x.AnyClassesGenerated()))
{
    <MudTabs @key="SelectedApiClient.Id" Rounded ApplyEffectsToContainer ActivePanelIndexChanged="OnPanelChanged" >
        @foreach (var httpCall in SelectedApiClient.HttpCalls.Where(x => x.AnyClassesGenerated()))
        {
            <MudTabPanel Text="@httpCall.Name">
                <br/>
                <div class="f-row" style="gap: 50px; align-items: baseline;">
                    @if (AllClassNames.Count > 1)
                    {
                        <MudSelect Style="min-width: 16em;" T="string" Label="Select a class" @bind-Value="SelectedClassName">
                            @foreach (var className in AllClassNames)
                            {
                                <MudSelectItem Value="@className">@className</MudSelectItem>
                            }
                        </MudSelect>
                    }
                    else if (AllClassNames.Count == 1)
                    {
                        <MudText Typo="Typo.body1">@AllClassNames.First()</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.body1">No classes exist for this call</MudText>
                    }
                    @if (SelectedClassName != null)
                    {
                        @if (SelectedClassName == httpCall.RequestClassName)
                        {
                            <MudIconButton Size="Size.Medium" OnClick="() => DownloadFile(httpCall.RequestSourceCode)" Color="Color.Tertiary" Icon="@Icons.Download" Variant="Variant.Filled"></MudIconButton>
                        }
                        @if (httpCall.AllResponses.FirstOrDefault(x => x.ClassName == SelectedClassName) is { } response)
                        {
                            <MudIconButton Size="Size.Medium" OnClick="() => DownloadFile(response.SourceCode)" Color="Color.Tertiary" Icon="@Icons.Download" Variant="Variant.Filled"></MudIconButton>
                        }
                        @if (SelectedClassName == httpCall.QueryParameterClassName)
                        {
                            <MudIconButton Size="Size.Medium" OnClick="() => DownloadFile(httpCall.QueryParameterSourceCode)" Color="Color.Tertiary" Icon="@Icons.Download" Variant="Variant.Filled"></MudIconButton>
                        }
                        @if (SelectedClassName == httpCall.FormDataClassName)
                        {
                            <MudIconButton Size="Size.Medium" OnClick="() => DownloadFile(httpCall.FormDataSourceCode)" Color="Color.Tertiary" Icon="@Icons.Download" Variant="Variant.Filled"></MudIconButton>
                        }
                        @if (SelectedClassName == httpCall.GraphQlVariablesClassName)
                        {
                            <MudIconButton Size="Size.Medium" OnClick="() => DownloadFile(httpCall.GraphQlVariablesSourceCode)" Color="Color.Tertiary" Icon="@Icons.Download" Variant="Variant.Filled"></MudIconButton>
                        }
                    }
                    <div></div>
                </div>
                <br/>
                @if (SelectedClassName != null)
                {
                    @if (SelectedClassName == httpCall.RequestClassName)
                    {
                        <PrismCodeBlock FileName="@httpCall.RequestClassName" Language="PrismLanguage.CSharp" Value="@httpCall.RequestSourceCode"/>
                    }
                    @if (httpCall.AllResponses.FirstOrDefault(x => x.ClassName == SelectedClassName) is { } response)
                    {
                        <PrismCodeBlock FileName="@response.ClassName" Language="PrismLanguage.CSharp" Value="@response.SourceCode" />
                    }
                    @if (SelectedClassName == httpCall.QueryParameterClassName)
                    {
                        <PrismCodeBlock FileName="@httpCall.QueryParameterClassName" Language="PrismLanguage.CSharp" Value="@httpCall.QueryParameterSourceCode" />
                    }
                    @if (SelectedClassName == httpCall.FormDataClassName)
                    {
                        <PrismCodeBlock FileName="@httpCall.FormDataClassName" Language="PrismLanguage.CSharp" Value="@httpCall.FormDataSourceCode" />
                    }
                    @if (SelectedClassName == httpCall.GraphQlVariablesClassName)
                    {
                        <PrismCodeBlock FileName="@httpCall.GraphQlVariablesClassName" Language="PrismLanguage.CSharp" Value="@httpCall.GraphQlVariablesSourceCode" />
                    }
                }
            </MudTabPanel>
        }
    </MudTabs>
}
else
{
    <MudText Typo="Typo.h6" >No classes generated</MudText>
}

@code {
    [Inject] private Interop Interop { get; set; } = null!;
    [Parameter] public ApiClient? SelectedApiClient { get; set; }
    private string? SelectedClassName { get; set; } = null!;
    private List<string> AllClassNames { get; set; } = new();

    protected override void OnParametersSet()
    {
        OnPanelChanged(0);
    }

    private async Task DownloadFile(string? sourceCode)
    {
        if (SelectedClassName == null || SelectedApiClient == null || string.IsNullOrWhiteSpace(sourceCode)) return;
        await Interop.DownloadFile(SelectedClassName, sourceCode);
    }

    private void OnPanelChanged(int panelInex)
    {
        if(SelectedApiClient == null) return;
        var httpCall = SelectedApiClient.HttpCalls.Where(x => x.AnyClassesGenerated()).Skip(panelInex).FirstOrDefault();
        if (httpCall == null) return;
        var allClassNames = new List<string?>();
        if (httpCall.RequestSourceCode != null)
        {
            allClassNames.Add(httpCall.RequestClassName);
        }
        foreach (var response in httpCall.AllResponses)
        {
            if (response.SourceCode != null)
            {
                allClassNames.Add(response.ClassName);
            }
        }
        if (httpCall.QueryParameterSourceCode != null)
        {
            allClassNames.Add(httpCall.QueryParameterClassName);
        }
        if (httpCall.FormDataSourceCode != null)
        {
            allClassNames.Add(httpCall.FormDataClassName);
        }

        if (httpCall.GraphQlVariablesSourceCode != null)
        {
            allClassNames.Add(httpCall.GraphQlVariablesClassName);
        }
        AllClassNames = allClassNames.Where(x => !string.IsNullOrWhiteSpace(x)).ToList()!;
        SelectedClassName = AllClassNames.FirstOrDefault();
    }

}
