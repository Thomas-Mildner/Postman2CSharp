@using Xamasoft.JsonClassGenerator
@using System.Reflection


<Json2CSharpPlusOptions @bind-OneTypePerJsonMemberName="_oneTypePerJsonMemberName" DuplicateOptionsChanged="duplicateOptions => _duplicateOptions = duplicateOptions"
                        OptionsChanged="options => _options = options" FirstProcessComplete="_firstProcess" ResetClicked="Reset" ></Json2CSharpPlusOptions>

<br />
<MudDivider DividerType="DividerType.Middle"></MudDivider>
<br />
<br />

<div class="f-row-column" style="gap: 15px; width: 100%;">
    @if (!_hideEditor)
    {
        <MudBreakpointProvider>
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                <div class="f-column">
                    @JsonEditor()
                    <br />
                    @GeneratedClasses(Position.Bottom)
                </div>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                <VerticalSplit>
                    <LeftPanel>
                        @JsonEditor()
                    </LeftPanel>
                    <RightPanel>
                        @GeneratedClasses(Position.Right)
                    </RightPanel>
                </VerticalSplit>
            </MudHidden>
        </MudBreakpointProvider>
    }
    else
    {
        <MudBreakpointProvider>
            <MudHidden Breakpoint="Breakpoint.MdAndUp">
                @GeneratedClasses(Position.Bottom, showSwitch: true)
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.SmAndDown">
                @GeneratedClasses(Position.Right, showSwitch: true)
            </MudHidden>
        </MudBreakpointProvider>
    }
</div>
<br />
<div class="f-row-column">
    <MudButton Variant="Variant.Filled"
               Color="Color.Tertiary"
               EndIcon="@Icons.Build"
               OnClick="Process" Disabled="!_isJsonValid" >
        Process
    </MudButton>
    <div style="flex-grow: 1;"></div>
    <MudText Class="hide-not-desktop mr-6" Typo="Typo.caption"><b>Tip: Shift + Scroll Mouse Wheel = Horizontal Scroll</b></MudText>
</div>


@code {
    private string _exampleJson = "{\n    \"put\" : \"your\",\n    \"json\" : \"here\",\n    \"to\" : \"be converted\"\n}";
    private string _pasteMoreText = "Paste more json without resetting\nto take advantage of class deduping";

    [Inject] private AnalyticsInterop Analytics { get; set; } = default!;
    private Dictionary<string, string> _result = new ();

    private bool _firstProcess = false;
    private bool _oneTypePerJsonMemberName = true;
    private CSharpCodeWriterConfig _options = new();
    private DuplicateOptions _duplicateOptions = new();
    private JsonEditor? _jsonEditor;
    private bool _isJsonValid = false;

    private bool _hideEditor;

    private int _activePanelIndex;
    private Json2CSharpPlus? _json2CSharpPlusSimple;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _jsonEditor != null)
        {
            while (!_jsonEditor.Initialized)
            {
                await Task.Delay(1);
            }
            await _jsonEditor.SetValue(_exampleJson);
        }
    }

    private async Task Process()
    {
        if (_jsonEditor == null) return;

        _firstProcess = true;
        var json = await _jsonEditor.GetValue();
        _json2CSharpPlusSimple ??= new Json2CSharpPlus(_options, _duplicateOptions);

        _result = _json2CSharpPlusSimple.GenerateMoreClasses(json, _oneTypePerJsonMemberName);
        await _jsonEditor.SetValue(_pasteMoreText);
        await Analytics.TrackAction("Json2CSharp Process");

        StateHasChanged();
        await Task.Delay(1);
        _activePanelIndex = _result.Count - 1;
    }

    private async Task Reset()
    {
        _hideEditor = false;
        _firstProcess = false;
        _result.Clear();
        if (_jsonEditor != null)
        {
            await _jsonEditor.SetValue(_exampleJson);
        }
        _json2CSharpPlusSimple = null;
    }

    private bool _showJsonEditor
    {
        get => !_hideEditor;
        set => _hideEditor = !value;
    }
    private RenderFragment GeneratedClasses(Position tabPanelPosition, bool showSwitch = false)
    {
        return @<div class="f-column w-100">
                   <div class="f-row-column gap-4">
                       <MudText Typo="Typo.h2">Generated Classes</MudText>
                       @if (showSwitch)
                       {
                           <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _showJsonEditor = true">Show Json Editor</MudButton>
                       }
                   </div>
                   <br/>
                   @if (_result.Count > 0)
                   {
                       <MudTabs @bind-ActivePanelIndex="_activePanelIndex" Class="display-contents" Border Elevation="3" Position="@tabPanelPosition">
                           @foreach (var (key, value) in _result)
                           {
                               <MudTabPanel Text="@key" Icon="@Icons.Code">
                                   <PrismCodeBlock DisplayType="CodeBlockDisplayType.Contents" FileName="@key" Style="margin-top: 0; height: 60vh;" Value="@value" Language="PrismLanguage.CSharp"/>
                               </MudTabPanel>
                           }
                       </MudTabs>
                   }
               </div>;
    }

    private RenderFragment JsonEditor()
    {
       return @<div class="f-column w-100">
                  <div class="f-row-column gap-4">
                      <MudText Typo="Typo.h2">Json Editor</MudText>
                      @if (_result.Count > 0)
                      {
                          <MudButton Color="Color.Primary" OnClick="() => _hideEditor = true" Variant="Variant.Filled" >Hide</MudButton>
                      }
                  </div>
                  <br />
                  <JsonEditor @ref="_jsonEditor" @bind-IsJsonValid="_isJsonValid"></JsonEditor>
               </div>;
    }
}
