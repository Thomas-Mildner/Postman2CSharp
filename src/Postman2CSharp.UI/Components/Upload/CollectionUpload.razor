@using System.Runtime.CompilerServices
@if (Collection != null && AppState.ApiClientOptions.RootDefinition == RootDefinition.Manual)
{
    <ManualRootDefinitionComponent @ref="_manualRootDefinitionComponent" PostmanCollection="Collection" ConfirmedChanged="StateHasChanged"  />
}
<br/>
@if (Small)
{
    <div class="f-row" style="gap: 15px; align-items: end; flex-wrap: wrap;">
        <MudTooltip Text="Select a collection off of your file system. Your collection never leaves your device.">
            <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".json" FilesChanged="UploadFiles">
                <ButtonTemplate>
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.FileCopy"
                               for="@context"
                               Disabled="_isBusy" >
                        Select Postman Collection
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>
        </MudTooltip>

        @if (AppState.ApiClientOptions.RootDefinition == RootDefinition.Manual)
        {
            if (Collection == null)
            {
                <MudTooltip Text="Deserialize ApiClient to begin manually grouping collection." Delay="300">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Tertiary"
                               EndIcon="@Icons.Build"
                               OnClick="TryDeserializerApiClient" Disabled="UploadedFile == null || _isBusy">
                        Deserialize
                    </MudButton>
                </MudTooltip>
            }
            else if (_manualRootDefinitionComponent != null)
            {
                @ProcessButton(!_manualRootDefinitionComponent.Confirmed || _isBusy)
            }
        }
        else
        {
            @ProcessButton(UploadedFile == null || _isBusy)
        }
    </div>
    <br />
    @UploadedFile?.Name
}
else
{
    <JsonInputFile OnUpload="OnUpload" FileValid="HasDeserializedCollection" FileName="@UploadedFile?.Name" ></JsonInputFile>
}


@code
{
    [Inject] private ILazyLoader LazyLoad { get; set; } = null!;
    [Inject] private Lazy<ISnackbar?> SnackBar { get; set; } = null!;
    [Inject] private AnalyticsInterop AnalyticsInterop { get; set; } = null!;
    [Inject] private AppState AppState { get; set; } = null!;

    [Parameter] public bool Small { get; set; } = true;
    [Parameter] public EventCallback<ApiCollection> SuccessfulGeneration { get; set; }
    [Parameter] public EventCallback<(IBrowserFile BrowserFile, PostmanCollection Collection)> SuccessfulUpload { get; set; }

    public bool HasDeserializedCollection => Collection != null; 
    public PostmanCollection? GetCollection() => Collection;
    public IBrowserFile? GetUploadedFile() => UploadedFile;

    private ManualRootDefinitionComponent? _manualRootDefinitionComponent;
    [Parameter]
    public PostmanCollection? Collection { get; set; }
    [Parameter]
    public IBrowserFile? UploadedFile { get; set; }

    private bool _isBusy;

    private async Task OnUpload(IBrowserFile browserFile)
    {
        UploadedFile = browserFile;
        await TryDeserializerApiClient();
    }

    private void UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        switch (files.Count)
        {
            case > 1:
                SnackBar.Value?.Add("Try again and only select 1 file.");
                return;
            case 0:
                return;
            default:
                UploadedFile = files.FirstOrDefault();
                Collection = null;
                break;
        }
    }

    private async Task<bool> TryDeserializerApiClient()
    {
        _isBusy = true;
        var fileStream = UploadedFile!.OpenReadStream(300 * 1024 * 1024);
        try
        {
            Collection = await JsonSerializer.DeserializeAsync<PostmanCollection>(fileStream, SerializerSettings.Web);
            if (Collection == null)
            {
                SnackBar.Value?.Add("Json could not be deserialized", Severity.Warning);
                return false;
            }
            await SuccessfulUpload.InvokeAsync((UploadedFile, Collection));
            return true;
        }
        catch (JsonException exception)
        {
            bool v201 = Collection?.Info.Schema?.Contains("v2.0.1") == true;
            Collection = null;
            if (ProgressSnackbar != null)
            {
                SnackBar.Value?.Remove(ProgressSnackbar);
            }

            if (!v201)
            {
                SnackBar.Value?.Add($"Json is in the wrong schema. Version must be v2.0.1. Deserialization failed. \n {exception.Message}", Severity.Error, x => x.VisibleStateDuration = 20000);
            }
            else
            {
                SnackBar.Value?.Add($"Json could not be deserialized. {exception.Message}", Severity.Error, x => x.VisibleStateDuration = 20000);
            }
        }
        catch (Exception exception)
        {
            Collection = null;
            if (ProgressSnackbar != null)
            {
                SnackBar.Value?.Remove(ProgressSnackbar);
            }
            SnackBar.Value?.Add($"Something went wrong. {exception.Message}", Severity.Error);
        }
        finally
        {
            _isBusy = false;
        }
        return false;
    }

    private async Task OnProcessClicked()
    {
        if (AppState.ApiClientOptions.RootDefinition != RootDefinition.Manual)
        {
            if (await TryDeserializerApiClient())
            {
                await GenerateApiClientsWithTracking();
            }
        }
        else
        {
            await GenerateApiClientsWithTracking();
        }
    }

    private async Task GenerateApiClientsWithTracking()
    {
        if (Collection == null) return;
        _isBusy = true;
        try
        {
            var apiClientGenerator = new ApiClientGenerator(Collection, new ApiClientGeneratorOptions(AppState.CodeWriterConfigInputModel.ToCSharpCodeWriterConfig(), AppState.ApiClientOptions));
            StartTrackingGenerator(apiClientGenerator);
            await Task.Delay(1);
            var apiClients = await apiClientGenerator.GenerateApiClients();
            var apiCollection = new ApiCollection()
            {
                ApiClients = apiClients,
                CollectionInfo = Collection.Info
            };

            var isTestData = UploadedFile?.Name == Consts.TestDataName;
            var dataType = isTestData ? "Test Data" : "Real Data";
            var message = $"Generate ApiClient - {dataType}";
            await AnalyticsInterop.TrackAction(message);
            await SuccessfulGeneration.InvokeAsync(apiCollection);
        }
        catch (Exception exception)
        {
            if (ProgressSnackbar != null)
            {
                SnackBar.Value?.Remove(ProgressSnackbar);
            }
            SnackBar.Value?.Add($"Something went wrong. {exception.Message}", Severity.Error, configure => configure.VisibleStateDuration = 7000);
            await AnalyticsInterop.TrackAction($"Error Generating ApiClient: {exception.Message}");
        }
        finally
        {
            UploadedFile = null;
            _isBusy = false;
        }
    }

    private Snackbar? ProgressSnackbar { get; set; }
    private void StartTrackingGenerator(ApiClientGenerator apiClientGenerator)
    {
        var options = new ProgressPopupOptions("Deserializing collection...", "Finished Generating ApiClients!");
        apiClientGenerator.ProgressCallback += options.InvokeProgressCallback;
        apiClientGenerator.OnStageChanged += options.InvokeStageChangedCallback;

        ProgressSnackbar = SnackBar.Value?.Add<ProgressPopup>(new Dictionary<string, object>()
        {
            {"Options", options }
        }, Severity.Normal, configure =>
        {
            configure.ActionVariant = Variant.Text;
            configure.CloseAfterNavigation = false;
            configure.HideIcon = true;
            configure.ShowCloseIcon = false;
            configure.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
            configure.VisibleStateDuration = 200000;
        });
        if (ProgressSnackbar == null) return;
        options.Snackbar = ProgressSnackbar;
    }

    private RenderFragment ProcessButton(bool disabled)
    {
        return @<MudTooltip Text="Begin generating ApiClients." Delay="300">
                   <MudButton Variant="Variant.Filled"
                              Color="Color.Tertiary"
                              EndIcon="@Icons.Build"
                              OnClick="OnProcessClicked" Disabled="disabled">
                       Process
                   </MudButton>
               </MudTooltip>;
    }
}
