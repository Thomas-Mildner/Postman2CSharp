@if (_collection != null && Convert.LastSavedApiClientOptions.RootDefinition == RootDefinition.Manual)
{
    <ManualRootDefinitionComponent @ref="_manualRootDefinitionComponent" PostmanCollection="_collection" ConfirmedChanged="StateHasChanged"  />
}
<br/>
<div class="f-row" style="gap: 15px; align-items: end; flex-wrap: wrap;">
    <MudTooltip Text="Looads in a Google Maps collection to let you see how the website works with dumby data.">
        <MudButton Color="Color.Secondary" OnClick="GetTestData" Variant="Variant.Filled">Test Data</MudButton>
    </MudTooltip>

    <MudTooltip Text="Select a collection off of your file system. Your collection never leaves your device.">
        <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".json" FilesChanged="UploadFiles">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.FileCopy"
                           for="@context">
                    Select Postman Collection
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
    </MudTooltip>
    
    @if (Convert.LastSavedApiClientOptions.RootDefinition == RootDefinition.Manual)
    {
        if (_collection == null)
        {
            <MudTooltip Text="Deserialize ApiClient to begin manually grouping collection." Delay="300">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Tertiary"
                           EndIcon="@Icons.Build"
                           OnClick="TryDeserializerApiClient" Disabled="_uploadedFile == null">
                    Deserialize
                </MudButton>
            </MudTooltip>
        }
        else if (_manualRootDefinitionComponent != null)
        {
            @ProcessButton(!_manualRootDefinitionComponent.Confirmed)
        }
    }
    else
    {
        @ProcessButton(_uploadedFile == null)
    }
</div>
<br />
@_uploadedFile?.Name

@code
{
    [Inject] private ILazyLoader LazyLoad { get; set; } = null!;
    [Inject] private Lazy<ISnackbar?> SnackBar { get; set; } = null!;
    [Inject] private AnalyticsInterop AnalyticsInterop { get; set; } = null!;
    [Parameter] public EventCallback<ApiCollection> SuccessfulUpload { get; set; }

    private ManualRootDefinitionComponent? _manualRootDefinitionComponent;
    private PostmanCollection? _collection;
    private IBrowserFile? _uploadedFile;
    private const string TestDataName = "GoogleMapsPlatform.json";

    private void UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        switch (files.Count)
        {
            case > 1:
                SnackBar.Value?.Add("Try again and only select 1 file.");
                return;
            case 0:
                return;
            default:
                _uploadedFile = files.FirstOrDefault();
                _collection = null;
                break;
        }
    }

    private async Task GetTestData()
    {
        await LazyLoad.LoadHttpSecurityAssemblies();
        var httpClient = new HttpClient();
        var response = await httpClient.GetAsync("https://files.postman2csharp.com/GoogleMapsPlatform.json");
        _uploadedFile = new TestBrowserFile(await response.Content.ReadAsStreamAsync(), TestDataName);
        _collection = null;
    }

    private async Task<bool> TryDeserializerApiClient()
    {
        var fileStream = _uploadedFile!.OpenReadStream(300 * 1024 * 1024);
        try
        {
            _collection = await JsonSerializer.DeserializeAsync<PostmanCollection>(fileStream, SerializerSettings.Web);
            if (_collection == null)
            {
                SnackBar.Value?.Add("Json could not be deserialized", Severity.Warning);
                return false;
            }
            return true;
        }
        catch (JsonException exception)
        {
            if (ProgressSnackbar != null)
            {
                SnackBar.Value?.Remove(ProgressSnackbar);
            }
            SnackBar.Value?.Add($"Json could not be deserialized. {exception.Message}", Severity.Error);
        }
        catch (Exception exception)
        {
            if (ProgressSnackbar != null)
            {
                SnackBar.Value?.Remove(ProgressSnackbar);
            }
            SnackBar.Value?.Add($"Something went wrong. {exception.Message}", Severity.Error);
        }
        return false;
    }

    private async Task OnProcessClicked()
    {
        if (Convert.LastSavedApiClientOptions.RootDefinition != RootDefinition.Manual)
        {
            if (await TryDeserializerApiClient())
            {
                await Process();
            }
        }
        else
        {
            await Process();
        }
    }

    private async Task Process()
    {
        if (_collection == null) return;
        try
        {
            var apiClientGenerator = new ApiClientGenerator(_collection, new ApiClientGeneratorOptions(CSharpCodeWriterOptionsComponent.Options, Convert.LastSavedApiClientOptions));
            StartTrackingGenerator(apiClientGenerator);
            await Task.Delay(1);
            var apiClients = await apiClientGenerator.GenerateApiClients();
            var apiCollection = new ApiCollection()
            {
                ApiClients = apiClients,
                CollectionInfo = _collection.Info
            };

            var isTestData = _uploadedFile.Name == TestDataName;
            var dataType = isTestData ? "Test Data" : "Real Data";
            var message = $"Generate ApiClient - {dataType}";
            await AnalyticsInterop.TrackAction(message);
            await SuccessfulUpload.InvokeAsync(apiCollection);
        }
        catch (Exception exception)
        {
            if (ProgressSnackbar != null)
            {
                SnackBar.Value?.Remove(ProgressSnackbar);
            }
            SnackBar.Value?.Add($"Something went wrong. {exception.Message}", Severity.Error);
        }
        finally
        {
            _uploadedFile = null;
        }
    }

    private Snackbar? ProgressSnackbar { get; set; }
    private void StartTrackingGenerator(ApiClientGenerator apiClientGenerator)
    {
        var options = new ProgressPopupOptions("Deserializing collection...", "Finished Generating ApiClients!");
        apiClientGenerator.ProgressCallback += options.InvokeProgressCallback;
        apiClientGenerator.OnStageChanged += options.InvokeStageChangedCallback;

        ProgressSnackbar = SnackBar.Value?.Add<ProgressPopup>(new Dictionary<string, object>()
        {
            {"Options", options }
        }, Severity.Normal, configure =>
        {
            configure.ActionVariant = Variant.Text;
            configure.CloseAfterNavigation = false;
            configure.HideIcon = true;
            configure.ShowCloseIcon = false;
            configure.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
            configure.VisibleStateDuration = 200000;
        });
        if (ProgressSnackbar == null) return;
        options.Snackbar = ProgressSnackbar;
    }

    private RenderFragment ProcessButton(bool disabled)
    {
        return @<MudTooltip Text="Begin generating ApiClients." Delay="300">
                   <MudButton Variant="Variant.Filled"
                              Color="Color.Tertiary"
                              EndIcon="@Icons.Build"
                              OnClick="OnProcessClicked" Disabled="disabled">
                       Process
                   </MudButton>
               </MudTooltip>;
    }
}
