@using CodeBeamMudExtensions
@implements IDisposable

<style>
    .setting-section-header {
        margin-bottom: 10px;
        font-weight: 100;
    }

    .my-step-container {
        background: rgb(23 26 34);
        padding: 15px;
        border: 1px solid white;
        border-top: 0px;
    }
</style>
<div class="f-row-column" style="gap: 10px;">
    <div class="f-column small-w-100" style="width: 90%;">
        <MudText>
            For an in depth explanation on how these settings work, see
            <a class="link-normal" href="/ApiClient-Configurations-Explained">ApiClient Configurations Explanation</a>.
        </MudText>
    </div>
</div>
<br />

<MudStepper @ref="_stepper" Linear="true" Color="Color.Primary" Variant="Variant.Filled" UseStepBorder="true"
            DisableAnimation="false" ValidateStep="ValidateStep" AllowNext="ValidateNext" ActiveStepChanged="OnActiveIndexChanged" >
    <MudStep Title="Upload">
        <div class="my-step-container" style="min-height: 50vh;"  >
            <CollectionUpload Small="false" Collection="_postmanCollection" UploadedFile="_uploadedFile" SuccessfulUpload="OnSuccessfulUpload"></CollectionUpload>
        </div>
    </MudStep>
    <MudStep Title="Json">
        <StepperItem >
            <Input>
                <EnumSelectComponent TEnum="JsonLibrary" @bind-Value="_dirtyApiClientOptions.JsonLibrary" Label="Json Library"></EnumSelectComponent>
                <EnumSelectComponent TEnum="JsonPropertyAttributeUsage" @bind-Value="_dirtyApiClientOptions.AttributeUsage" Label="JsonProperty Attribute Usage"></EnumSelectComponent>
            </Input>
            <Example>
                <PrismCodeBlock Value="@StepperExamples.Json(_dirtyApiClientOptions)" Language="PrismLanguage.CSharp" UseLineNumbers="false" DisplayType="CodeBlockDisplayType.Scroll" MaxHeight="50vh" MaxWidth="40vw" />
            </Example>
            <AdditionalInfo>
                <MudText Typo="Typo.h6" >Attribute Usage</MudText>
                <ul>
                    <li>
                        @InlineValue("Always") - Always add attribute to properties
                    </li>
                    <li>
                        @InlineValue("OnlyWhenNecessary") - Attribute will only be applied to properties with names that cannot be expressed as C# identifiers
                    </li>
                    <li>
                        @InlineValue("Never") - Attribute will never be applied to properties.
                    </li>
                </ul>
            </AdditionalInfo>
        </StepperItem>
    </MudStep>
    <MudStep Title="Multiple Response Handling">
        <StepperItem >
            <Input>
                <MudCheckBox Color="Color.Primary" @bind-Checked="_dirtyApiClientOptions.HandleMultipleResponses">Handle Multiple Responses</MudCheckBox>
                <EnumSelectComponent TEnum="MultipleResponseHandling" @bind-Value="_dirtyApiClientOptions.MultipleResponseHandling" Disabled="_dirtyApiClientOptions.HandleMultipleResponses == false" Label="Return Type"></EnumSelectComponent>
            </Input>
            <Example>
                <PrismCodeBlock Value="@StepperExamples.MultipleResponses(_dirtyApiClientOptions)" Language="PrismLanguage.CSharp" UseLineNumbers="false" DisplayType="CodeBlockDisplayType.Scroll" MaxHeight="50vh" MaxWidth="40vw" />
            </Example>
        </StepperItem>
    </MudStep>
    <MudStep Title="Error Handling">
        <StepperItem>
            <Input>
                <EnumSelectComponent @bind-Value="_dirtyApiClientOptions.ErrorHandlingStrategy" AlwaysShowAllEnumValues Label="Error Handling Strategy"></EnumSelectComponent>
                <MultiEnumSelectComponent Disabled="_dirtyApiClientOptions.ErrorHandlingStrategy == ErrorHandlingStrategy.None" TEnum="ErrorHandlingSinks" Value="_dirtyApiClientOptions.ErrorHandlingSinks" Label="Error Handling Sinks" SelectedValuesChanged="SelectedErrorHandlingSinksChanged"></MultiEnumSelectComponent>
                <MultiEnumSelectComponent Disabled="_dirtyApiClientOptions.ErrorHandlingStrategy == ErrorHandlingStrategy.None" TEnum="CatchExceptionTypes" Label="Catch Exception Types" ForbidNoValue Value="_dirtyApiClientOptions.CatchExceptionTypes" SelectedValuesChanged="SelectedCatchExceptionTypesChanged"></MultiEnumSelectComponent>
                <EnumSelectComponent Disabled="_dirtyApiClientOptions.ErrorHandlingStrategy == ErrorHandlingStrategy.None || !_dirtyApiClientOptions.ErrorHandlingSinks.Contains(ErrorHandlingSinks.LogException)" @bind-Value="_dirtyApiClientOptions.LogLevel" AlwaysShowAllEnumValues Label="Log Level"></EnumSelectComponent>
            </Input>
            <Example>
                <PrismCodeBlock Value="@StepperExamples.ErrorHandling(_dirtyApiClientOptions)" Language="PrismLanguage.CSharp" UseLineNumbers="false" DisplayType="CodeBlockDisplayType.Scroll" MaxHeight="50vh" MaxWidth="40vw" />
            </Example>
        </StepperItem>
    </MudStep>
    <MudStep Title="Function Configurations">
        <StepperItem>
            <Input>
                <MudCheckBox Color="Color.Primary" @bind-Checked="_dirtyApiClientOptions.MakePathCollectionVariablesFunctionParameters">Make Path Collection Variables Function Parameters</MudCheckBox>
                <MudCheckBox Color="Color.Primary" @bind-Checked="_dirtyApiClientOptions.UseCancellationTokens">Use Cancellation Tokens</MudCheckBox>
                <MudCheckBox Color="Color.Primary" @bind-Checked="_dirtyApiClientOptions.ExecuteWithRetry">Execute With Retry</MudCheckBox>
            </Input>
            <Example>
                <PrismCodeBlock Value="@StepperExamples.FunctionConfigurations(_dirtyApiClientOptions)" Language="PrismLanguage.CSharp" UseLineNumbers="false" DisplayType="CodeBlockDisplayType.Scroll" MaxHeight="50vh" MaxWidth="40vw" />
            </Example>
        </StepperItem>
    </MudStep>
    <MudStep Title="Class Deduping">
        <StepperItem>
            <Input>
            <MudCheckBox Color="Color.Primary" @bind-Checked="_dirtyApiClientOptions.DuplicateOptions.RemoveDuplicateRoots">Dedupe Duplicate Roots</MudCheckBox>
            <MudCheckBox Color="Color.Primary" @bind-Checked="_dirtyApiClientOptions.DuplicateOptions.RemoveSemiDuplicates">Dedupe Semi-Duplicate Classes</MudCheckBox>
            <MudNumericField @bind-Value="_dirtyApiClientOptions.DuplicateOptions.SameOriginalNameSensitivity" Disabled="_dirtyApiClientOptions.DuplicateOptions.RemoveSemiDuplicates == false" Label="Same Json Name Sensitivity" Variant="Variant.Outlined" Step="1" Min="0" Max="50" />
            <MudNumericField @bind-Value="_dirtyApiClientOptions.DuplicateOptions.DifferentOriginalNameSensitivity" Disabled="_dirtyApiClientOptions.DuplicateOptions.RemoveSemiDuplicates == false" Label="Different Json Name Sensitivity" Variant="Variant.Outlined" Step="1" Min="0" Max="6" />
            </Input>
            <Example>
                <PrismCodeBlock Value="@StepperExamples.ClassDeduping(_dirtyApiClientOptions)" Language="PrismLanguage.CSharp" UseLineNumbers="false" DisplayType="CodeBlockDisplayType.Scroll" MaxHeight="50vh" MaxWidth="40vw" />
            </Example>
            <AdditionalInfo>
                <div>
                    <ul>
                        <li>
                            @InlineEmphasis("Duplicate Roots") - Root classes are your responses and requests; all other classes generated descend from them. Deduping them
                            will cause some endpoints to return the same model, rather than all returning a unique model.
                        </li>
                        <li>
                            @InlineEmphasis("Semi-Duplicate Classes") - A semi-duplicate class is a class that has that has all matching members to another class, except fewer.
                            It's not uncommon to see JSON responses representing the same model with different amounts of properties. This is usually because the API is returning
                            a subset of the properties in the model. Enabling this will dedupe these "semi-duplicates".
                        </li>
                        <li>
                            @InlineEmphasis("Same vs Different Json Name Sensitivity") - If you enable removing semi-duplicates, you probably want to set limits on the difference in the amount
                            of properties on 2 classes for them be to be considered semi-duplicates - you don't want an error response with only a "Message" property being deduped into the chat message model
                            just because it also happens to have a "Message" property. The same sensitivity is the the difference in the amount of properties 2 classes can have and still be considered semi-duplicate
                            when they have the same key in json. The different sensitivity works the same but when the keys in the json are different.
                        </li>
                    </ul>
                </div>
            </AdditionalInfo>
        </StepperItem>
    </MudStep>
    <MudStep Title="Miscellaneous">
        <StepperItem>
            <Input>
                @if (_postmanCollection?.GetAllCollectionItems().Any(x => !string.IsNullOrWhiteSpace(x?.Request?.Body?.Graphql?.Query)) == true)
                {
                    <MudCheckBox Color="Color.Primary" @bind-Checked="_dirtyApiClientOptions.GraphQLQueriesInSeperateFile">GraphQL Queries In Separate File</MudCheckBox>
                }
                <MultiEnumSelectComponent TEnum="XmlCommentTypes" Value="_dirtyApiClientOptions.XmlCommentTypes" Label="Comment Types" SelectedValuesChanged="SelectedCommentTypesChanged"></MultiEnumSelectComponent>
                <MultiEnumSelectComponent TEnum="RemoveDisabled" Value="_dirtyApiClientOptions.RemoveDisabled" Label="Remove Disabled" SelectedValuesChanged="SelectedRemovedDisabledChanged"></MultiEnumSelectComponent>
                <EnumSelectComponent @bind-Value="_dirtyApiClientOptions.RootDefinition" Exclude="new List<RootDefinition>() {RootDefinition.Manual}" AlwaysShowAllEnumValues Label="Request Grouping"></EnumSelectComponent>
                @if (_dirtyApiClientOptions.RootDefinition == RootDefinition.FlattenHierarchy)
                {
                    <p>Postman Collection Depth: @_postmanCollectionDepth</p>
                    <MudNumericField T="int" Min="2" Max="_postmanCollectionDepth - 1" Immediate="true" @bind-Value="_dirtyApiClientOptions.NewMaxDepth" Label="New Max Depth" Variant="Variant.Outlined" ></MudNumericField>
                }
            </Input>
            <Example>
                <PrismCodeBlock Value="@StepperExamples.Miscellaneous(_dirtyApiClientOptions)" Language="PrismLanguage.CSharp" UseLineNumbers="false" DisplayType="CodeBlockDisplayType.Scroll" MaxHeight="50vh" MaxWidth="40vw" />
            </Example>
            <AdditionalInfo>
                <ul>
                    <li>@InlineEmphasis("Root"): A root is any folder in a collection that has a request.</li>
                    <li>@InlineEmphasis("Authority"): Includes the authentication section, the host, and the port of a url.</li>
                    <ul>
                        <li>In the URL @InlineCode("\"http://user:pass@ex.com:8080/path\""), the Authority is @InlineCode("\"user:pass@ex.com:8080\"").</li>
                    </ul>
                    <Break Size="P2CsSize.Small"></Break>
                    @if (_postmanCollection?.GetAllCollectionItems().Any(x => !string.IsNullOrWhiteSpace(x?.Request?.Body?.Graphql?.Query)) == true)
                    {
                        <li>
                            @InlineValue("GraphQL Queries In Separate File") - Inlining the query of a GraphQL request (@InlineCode("string query = \"some long query\"")) in a function can take up a lot of space. Enabling this option will put the queries in a separate static class.
                        </li>
                        <Break Size="P2CsSize.Small"></Break>
                    }
                    <li>@InlineValue("PerAuthorityPerFolder"): An ApiClient will be created for each @InlineEmphasis("root"), with a caveat being that if a root uses different authorities in it's requests, the requests will be regrouped into new roots based on authority.</li>
                    <ul>
                        <li>Useful when the postman collection is well organized and you want your ApiClients to have separation of concerns</li>
                    </ul>
                    <li>@InlineValue("PerAuthority"): An ApiClient will be created for each authority disregarding the folders requests are in.</li>
                    <ul>
                        <li>Useful when the you want a monolithic ApiClient but may lead to weird behaviour with mixed authentication types.</li>
                    </ul>
                    <li>@InlineValue("FlattenHierarchy"): Requests deeper than the specified max depth will be moved up, then the behaviour will mimic @InlineValue("PerAuthorityPerFolder").</li>
                    <ul>
                        <li>Useful when you have a structure where folders contain subfolders of related requests.</li>
                        <ul>
                            <li>
                                Example Usage Scenario: Collection has a folder @InlineCode("\"Contacts\"") which has subfolders @InlineCode("\"Employees\""), @InlineCode("\"Customers\""), and @InlineCode("\"Suppliers\"")
                                with all requests in subfolders sharing path @InlineCode("\"/contacts\""). In this structure, the depth is 4: Collection->Contacts->Employee->Requests.
                                If you were to generate with PerAuthorityPerFolder, an ApiClient would be created for each subfolder, @InlineCode("\"Employees\""), @InlineCode("\"Customers\""), and @InlineCode("\"Suppliers\"").
                                With FlattenHierarchy enabled and a @InlineValue("NewMaxValue") set to 3, the @InlineCode("\"Employees\""), @InlineCode("\"Customers\""), and @InlineCode("\"Suppliers\"") folders would disappear and all their
                                requests would be moved into the @InlineCode("\"Contacts\"") folder. A single ApiClient would then be generated for the Contacts folder. The
                                new structure has a depth of 3. Collection->Contacts->Requests
                            </li>
                        </ul>
                        <li>The minimum allowed NewMaxDepth is 2 because you cannot flatten the hierarchy smaller than Collection->Requests</li>
                    </ul>
                </ul>
            </AdditionalInfo>
        </StepperItem>
</MudStep>
    <MudStep Title="Result" IsResultStep="true">
        <div class="my-step-container" style="min-height: 50vh;">
            <ProgressPopup Options="_progressOptions" IsPopup="false"/>
        </div>
    </MudStep>
</MudStepper>

@code {
    [Inject] private AppState AppState { get; set; } = null!;
    [Inject] private ISnackbar? Snackbar { get; set; }
    [Inject] private AnalyticsInterop AnalyticsInterop { get; set; } = null!;
    [Parameter] public EventCallback<ApiCollection> SuccessfulGeneration { get; set; }

    private int _postmanCollectionDepth = 20;

    private MudStepper? _stepper;
    private enum Steps
    {
        Upload,
        Json,
        MultipleResponseHandling,
        ErrorHandling,
        FunctionConfigurations,
        ClassDeduping,
        Miscellaneous,
        Result
    }

    private PostmanCollection? _postmanCollection;
    private IBrowserFile? _uploadedFile;


    private async Task OnActiveIndexChanged(int newIndex)
    {
        if (newIndex == (int) Steps.Result)
        {
            await InvokeAsync(StateHasChanged);
            await Task.Delay(10);
            await GenerateApiClientsWithTracking();
        }
    }

    private Task<bool> ValidateNext(int activeIndex)
    {
        return ValidateStep(StepChangeDirection.Forward, activeIndex);
    }

    private Task<bool> ValidateStep(StepChangeDirection stepDirection, int activeIndex)
    {
        if (stepDirection is StepChangeDirection.None or StepChangeDirection.Backward)
        {
            return Task.FromResult(true);
        }
        var step = (Steps)activeIndex;
        switch (step)
        {
            case Steps.Upload:
                return Task.FromResult(_postmanCollection != null && _uploadedFile != null);
            case Steps.Json:
                break;
            case Steps.MultipleResponseHandling:
                break;
            case Steps.ErrorHandling:
                break;
            case Steps.FunctionConfigurations:
                break;
            case Steps.ClassDeduping:
                break;
            case Steps.Miscellaneous:
                break;
            case Steps.Result:
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }

        return Task.FromResult(true);
    }

    private void ResetAllStepsBefore(int index)
    {
        var step = (Steps)index;
        switch (step)
        {
            case Steps.Upload:
                break;
            case Steps.Json:
                break;
            case Steps.MultipleResponseHandling:
                break;
            case Steps.ErrorHandling:
                break;
            case Steps.FunctionConfigurations:
                break;
            case Steps.ClassDeduping:
                break;
            case Steps.Miscellaneous:
                break;
            case Steps.Result:
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private void SetFutureStepsIncomplete(Steps step)
    {
        switch (step)
        {
            case Steps.Upload:
                goto case Steps.Json;
            case Steps.Json:
                goto case Steps.MultipleResponseHandling;
            case Steps.MultipleResponseHandling:
                goto case Steps.ErrorHandling;
            case Steps.ErrorHandling:
                goto case Steps.FunctionConfigurations;
            case Steps.FunctionConfigurations:
                goto case Steps.Miscellaneous;
            case Steps.Miscellaneous:
                break;
        }
        var futureSteps = _stepper!.Steps.Skip((int) step + 1).ToList();
        foreach (var futureStep in futureSteps)
        {
            futureStep.Status = StepStatus.Continued;
        }
    }

    private ApiClientOptions _dirtyApiClientOptions = new();

    protected override void OnInitialized()
    {
        if (!ApiClientOptions.ConfigsEqual(_dirtyApiClientOptions, AppState.ApiClientOptions))
        {
            _dirtyApiClientOptions = AppState.ApiClientOptions.Clone();
        }
        AppState.OptionsChanged += ApiOptionsChanged;
    }

    private void ApiOptionsChanged()
    {
        _dirtyApiClientOptions = AppState.ApiClientOptions.Clone();
        InvokeAsync(StateHasChanged);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!ApiClientOptions.ConfigsEqual(_dirtyApiClientOptions, AppState.ApiClientOptions))
        {
            SetApiClientOptions(_dirtyApiClientOptions);
        }
    }

    private void SetApiClientOptions(ApiClientOptions options)
    {
        _dirtyApiClientOptions = options.Clone();
        AppState.UpdateApiClientOptions(options);
    }

    private void SelectedErrorHandlingSinksChanged(IEnumerable<string> errorHandlingSinks)
    {
        _dirtyApiClientOptions.ErrorHandlingSinks = errorHandlingSinks.Select(Enum.Parse<ErrorHandlingSinks>).ToList();
    }
    private void SelectedCatchExceptionTypesChanged(IEnumerable<string> catchTypes)
    {
        _dirtyApiClientOptions.CatchExceptionTypes = catchTypes.Select(Enum.Parse<CatchExceptionTypes>).ToList();
    }
    private void SelectedCommentTypesChanged(IEnumerable<string> commentTypes)
    {
        _dirtyApiClientOptions.XmlCommentTypes = commentTypes.Select(Enum.Parse<XmlCommentTypes>).ToList();
    }
    private void SelectedRemovedDisabledChanged(IEnumerable<string> commentTypes)
    {
        _dirtyApiClientOptions.RemoveDisabled = commentTypes.Select(Enum.Parse<RemoveDisabled>).ToList();
    }

    private void SaveOptions()
    {
        SetApiClientOptions(_dirtyApiClientOptions);
        Snackbar?.Add($"Saved {nameof(ApiClientOptions)}", Severity.Success);
    }

    private async Task GenerateApiClientsWithTracking()
    {
        if (_postmanCollection == null || _uploadedFile == null) return;
        try
        {
            var apiClientGenerator = new ApiClientGenerator(_postmanCollection, new ApiClientGeneratorOptions(AppState.CodeWriterConfigInputModel.ToCSharpCodeWriterConfig(), AppState.ApiClientOptions));
            StartTrackingGenerator(apiClientGenerator);
            _forceRender = true;
            StateHasChanged();
            await Task.Delay(1);
            var apiClients = await apiClientGenerator.GenerateApiClients();
            var apiCollection = new ApiCollection()
            {
                ApiClients = apiClients,
                CollectionInfo = _postmanCollection.Info
            };

            var isTestData = _uploadedFile.Name == Consts.TestDataName;
            var dataType = isTestData ? "Test Data" : "Real Data";
            var message = $"Generate ApiClient - {dataType}";
            await AnalyticsInterop.TrackAction(message);
            await Task.Delay(3000);
            await SuccessfulGeneration.InvokeAsync(apiCollection);
        }
        catch (Exception exception)
        {
            if (_progressSnackbar != null)
            {
                Snackbar?.Remove(_progressSnackbar);
            }
            Snackbar?.Add($"Something went wrong. Create issue on GitHub if issue persists. Error Message: {exception.Message}", Severity.Error, configure => configure.VisibleStateDuration = 7000);
            await AnalyticsInterop.TrackAction($"Error Generating ApiClient: {exception.Message}");
        }
    }

    private ProgressPopupOptions? _progressOptions;
    private Snackbar? _progressSnackbar;
    private void StartTrackingGenerator(ApiClientGenerator apiClientGenerator)
    {
        var options = new ProgressPopupOptions("Deserializing collection...", "Finished Generating ApiClients!");
        apiClientGenerator.ProgressCallback += options.InvokeProgressCallback;
        apiClientGenerator.OnStageChanged += options.InvokeStageChangedCallback;

        _progressOptions = options;
    }

    private bool _forceRender = false;
    private ApiClientOptions? _cachedApiClientsOptions;
    private ApiClientOptions? _cachedDirtyApiClientsOptions;
    protected override bool ShouldRender()
    {
        if (!_forceRender && _cachedApiClientsOptions != null && ApiClientOptions.ConfigsEqual(_cachedApiClientsOptions, _cachedDirtyApiClientsOptions)
            && ApiClientOptions.ConfigsEqual(AppState.ApiClientOptions, _dirtyApiClientOptions))
        {
            return false;
        }
        _forceRender = false;
        _cachedApiClientsOptions = AppState.ApiClientOptions.Clone();
        _cachedDirtyApiClientsOptions = _dirtyApiClientOptions.Clone();
        return true;
    }

    public void Dispose()
    {
        AppState.OptionsChanged -= ApiOptionsChanged;
    }

    private void OnSuccessfulUpload((IBrowserFile BrowserFile, PostmanCollection Collection) args)
    {
        _uploadedFile = args.BrowserFile;
        _postmanCollection = args.Collection;
        _postmanCollectionDepth = _postmanCollection.CalculateNesting();
        _dirtyApiClientOptions.NewMaxDepth = _postmanCollectionDepth - 1;
        if (_postmanCollection?.Item?.Count > 0)
        {
            var requestsCount = _postmanCollection.GetAllCollectionItems().Count();
            var requestsWithoutResponsesCount = _postmanCollection.GetAllCollectionItems().Count(x => x.Response == null || x.Response.Count == 0);
            var percentOfRequestsWithoutResponses = (double) requestsWithoutResponsesCount / requestsCount;
            if (percentOfRequestsWithoutResponses > 0.5)
            {
                if (requestsCount == requestsWithoutResponsesCount)
                {
                    Snackbar?.Add($"Warning: None of your requests have responses saved. This may result in sub par code generation. It is highly recommended to save responses for all your requests.", 
                        Severity.Warning, x => x.VisibleStateDuration = 15000);
                }
                else
                {
                    Snackbar?.Add($"Warning: {percentOfRequestsWithoutResponses:P} of your requests do not have responses saved. This may result in sub par code generation. It is highly recommended to save responses for all your requests.",
                        Severity.Warning, x => x.VisibleStateDuration = 15000);
                }
            }
        }
        _stepper?.TriggerReRender();
    }

}