@if (Options != null && IsPopup)
{
    <div class="f-row aic" style="gap: 20px;">
        @if (_progress != 1)
        {
            <MudText Typo="Typo.h6">@Options.Text</MudText>
            <MudProgressCircular @ref="_mudProgressCircular" Value="@_progress" Indeterminate="false" Size="Size.Medium" StrokeWidth="4" Color="Color.Success" Min="0" Max="1" />
            <MudText Typo="Typo.h6"><b>@($"{_progress:P2}")</b></MudText>
        }
        else
        {
            <MudText Typo="Typo.h6">@Options.CompletedText</MudText>
            <MudIcon Color="@Color.Success" Icon="@Icons.Check" Size="Size.Large"></MudIcon>
            if (_timer != null)
            {
                <MudText Typo="Typo.body1">@_message</MudText>
            }
        }
    </div>
}
else if (Options != null)
{
    <div class="f-column aic" style="gap: 20px;">
        @if (_progress != 1)
        {
            <MudText Typo="Typo.h4">@Options.Text</MudText>
            <MudProgressCircular @ref="_mudProgressCircular" Value="@_progress" Indeterminate="false" Size="Size.Large" StrokeWidth="4" Color="Color.Success" Min="0" Max="1" />
            <MudText Typo="Typo.h5"><b>@($"{_progress:P2}")</b></MudText>
        }
        else
        {
            <MudText Typo="Typo.h6">@Options.CompletedText</MudText>
            <MudIcon Color="@Color.Success" Icon="@Icons.Check" Size="Size.Large"></MudIcon>
            if (_timer != null)
            {
                <MudText Typo="Typo.body1">@_message</MudText>
            }
        }
    </div>
}

@code {
    [Parameter] public bool IsPopup { get; set; } = true;

    private float _progress = 0;

    private MudProgressCircular? _mudProgressCircular;

    [Inject] private Lazy<ISnackbar?> Snackbar { get; set; } = null!;
    [Parameter] public ProgressPopupOptions? Options { get; set; }

    private bool _first = true;

    private void Reset()
    {
        _first = true;
        _progress = 0;
        Options = null;
        _timer = null;
        _countDown = 5;
        _message = "Navigating in 5...";
    }


    protected override void OnParametersSet()
    {
        if (_first && Options != null)
        {
            _first = false;
            StartTrackingProgress();
        }
    }

    private void StartTrackingProgress()
    {
        Options!.OnProgress += OnProgressChanged;
        Options!.StageChanged += OnStageChanged;
    }

    private async Task OnStageChanged(string stage)
    {
        Options!.Text = stage;
        await InvokeAsync(StateHasChanged);
        var rand = new Random();
        await Task.Delay(rand.Next(300, 700));
    }

    private async Task OnProgressChanged(float newProgress)
    {
        _progress = newProgress;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(3);
        if (Math.Abs(_progress - 1) < .01f)
        {
#pragma warning disable CS4014
            StopTrackingGenerator();
#pragma warning restore CS4014
        }
    }

    private async Task StopTrackingGenerator()
    {
        _progress = 1;
        await InvokeAsync(StateHasChanged);
        Options!.OnProgress -= OnProgressChanged;

        if (Options.Snackbar != null)
        {
            await Task.Delay(5000);
            Snackbar.Value?.Remove(Options!.Snackbar);
        }
        else
        {
            _timer = new System.Timers.Timer(1000);
            _timer.Elapsed += OnTimerElapsed;
            _timer.Start();
        }
    }
    private System.Timers.Timer? _timer;
    private int _countDown = 5;
    private string _message = "Navigating in 5...";
    private void OnTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        if (_countDown > 0)
        {
            _countDown--;
            _message = $"Navigating in {_countDown}...";
            InvokeAsync(StateHasChanged);
        }
        else
        {
            _timer?.Stop(); 
        }
    }
}
