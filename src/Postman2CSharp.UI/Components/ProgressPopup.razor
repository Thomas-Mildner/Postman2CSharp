@if (Options != null)
{
    <div class="f-row aic" style="gap: 20px;">
        @if (_progress != 1)
        {
            <MudText UserAttributes="TextUserAttributes" Typo="Typo.h6">@Options.Text</MudText>
            <MudProgressCircular @ref="_mudprogressCircular" Value="@_progress" UserAttributes="UserAttributes"  Indeterminate="false" Size="Size.Medium" StrokeWidth="4" Color="Color.Success" Min="0" Max="1" />
            <MudText Typo="Typo.h6"><b>@($"{_progress:P2}")</b></MudText>
        }
        else
        {
            <MudText Typo="Typo.h6">@Options.CompletedText</MudText>
            <MudIcon Color="@Color.Success" Icon="@Icons.Check" Size="Size.Large"></MudIcon>
        }
    </div>
}

@code {
    private string TextGuid = Guid.NewGuid().ToString();
    private readonly string _guid = Guid.NewGuid().ToString();
    private Dictionary<string, object> UserAttributes { get; set; } = new();
    private Dictionary<string, object> TextUserAttributes { get; set; } = new();


    private float _progress = 0;

    private MudProgressCircular? _mudprogressCircular;

    [Inject] private Lazy<ISnackbar?> Snackbar { get; set; } = null!;
    [Parameter] public ProgressPopupOptions? Options { get; set; }

    private bool _first = true;

    protected override void OnInitialized()
    {
        UserAttributes.Add("id", _guid);
        TextUserAttributes.Add("id", TextGuid);
    }


    protected override void OnParametersSet()
    {
        if (_first && Options != null)
        {
            _first = false;
            StartTrackingProgress();
        }
    }

    private void StartTrackingProgress()
    {
        Options!.OnProgress += OnProgressChanged;
        Options!.StageChanged += OnStageChanged;
    }

    private async Task OnStageChanged(string stage)
    {
        Options!.Text = stage;
        await InvokeAsync(StateHasChanged);
        var rand = new Random();
        await Task.Delay(rand.Next(300, 700));
    }

    private async Task OnProgressChanged(float newProgress)
    {
        _progress = newProgress;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(3);
        if (Math.Abs(_progress - 1) < .01f)
        {
#pragma warning disable CS4014
            StopTrackingGenerator();
#pragma warning restore CS4014
        }
    }

    private async Task StopTrackingGenerator()
    {
        _progress = 1;
        await InvokeAsync(StateHasChanged);
        Options!.OnProgress -= OnProgressChanged;

        await Task.Delay(5000);
        Snackbar.Value?.Remove(Options!.Snackbar);
    }

    private int ToSvgValue(double value)
    {
        var minValue = Math.Min(Math.Max(0, value), 1);
    // calculate fraction, which is a value between 0 and 1
        var fraction = (minValue - 0) / (1 - 0);
    // now project into the range of the SVG value (126 .. 0)
        return (int)Math.Round(126 - 126 * fraction);
    }
}
