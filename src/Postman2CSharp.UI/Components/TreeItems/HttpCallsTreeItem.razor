@using System.Net
@if (ApiClientId != null && ApiCollectionId != null && HttpCall != null && _httpCallItems != null && (_shouldRender || (IsParentExpanded && !string.IsNullOrWhiteSpace(SearchQuery) && HttpCall.MatchesSearchQuery(SearchQuery))) && _matchesQuery)
{
    @if (!string.IsNullOrWhiteSpace(HttpCall.RequestSourceCode) || !string.IsNullOrWhiteSpace(HttpCall.QueryParameterSourceCode)
        || !string.IsNullOrWhiteSpace(HttpCall.FormDataSourceCode) || !string.IsNullOrWhiteSpace(HttpCall.GraphQlVariablesSourceCode) || HttpCall.AllResponses.Any(x => !string.IsNullOrWhiteSpace(x.SourceCode)))
    {
        <MudTreeViewItem Value="@HttpCall.Name" @bind-Expanded="Expanded" >
            <Content>
                <MudTreeViewItemToggleButton Visible="true" @bind-Expanded="Expanded"/>
                <MudIcon Icon="@IconHelpers.Folder(Expanded)" Style="margin-right: 15px;"></MudIcon>
                <MudText Style="user-select: none;">@HighlightString(HttpCall.Name, SearchQuery)</MudText>
            </Content>
            <ChildContent>
                <HttpCallTreeItem @ref="_httpCallItems[0]" SearchQuery="@SearchQuery" IsParentExpanded="Expanded" ClassName="@HttpCall.RequestClassName" SourceCode="@HttpCall.RequestSourceCode" HttpCallName="@HttpCall.Name" ApiClientId="@ApiClientId" ApiCollectionId="@ApiCollectionId" />
                <HttpCallTreeItem @ref="_httpCallItems[1]" SearchQuery="@SearchQuery" IsParentExpanded="Expanded" ClassName="@HttpCall.QueryParameterClassName" SourceCode="@HttpCall.QueryParameterSourceCode" HttpCallName="@HttpCall.Name" ApiClientId="@ApiClientId" ApiCollectionId="@ApiCollectionId" />
                <HttpCallTreeItem @ref="_httpCallItems[2]" SearchQuery="@SearchQuery" IsParentExpanded="Expanded" ClassName="@HttpCall.FormDataClassName" SourceCode="@HttpCall.FormDataSourceCode" HttpCallName="@HttpCall.Name" ApiClientId="@ApiClientId" ApiCollectionId="@ApiCollectionId" />
                <HttpCallTreeItem @ref="_httpCallItems[3]" SearchQuery="@SearchQuery" IsParentExpanded="Expanded" ClassName="@HttpCall.GraphQlVariablesClassName" SourceCode="@HttpCall.GraphQlVariablesSourceCode" HttpCallName="@HttpCall.Name" ApiClientId="@ApiClientId" ApiCollectionId="@ApiCollectionId" />
                @foreach (var (response, index) in HttpCall.AllResponses.Select((x, i) => (x, i)))
                {
                    <HttpCallTreeItem @ref="_httpCallItems[4 + index]" SearchQuery="@SearchQuery" IsParentExpanded="Expanded" ClassName="@response.ClassName" SourceCode="@response.SourceCode" HttpCallName="@HttpCall.Name" ApiClientId="@ApiClientId" ApiCollectionId="@ApiCollectionId" />
                }
            </ChildContent>
        </MudTreeViewItem>
    }
    else
    {
        <MudTreeViewItem Value="@HttpCall.Name" Expanded="false" Disabled="true">
            <Content>
                <MudIcon Style="margin-left: 40px; margin-right: 15px;" Icon="@IconHelpers.Folder(Expanded)"></MudIcon>
                <MudText Style="user-select: none;">@HighlightString(HttpCall.Name, SearchQuery)</MudText>
            </Content>
        </MudTreeViewItem>
    }
}

@code {
    private HttpCallTreeItem?[]? _httpCallItems;
    private bool Expanded { get; set; }
    [Parameter, EditorRequired] public string? ApiCollectionId { get; set; }
    [Parameter, EditorRequired] public string? ApiClientId { get; set; }
    [Parameter, EditorRequired] public HttpCall? HttpCall { get; set; }
    [Parameter, EditorRequired] public bool IsParentExpanded { get; set; }
    [Parameter, EditorRequired] public string? SearchQuery { get; set; }
    private bool _matchesQuery = true;

    private bool _cachedMatchesQuery;
    private string? _cachedSq;
    private string? _cachedApiCollectionId;
    private string? _cachedApiClientId;
    private HttpCall? _cachedHttpCallId;
    private bool _cachedExpanded;

    private bool _shouldRender;

    protected override void OnParametersSet()
    {
        if (_httpCallItems == null && HttpCall != null)
        {
            var size = 4 + HttpCall.AllResponses.Count;
            _httpCallItems = new HttpCallTreeItem[size];
        }
    }

    public void TriggerRender()
    {
        InvokeAsync(StateHasChanged);
    }

    protected override bool ShouldRender()
    {
        if (!IsParentExpanded)
        {
            return false;
        }

        _matchesQuery = HttpCall?.MatchesSearchQuery(SearchQuery) ?? true;
        _shouldRender = Expanded != _cachedExpanded || ApiCollectionId != _cachedApiCollectionId
               || ApiClientId != _cachedApiClientId || HttpCall != _cachedHttpCallId || _cachedMatchesQuery != _matchesQuery
               || (_matchesQuery && _cachedSq != SearchQuery);

        _cachedSq = SearchQuery;
        _cachedExpanded = Expanded;
        _cachedApiCollectionId = ApiCollectionId!;
        _cachedApiClientId = ApiClientId!;
        _cachedHttpCallId = HttpCall;
        _cachedMatchesQuery = _matchesQuery;
        if (!_shouldRender && Expanded && !string.IsNullOrWhiteSpace(SearchQuery) && _httpCallItems != null)
        {
            foreach (var httpCall in _httpCallItems)
            {
                httpCall?.TriggerRender();
            }
        }
        return _shouldRender;
    }

}
