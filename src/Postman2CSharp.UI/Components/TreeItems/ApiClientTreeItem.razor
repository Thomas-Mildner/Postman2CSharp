@inherits MainLayoutComponent

@if (ApiClient != null && UserAttributes != null && ApiCollection != null && _matchesQuery && (!_firstRender || ApiClient.MatchesSearchQuery(SearchQuery)))
{
    <MudTreeViewItem UserAttributes="UserAttributes" Class="file-tree-item" Value="@ApiClient.NameSpace" @bind-Expanded="Expanded" >
        <Content>
            <MudTreeViewItemToggleButton Visible="true" @bind-Expanded="@Expanded"/>
            <MudIcon Icon="@IconHelpers.Folder(Expanded)" Style="margin-right: 15px;" ></MudIcon>
            @if (ShowEdit)
            {
                <div @onclick:stopPropagation="true" @onclick:preventDefault="true" class="mud-treeview-item-content cursor-pointer">
                    <MudTooltip Text="The name you give here will determine the namespace, apiclient name, and interface name.">
                        <div @onfocus:stopPropagation="true" @onfocus:preventDefault="true" @onfocusin:stopPropagation="true" @onfocusin:preventDefault="true"  >
                            <MudTextField Style="margin-top: 0; z-index: 10;" @bind-Value="@_newApiClientName" OnKeyUp="OnEditingApiClientNamespaceKeyUp" AutoFocus Clearable Label="ApiClient name" OnClearButtonClick="() => _newApiClientName = null" HelperText="Press enter to confirm"/>
                        </div>
                    </MudTooltip>
                    <MudIconButton Icon="@Icons.Cancel" Class="ml-0 mr-2" OnClick="CancelEditingApiClientNamespace" Color="@Color.Default"/>
                    <MudIconButton Icon="@Icons.Check" Disabled="string.IsNullOrWhiteSpace(_newApiClientName)" Class="ml-0 mr-2" OnClick="ConfirmApiClientNamespace" Color="@Color.Default"/>
                </div>
            }
            else
            {
                <MudText Class="file-tree-text" >@ApiClient.NameSpace</MudText>
                <div @onclick:stopPropagation="true" @onclick:preventDefault="true">
                    <MudIconButton Icon="@Icons.Edit" Class="ml-0 mr-2" OnClick="() => BeginEditingApiClientNamespace()" Color="@Color.Default"/>
                </div>
            }
            @if (AppState.SiteSettings.ShowDownloadInTreeView && !ShowEdit)
            {
                <MudIconButton Color="@Color.Info" Icon="@Icons.Download" OnClick="() => Interop.Value.DownloadApiClient(ApiClient, () => InvokeAsync(StateHasChanged))"></MudIconButton>
            }
            @if (!ShowEdit)
            {
                <OpenInNewTab NavigateAction="() => TabsService.Value.AddApiClientTab(ApiCollection.Id, ApiClient.Id, ApiClient.Name)"/>
            }
        </Content>
        <ChildContent>
            @foreach (var httpCall in ApiClient.HttpCalls.OrderBy(x => x.Name))
            {
                <HttpCallsTreeItem @ref="_httpCallsTreeItem" SearchQuery="@SearchQuery" ApiCollectionId="@ApiCollection.Id" ApiClientId="@ApiClient.Id" HttpCall="httpCall" IsParentExpanded="@Expanded"></HttpCallsTreeItem>
            }
            <MudTreeViewItem Value="@ApiClient.Name">
                <Content>
                    <MudTreeViewItemToggleButton Visible="false"/>
                    <MudText Style="user-select: none;">@ApiClient.Name</MudText>
                        @if (AppState.SiteSettings.ShowDownloadInTreeView)
                    {
                        <MudIconButton Color="@Color.Info" Icon="@Icons.Download" OnClick="() => Interop.Value.DownloadFile(ApiClient.Name, ApiClient.SourceCode)"></MudIconButton>
                    }
                    <OpenInNewTab NavigateAction="() => TabsService.Value.AddApiClientTab(ApiCollection.Id, ApiClient.Id, ApiClient.Name)" />
                </Content>
            </MudTreeViewItem>
            <MudTreeViewItem Value="@ApiClient.InterfaceName">
                <Content>
                    <MudTreeViewItemToggleButton Visible="false"/>
                    <MudText Style="user-select: none;">@ApiClient.InterfaceName</MudText>
                    @if (AppState.SiteSettings.ShowDownloadInTreeView)
                    {
                        <MudIconButton Color="@Color.Info" Icon="@Icons.Download" OnClick="() => Interop.Value.DownloadFile(ApiClient.InterfaceName, ApiClient.InterfaceSourceCode)"></MudIconButton>
                    }
                    <OpenInNewTab NavigateAction="() => TabsService.Value.AddApiClientInterfaceTab(ApiCollection.Id, ApiClient.Id, ApiClient.InterfaceName)" />
                </Content>
            </MudTreeViewItem>
        </ChildContent>
    </MudTreeViewItem>
}
@code {
    [Inject] private AppState AppState { get; set; } = null!;
    [Parameter, EditorRequired] public string? SearchQuery { get; set; }
    [Parameter, EditorRequired] public ApiCollection? ApiCollection { get; set; }
    [Parameter, EditorRequired] public ApiClient? ApiClient { get; set; }
    private HttpCallsTreeItem? _httpCallsTreeItem;
    private bool _matchesQuery = true;
    private bool _firstRender = true;

    private readonly string _guid = Guid.NewGuid().ToString();


    private bool _expanded;
    private bool Expanded
    {
        get => _expanded || (_matchesQuery && !string.IsNullOrWhiteSpace(SearchQuery));
        set => _expanded = value;
    }
    private bool ShowEdit { get; set; }
    private Dictionary<string, object>? UserAttributes { get; set; }

    protected override void OnInitialized()
    {
        UserAttributes = new Dictionary<string, object>() { { "id", _guid } };
        SetCache();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) _firstRender = false;
    }

    private ApiClient? _cachedApiClient;
    protected override void OnParametersSet()
    {
        if (_cachedApiClient == ApiClient) return;
        _cachedApiClient = ApiClient;
        Reset();
    }

    private void Reset()
    {
        Expanded = false;
        ShowEdit = false;
    }

    private bool _expandedAtStartEdit;
    private string? _newApiClientName = null;
    public async Task BeginEditingApiClientNamespace(bool scroll = false)
    {
        if (_newApiClientName != null || ApiClient == null) return;
        _expandedAtStartEdit = Expanded;
        _newApiClientName = ApiClient.NameSpace;
        ShowEdit = true;

        if (scroll)
        {
            await Interop.Value.ScrollToSection(_guid, 900);
            await Task.Delay(100);
        }
        if (_newApiClientName == Consts.Postman2CSharp)
        {
            Expanded = true;
            _newApiClientName = "";
        }
        StateHasChanged();
    }

    private async Task OnEditingApiClientNamespaceKeyUp(KeyboardEventArgs obj)
    {
        if (obj.Code == "Enter")
        {
            await ConfirmApiClientNamespace();
        }
    }

    private Task ConfirmApiClientNamespace()
    {
        if (ApiClient == null) return Task.CompletedTask;
        if (_newApiClientName == Consts.Postman2CSharp)
        {
            ShowEdit = false;
            _newApiClientName = null;
            return Task.CompletedTask;
        }
        if (string.IsNullOrWhiteSpace(_newApiClientName))
        {
            SnackBar.Value?.Add("Something went wrong. Cached namespace was empty.", Severity.Warning);
            return Task.CompletedTask;
        }

        var oldNamespace = ApiClient.NameSpace;
        ApiClient.NameSpace = Utils.NormalizeToCsharpPropertyName(_newApiClientName);
        ApiClient.GenerateSourceCode();
        ApiClient.FixNamespaces(oldNamespace, _newApiClientName);
        ShowEdit = false;

        _newApiClientName = null;
        return InvokeAsync(StateHasChanged);
    }

    private void CancelEditingApiClientNamespace()
    {
        if (_newApiClientName == Consts.Postman2CSharp && !_expandedAtStartEdit)
        {
            Expanded = false;
        }
        ShowEdit = false;
        _newApiClientName = null;
    }

    private bool _cachedMatchesQuery;
    private string? _cachedApiCollectionId;
    private string? _cachedApiClientId;
    private bool _cachedExpanded;
    private bool _cachedShowEdit;
    private string? _cachedNewApiClientName;

    private bool _shouldRender;
    protected override bool ShouldRender()
    {
        _matchesQuery = ApiClient?.MatchesSearchQuery(SearchQuery) ?? true;
        _shouldRender = Expanded != _cachedExpanded || 
                        ShowEdit != _cachedShowEdit ||
                        _newApiClientName != _cachedNewApiClientName ||
                        ApiCollection?.Id != _cachedApiCollectionId || 
                        ApiClient?.Id != _cachedApiClientId ||
                        _matchesQuery != _cachedMatchesQuery;
        if (_shouldRender)
        {
            SetCache();
        }
        else if (Expanded && !string.IsNullOrWhiteSpace(SearchQuery))
        {
            _httpCallsTreeItem?.TriggerRender();
        }
        return _shouldRender;
    }

    private void SetCache()
    {
        _cachedExpanded = Expanded;
        _cachedShowEdit = ShowEdit;
        _cachedApiCollectionId = ApiCollection!.Id;
        _cachedApiClientId = ApiClient!.Id!;
        _cachedNewApiClientName = _newApiClientName;
        _cachedMatchesQuery = _matchesQuery;
    }
}
