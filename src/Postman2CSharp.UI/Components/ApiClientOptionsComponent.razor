@implements IDisposable

<style>
    .setting-section-header {
        margin-bottom: 10px; 
        font-weight: 100;
    }
</style>
<div class="info-container">
    <div class="f-row-column" style="gap: 10px;">
        <div class="f-column small-w-100" style="width: 90%;">
            <MudText Style="font-weight: 500;" Typo="Typo.h2">ApiClient Generation Configurations</MudText>
            <br/>
            <MudText>
                @if (ShowInteractiveDemoMessage)
                {
                    <text>
                        The best way to learn how these configurations work is to mess around with the <a class="link-normal" href="/Interactive-Demo">Interactive Demo</a>. It is highly
                        recommend to fiddle around in there before generating an ApiClient to be used seriously.
                    </text>
                }
                For an in depth explanation on how these settings work, see
                <a class="link-normal" href="/ApiClient-Configurations-Explained">ApiClient Configurations Explanation</a>.
            </MudText>
        </div>
    </div>
    <br />
    <MudText Class="setting-section-header" Typo="Typo.h5">Important</MudText>
    <MudGrid Spacing="3">
        <AdvancedSettingItem Size="P2CsSize" ToolTip="This will determine the attributes used on classes generated from Json and the extension methods used on http client calls.">
            <EnumSelectComponent TEnum="JsonLibrary" @bind-Value="_dirtyApiClientOptions.JsonLibrary" Label="Json Library"></EnumSelectComponent>
        </AdvancedSettingItem>

        <AdvancedSettingItem Size="P2CsSize" ToolTip="Controls when [JsonProperty] or [JsonPropertyName] are added. It's safest to keep this at always but it is also safe to change if you know what you are doing.">
            <EnumSelectComponent TEnum="JsonPropertyAttributeUsage" @bind-Value="_dirtyApiClientOptions.AttributeUsage" Label="JsonProperty Attribute Usage"></EnumSelectComponent>
        </AdvancedSettingItem>

        <AdvancedSettingItem Size="P2CsSize" ToolTip="Use this setting to choose where descriptions are turned into xml comments.">
            <MultiEnumSelectComponent TEnum="XmlCommentTypes" Value="_dirtyApiClientOptions.XmlCommentTypes" Label="Comment Types" SelectedValuesChanged="SelectedCommentTypesChanged"></MultiEnumSelectComponent>
        </AdvancedSettingItem>
    </MudGrid>
    <MudDivider Class="my-divider" Light="true" FlexItem="true"/>
    <MudText Class="setting-section-header" Typo="Typo.h5">Multiple Response Handling</MudText>
    <MudGrid Spacing="3">
        <AdvancedSettingItem Size="P2CsSize" ToolTip="This will determine whether the generated ApiClient will handle multiple responses, or just the first success response (if present).">
            <MudCheckBox Color="Color.Primary" @bind-Checked="_dirtyApiClientOptions.HandleMultipleResponses">Handle</MudCheckBox>
        </AdvancedSettingItem>

        <AdvancedSettingItem Size="P2CsSize" ToolTip="This will determine what the return type will be if Handle is enabled and a request has multiple response types. Turning this on after generation
has no effect since only the first success response is saved when the api client is generated. Turning it off will work as intended">
            <EnumSelectComponent TEnum="MultipleResponseHandling" @bind-Value="_dirtyApiClientOptions.MultipleResponseHandling" Disabled="_dirtyApiClientOptions.HandleMultipleResponses == false" Label="Return Type"></EnumSelectComponent>
        </AdvancedSettingItem>
        <AdvancedSettingItem Size="P2CsSize" ToolTip="Will control whether to throw an exception or return an error response when handling multiple status codes and an unexpected status code is returned.">
            <EnumSelectComponent TEnum="UnexpectedStatusCodeHandling" @bind-Value="_dirtyApiClientOptions.UnexpectedStatusCodeHandling" Disabled="_dirtyApiClientOptions.HandleMultipleResponses == false || _dirtyApiClientOptions.MultipleResponseHandling != MultipleResponseHandling.OneOf" Label="Unexpected Status Code Handling"></EnumSelectComponent>
        </AdvancedSettingItem>
    </MudGrid>
    <MudDivider Class="my-divider" Light="true" FlexItem="true"/>
    <MudText Class="setting-section-header" Typo="Typo.h5">Error Handling</MudText>
    <MudGrid Spacing="3">
        <AdvancedSettingItem Size="P2CsSize" ToolTip="Determines whether or not to handle errors when making http client calls and how to handle them when they happen.">
            <EnumSelectComponent @bind-Value="_dirtyApiClientOptions.ErrorHandlingStrategy" AlwaysShowAllEnumValues Label="Error Handling Strategy"></EnumSelectComponent>
        </AdvancedSettingItem>

        <AdvancedSettingItem Size="P2CsSize" ToolTip="Choose how to output your exceptions, if at all.">
            <MultiEnumSelectComponent Disabled="_dirtyApiClientOptions.ErrorHandlingStrategy == ErrorHandlingStrategy.None" TEnum="ErrorHandlingSinks" Value="_dirtyApiClientOptions.ErrorHandlingSinks" Label="Error Handling Sinks" SelectedValuesChanged="SelectedErrorHandlingSinksChanged"></MultiEnumSelectComponent>
        </AdvancedSettingItem>

        <AdvancedSettingItem Size="P2CsSize" ToolTip="If ErrorHandlingStrategy does not equal none, these are the exceptions that will be caught and handled by the sinks.">
            <MultiEnumSelectComponent Disabled="_dirtyApiClientOptions.ErrorHandlingStrategy == ErrorHandlingStrategy.None" TEnum="CatchExceptionTypes" Label="Catch Exception Types" ForbidNoValue Value="_dirtyApiClientOptions.CatchExceptionTypes" SelectedValuesChanged="SelectedCatchExceptionTypesChanged"></MultiEnumSelectComponent>
        </AdvancedSettingItem>

        <AdvancedSettingItem Size="P2CsSize" ToolTip="When using LogException as an Error Handling Sink, this is the log level that the exception(s) will be logged at.">
            <EnumSelectComponent Disabled="_dirtyApiClientOptions.ErrorHandlingStrategy == ErrorHandlingStrategy.None || !_dirtyApiClientOptions.ErrorHandlingSinks.Contains(ErrorHandlingSinks.LogException)" @bind-Value="_dirtyApiClientOptions.LogLevel" AlwaysShowAllEnumValues Label="Log Level"></EnumSelectComponent>
        </AdvancedSettingItem>
    </MudGrid>
    <MudDivider Class="my-divider" Light="true" FlexItem="true"/>
    <MudText Class="setting-section-header" Typo="Typo.h5">Function Configurations</MudText>
    <MudGrid Spacing="3">
        <AdvancedSettingItem Size="P2CsSize" ToolTip="@(@"All actual ""path variables"" (/:pathVariable/) are automatically treated as function parameters, but collection variables in paths (/{{variable}}/) will by default be instance variables of the ApiClient. This setting will change it to treat collection variables in the path as path variables (function parameter instead of instance variable).")">
            <MudCheckBox Color="Color.Primary" @bind-Checked="_dirtyApiClientOptions.MakePathCollectionVariablesFunctionParameters">Make Path Collection Variables Function Parameters</MudCheckBox>
        </AdvancedSettingItem>

        <AdvancedSettingItem Size="P2CsSize" ToolTip="@(@"If true each request function on the generated ApiClient will be have a Cancellation token parameter with a default value of default.")">
            <MudCheckBox Color="Color.Primary" @bind-Checked="_dirtyApiClientOptions.UseCancellationTokens">Use Cancellation Tokens</MudCheckBox>
        </AdvancedSettingItem>
    </MudGrid>
    <MudDivider Class="my-divider" Light="true" FlexItem="true"/>
    <MudText Class="setting-section-header" Typo="Typo.h5">Class Generation</MudText>
    <p style="margin-bottom: 20px;">
    </p>
    <MudGrid Spacing="3">
        <AdvancedSettingItem Size="P2CsSize" ToolTip="This will determine whether root classes are considered for deduping. A root class being one that is not is not used in any other classes. Generally these are used directly in the generated ApiClient class.">
            <MudCheckBox Color="Color.Primary" @bind-Checked="_dirtyApiClientOptions.DuplicateOptions.RemoveDuplicateRoots">Remove Duplicate Roots</MudCheckBox>
        </AdvancedSettingItem>

        <AdvancedSettingItem Size="P2CsSize" ToolTip="This will determine whether or not you want any leniency in the deduping process. If you set this to false, the type matching will be strict and only dedupe when all properties match exactly by name and type.">
            <MudCheckBox Color="Color.Primary" @bind-Checked="_dirtyApiClientOptions.DuplicateOptions.RemoveSemiDuplicates">Remove Semi-Duplicate Classes</MudCheckBox>
        </AdvancedSettingItem>

        <AdvancedSettingItem Size="P2CsSize" ToolTip="All types are considered for duplicates. All property types and names on the potential duplicate must match the original type to
                         be considered for deduplication. This lets you configure how large the the difference in the amount of properties between the potential duplicate and original can be before considering the
potential duplicate as a duplicate. WHEN the json names DO match. The lower this number is, the more often you will have numbered classes. Amount, Amount2, Amount3">
            <MudNumericField @bind-Value="_dirtyApiClientOptions.DuplicateOptions.SameOriginalNameSensitivity" Disabled="_dirtyApiClientOptions.DuplicateOptions.RemoveSemiDuplicates == false" Label="Same Original Name Sensitivity" Variant="Variant.Outlined" Step="1" Min="0" Max="50"/>
        </AdvancedSettingItem>
        <AdvancedSettingItem Size="P2CsSize" ToolTip="All types are considered for duplicates. All property types and names on the potential duplicate must match the original type to
                         be considered for deduplication. This lets you configure how large the the difference in the amount of properties between the potential duplicate and original can be before considering the
potential duplicate as a duplicate. WHEN the json names DONT match. The higher this number is, the fewer classes that will be generated. Raising this number will also increase the likely
hood of an error in generated code (minor issues usually) and increase the likelyhood of confusing class names.">
            <MudNumericField @bind-Value="_dirtyApiClientOptions.DuplicateOptions.DifferentOriginalNameSensitivity" Disabled="_dirtyApiClientOptions.DuplicateOptions.RemoveSemiDuplicates == false" Label="Different Original Name Sensitivity" Variant="Variant.Outlined" Step="1" Min="0" Max="6"/>
        </AdvancedSettingItem>
    </MudGrid>
    <MudDivider Class="my-divider" Light="true" FlexItem="true"/>
    <MudText Class="setting-section-header" Typo="Typo.h5">Miscellaneous</MudText>
    <MudGrid Spacing="3">
        <AdvancedSettingItem Size="P2CsSize" ToolTip="Any types choosen in here will cause disabled parameters of that type to be removed in pre-processing..">
            <MultiEnumSelectComponent TEnum="RemoveDisabled" Value="_dirtyApiClientOptions.RemoveDisabled" Label="Remove Disabled" SelectedValuesChanged="SelectedRemovedDisabledChanged"></MultiEnumSelectComponent>
        </AdvancedSettingItem>

        <AdvancedSettingItem Size="P2CsSize" ToolTip="WARNING: Authorizations will be lost is this setting is enabled. This will reorganize requests by authority. See options explained page for full explanation.">
            <EnumSelectComponent @bind-Value="_dirtyApiClientOptions.RootDefinition" Exclude="AutoSave ? new List<RootDefinition>() {RootDefinition.Manual} : null" AlwaysShowAllEnumValues Label="Root Definition"></EnumSelectComponent>
        </AdvancedSettingItem>

        <AdvancedSettingItem Size="P2CsSize" ToolTip="Emabling this will cause each HttpClient request made in your ApiClient to be called within a retry function.">
            <MudCheckBox Color="Color.Primary" @bind-Checked="_dirtyApiClientOptions.ExecuteWithRetry">Execute With Retry</MudCheckBox>
        </AdvancedSettingItem>
        
        @if (ShowInteractiveDemoMessage == false)
        {
            <AdvancedSettingItem Size="P2CsSize" ToolTip="Inlining the query of a GraphQL request in a function can take up a lot of space. Enabling this option will put the queries in a separate static class.">
                <MudCheckBox Color="Color.Primary" @bind-Checked="_dirtyApiClientOptions.GraphQLQueriesInSeperateFile">GraphQL Queries In Separate File</MudCheckBox>
            </AdvancedSettingItem>
        }
    </MudGrid>

    @if (!AutoSave)
    {
        var toolTipColor = Color.Warning;
        var toolTipVisible = false;
        string toolTipMessage = "";
        if (!ApiClientOptions.ConfigsEqual(_dirtyApiClientOptions, AppState.ApiClientOptions))
        {
            toolTipColor = Color.Warning;
            toolTipVisible = true;
            toolTipMessage = "There are unsaved changes. Click save to ensure your changes take effect.";
        }
        <div class="f-row" style="margin-top: 25px; gap: 20px;">
            <MudButton Color="Color.Primary" OnClick="SaveOptions" Disabled="ApiClientOptions.ConfigsEqual(_dirtyApiClientOptions, AppState.ApiClientOptions)" Variant="Variant.Outlined" EndIcon="@Icons.Save">Save</MudButton>
            <MudTooltip Text="Resets settings to default values">
                <MudButton Disabled="ApiClientOptions.ConfigsEqual(AppState.ApiClientOptions, new ApiClientOptions())" Style="text-wrap: nowrap;" Color="Color.Error" Variant="Variant.Filled" OnClick="() => { _dirtyApiClientOptions = new ApiClientOptions(); }">Reset to default</MudButton>
            </MudTooltip>
            @if (toolTipVisible)
            {
                <MudTooltip Text="@toolTipMessage">
                    <MudIcon Icon="@Icons.Warning" Color="@toolTipColor" Title="Warning" Size="Size.Large"></MudIcon>
                </MudTooltip>
            }
        </div>
    }
    @if (ShowUpload)
    {
        <br />
        <CollectionUpload SuccessfulGeneration="SuccessfulGeneration"></CollectionUpload>
    }

</div>

@code {
    [Inject] private ISnackbar? Snackbar { get; set; }
    [Inject] private AppState AppState { get; set; } = null!;

    [Parameter] public EventCallback<ApiCollection> SuccessfulGeneration { get; set; }
    [Parameter] public EventCallback<ApiClientOptions> ApiClientOptionsChanged { get; set; }
    [Parameter] public ApiClientOptions? InitialApiClientOptions { get; set; }
    [Parameter] public P2CsSize P2CsSize { get; set; } = P2CsSize.Large;
    [Parameter] public bool ShowInteractiveDemoMessage { get; set; }
    [Parameter] public bool ShowUpload { get; set; }
    [Parameter] public bool AutoSave { get; set; }
    [Parameter] public bool UseSavedOptions { get; set; } = true;
    private ApiClientOptions _oldOptions = null!;
    private ApiClientOptions _dirtyApiClientOptions = new();

    protected override void OnInitialized()
    {
        _oldOptions = AppState.ApiClientOptions.Clone();
        if (!ApiClientOptions.ConfigsEqual(_dirtyApiClientOptions, AppState.ApiClientOptions) && UseSavedOptions)
        {
            _dirtyApiClientOptions = AppState.ApiClientOptions.Clone();
        }
        if (!UseSavedOptions && InitialApiClientOptions != null)
        {
            _dirtyApiClientOptions = InitialApiClientOptions.Clone();
        }
        AppState.OptionsChanged += OnApiClientOptionsChanged;
    }

    private void OnApiClientOptionsChanged()
    {
        if (!UseSavedOptions) return;
        _dirtyApiClientOptions = AppState.ApiClientOptions.Clone();
        InvokeAsync(StateHasChanged);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (AutoSave && !ApiClientOptions.ConfigsEqual(_dirtyApiClientOptions, AppState.ApiClientOptions))
        {
            SetApiClientOptions(_dirtyApiClientOptions);
        }
    }

    private void SetApiClientOptions(ApiClientOptions options)
    {
        _dirtyApiClientOptions = options.Clone();
        AppState.UpdateApiClientOptions(options);
        ApiClientOptionsChanged.InvokeAsync(options);
    }

    private void SelectedErrorHandlingSinksChanged(IEnumerable<string> errorHandlingSinks)
    {
        _dirtyApiClientOptions.ErrorHandlingSinks = errorHandlingSinks.Select(Enum.Parse<ErrorHandlingSinks>).ToList();
    }
    private void SelectedCatchExceptionTypesChanged(IEnumerable<string> catchTypes)
    {
        _dirtyApiClientOptions.CatchExceptionTypes = catchTypes.Select(Enum.Parse<CatchExceptionTypes>).ToList();
    }
    private void SelectedCommentTypesChanged(IEnumerable<string> commentTypes)
    {
        _dirtyApiClientOptions.XmlCommentTypes = commentTypes.Select(Enum.Parse<XmlCommentTypes>).ToList();
    }
    private void SelectedRemovedDisabledChanged(IEnumerable<string> commentTypes)
    {
        _dirtyApiClientOptions.RemoveDisabled = commentTypes.Select(Enum.Parse<RemoveDisabled>).ToList();
    }

    private void SaveOptions()
    {
        SetApiClientOptions(_dirtyApiClientOptions);
        Snackbar?.Add($"Saved {nameof(ApiClientOptions)}", Severity.Success);
    }

    private ApiClientOptions? _cachedApiClientsOptions;
    private ApiClientOptions? _cachedDirtyApiClientsOptions;
    private P2CsSize _cachedP2CsSize;
    protected override bool ShouldRender()
    {
        if (_cachedApiClientsOptions != null && ApiClientOptions.ConfigsEqual(_cachedApiClientsOptions, _cachedDirtyApiClientsOptions)
            && ApiClientOptions.ConfigsEqual(AppState.ApiClientOptions, _dirtyApiClientOptions) && _cachedP2CsSize == P2CsSize)
        {
            return false;
        }
        _cachedApiClientsOptions = AppState.ApiClientOptions.Clone();
        _cachedDirtyApiClientsOptions = _dirtyApiClientOptions.Clone();
        _cachedP2CsSize = P2CsSize;
        return true;
    }

    public void Dispose()
    {
        AppState.OptionsChanged -= OnApiClientOptionsChanged;
        if (!UseSavedOptions)
        {
            AppState.UpdateApiClientOptions(_oldOptions);
        }
    }
}
