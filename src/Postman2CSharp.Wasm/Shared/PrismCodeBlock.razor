<div class="container-@Id">
    <pre @key="Value" id="@Id" class="@PreClass()" style="@Style" data-src="@DataUrl()" data-src-name="@FileNameWithExtension()" data-download-link-label="Download"><code @key="@(Value + "code")" id="@(Id + "code")" class="@CodeClass()">@Value</code></pre>
</div>

@code {
    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public string FileName { get; set; } = "download";

    [Parameter]
    public bool UseLineNumbers { get; set; } = true;

    [Parameter, EditorRequired]
    public PrismLanguage Language { get; set; }

    private string _value = null;
    [Parameter, EditorRequired]
    public string? Value
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            Id = Guid.NewGuid().ToString();
            StateHasChanged();
            
        }
    }
    [Inject] private Interop Interop { get; set; } = default!;

    private string Id = Guid.NewGuid().ToString();
    private string test;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && test != Value)
        {
            Id = Guid.NewGuid().ToString();
            await Interop.EmptyElement($"container-{Id}");
            StateHasChanged();
        }
        test = Value;
    }

    private string DataUrl()
    {
        if (string.IsNullOrEmpty(Value))
        {
            throw new ArgumentException("Value cannot be null or empty");
        }

        var mimeType = Language switch
        {
            PrismLanguage.CSharp => "text/plain",
            PrismLanguage.Json => "application/json",
            _ => throw new ArgumentOutOfRangeException()
            };

        var bytes = Encoding.UTF8.GetBytes(Value);
        var base64String = System.Convert.ToBase64String(bytes);

        return $"data:{mimeType};base64,{base64String}";
    }

    private string FileNameWithExtension()
    {
        var extension = Language switch
        {
            PrismLanguage.CSharp => ".cs",
            PrismLanguage.Json => ".json",
            _ => throw new ArgumentOutOfRangeException()
            };
        return FileName + extension;
    }

    private string PreClass()
    {
        return UseLineNumbers ? "line-numbers" : "no-line-numbers";
    }

    private string CodeClass()
    {
        return Language switch{
            PrismLanguage.CSharp => "language-csharp",
            PrismLanguage.Json => "language-json",
            _ => throw new ArgumentOutOfRangeException()
        };
    }
}
