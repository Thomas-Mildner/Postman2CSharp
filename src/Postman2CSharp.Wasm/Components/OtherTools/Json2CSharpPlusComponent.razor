@using Xamasoft.JsonClassGenerator
@using System.Reflection
@using Postman2CSharp.Wasm.Infrastructure.Prism
<style>
    .display-contents .mud-tabs-panels,
    .display-contents .code-toolbar {
        display: contents;
    }
</style>

<Json2CSharpPlusOptions @bind-OneTypePerJsonMemberName="_oneTypePerJsonMemberName" DuplicateOptionsChanged="duplicateOptions => _duplicateOptions = duplicateOptions"
                        OptionsChanged="options => _options = options" FirstProcessComplete="_firstProcess" ResetClicked="Reset" ></Json2CSharpPlusOptions>

<br />
<MudDivider DividerType="DividerType.Middle"></MudDivider>
<br />
<br />

<div class="f-row-column" style="gap: 15px;">
    <div style="width: 50%;" class="small-w-100" >
        <MudText Typo="Typo.h2">Json Editor</MudText>
        <br />
        <JsonEditor @ref="_jsonEditor" @bind-IsJsonValid="_isJsonValid" ></JsonEditor>
    </div>
    <div style="width: 50%;" class="small-w-100" >
        @if (_result.Count > 0)
        {
            <MudText Typo="Typo.h2">Generated Classes</MudText>
            <br />
            <MudBreakpointProvider>
                <MudHidden Breakpoint="Breakpoint.MdAndUp">
                    <MudTabs @bind-ActivePanelIndex="_activePanelIndex" Class="display-contents" Border Elevation="3" Position="Position.Bottom">
                        @foreach (var (key, value) in _result)
                        {
                            <MudTabPanel Text="@key" Icon="@Icons.Code">
                                <PrismCodeBlock Style="margin-top: 0; height: 60vh;" Value="@value" Language="PrismLanguage.CSharp" />
                            </MudTabPanel>
                        }
                    </MudTabs>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.SmAndDown">
                    <MudTabs @bind-ActivePanelIndex="_activePanelIndex" Class="display-contents" Border Elevation="3" Position="Position.Right">
                        @foreach (var (key, value) in _result)
                        {
                            <MudTabPanel Text="@key" Icon="@Icons.Code">
                                <PrismCodeBlock Style="margin-top: 0; height: 60vh;" Value="@value" Language="PrismLanguage.CSharp" />
                            </MudTabPanel>
                        }
                    </MudTabs>
                </MudHidden>
            </MudBreakpointProvider>
        }
    </div>
</div>
<br />
<div class="f-row-column">
    <MudButton Variant="Variant.Filled"
               Color="Color.Tertiary"
               EndIcon="@Icons.Build"
               OnClick="Process" Disabled="!_isJsonValid" >
        Process
    </MudButton>
    <div style="flex-grow: 1;"></div>
    <MudText Class="hide-not-desktop mr-6" Typo="Typo.caption"><b>Tip: Shift + Scroll Mouse Wheel = Horizontal Scroll</b></MudText>
</div>


@code {
    private string _exampleJson = "{\n    \"put\" : \"your\",\n    \"json\" : \"here\",\n    \"to\" : \"be converted\"\n}";
    private string _pasteMoreText = "Paste more json without resetting\nto take advantage of class deduping";

    [Inject] private AnalyticsInterop Analytics { get; set; } = default!;
    private Dictionary<string, string> _result = new ();

    private bool _firstProcess = false;
    private bool _oneTypePerJsonMemberName = true;
    private CSharpCodeWriterConfig _options = new();
    private DuplicateOptions _duplicateOptions = new();
    private JsonEditor? _jsonEditor;
    private bool _isJsonValid = false;

    private int _activePanelIndex;
    private Json2CSharpPlus? _json2CSharpPlusSimple;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _jsonEditor != null)
        {
            while (!_jsonEditor.Initialized)
            {
                await Task.Delay(1);
            }
            await _jsonEditor.SetValue(_exampleJson);
        }
    }

    private async Task Process()
    {
        if (_jsonEditor == null) return;

        _firstProcess = true;
        var json = await _jsonEditor.GetValue();
        _json2CSharpPlusSimple ??= new Json2CSharpPlus(_options, _duplicateOptions);

        _result = _json2CSharpPlusSimple.GenerateMoreClasses(json, _oneTypePerJsonMemberName);
        await _jsonEditor.SetValue(_pasteMoreText);
        await Analytics.TrackAction("Json2CSharp Process");

        StateHasChanged();
        await Task.Delay(1);
        _activePanelIndex = _result.Count - 1;
    }

    private async Task Reset()
    {
        _firstProcess = false;
        _result.Clear();
        if (_jsonEditor != null)
        {
            await _jsonEditor.SetValue(_exampleJson);
        }
        _json2CSharpPlusSimple = null;
    }
}
