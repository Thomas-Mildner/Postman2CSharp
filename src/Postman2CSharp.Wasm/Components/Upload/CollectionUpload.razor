<div class="f-row" style="gap: 15px; align-items: end; flex-wrap: wrap;">
    <MudTooltip Text="Looads in a Google Maps collection to let you see how the website works with dumby data.">
        <MudButton Color="Color.Secondary" OnClick="GetTestData" Variant="Variant.Filled">Test Data</MudButton>
    </MudTooltip>

    <MudTooltip Text="Select a collection off of your file system. Your collection never leaves your device.">
        <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".json" FilesChanged="UploadFiles">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.FileCopy"
                           for="@context">
                    Select Postman Collection
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
    </MudTooltip>

    <MudTooltip Text="Begin creating your ApiClients." Delay="300">
        <MudButton Variant="Variant.Filled"
                   Color="Color.Tertiary"
                   EndIcon="@Icons.Build"
                   OnClick="Process" Disabled="_uploadedFile == null">
            Process
        </MudButton>
    </MudTooltip>
</div>
<br />
@_uploadedFile?.Name

@code
{
    [Inject] private LazyLoader LazyLoader { get; set; } = null!;
    [Inject] private Lazy<ISnackbar?> SnackBar { get; set; } = null!;
    [Parameter] public EventCallback<ApiCollection> SuccessfulUpload { get; set; }

    private IBrowserFile? _uploadedFile;

    private void UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        switch (files.Count)
        {
            case > 1:
                SnackBar.Value?.Add("Try again and only select 1 file.");
                return;
            case 0:
                return;
            default:
                _uploadedFile = files.FirstOrDefault();
                break;
        }
    }

    private async Task GetTestData()
    {
        await LazyLoader.LoadHttpSecurityAssemblies();
        var httpClient = new HttpClient();
        var response = await httpClient.GetAsync("https://files.postman2csharp.com/GoogleMapsPlatform.json");
        _uploadedFile = new TestBrowserFile(await response.Content.ReadAsStreamAsync());
    }

    public class TestBrowserFile : IBrowserFile
    {
        private Stream Stream { get; set; }
        public TestBrowserFile(Stream stream)
        {
            Stream = stream;
        }
        public Stream OpenReadStream(long maxAllowedSize = 512000, CancellationToken cancellationToken = new CancellationToken())
        {
            return Stream;
        }

        public string Name => "GoogleMapsPlatform.json";
        public DateTimeOffset LastModified => throw new NotImplementedException();
        public long Size => throw new NotImplementedException();
        public string ContentType => throw new NotImplementedException();
    }

    private async Task Process()
    {
        var fileStream = _uploadedFile!.OpenReadStream(300 * 1024 * 1024);
        try
        {
            var collection = await JsonSerializer.DeserializeAsync<PostmanCollection>(fileStream, SerializerSettings.Web);
            if (collection == null)
            {
                SnackBar.Value?.Add("Json could not be deserialized", Severity.Warning);
                return;
            }

            var apiClientGenerator = new ApiClientGenerator(collection, new ApiClientGeneratorOptions(CSharpCodeWriterOptionsComponent.Options, ApiClientOptionsComponent.LastSavedApiClientOptions));
            StartTrackingGenerator(apiClientGenerator);
            await Task.Delay(1);
            var apiClients = await apiClientGenerator.GenerateApiClients();
            var apiCollection = new ApiCollection()
            {
                ApiClients = apiClients,
                CollectionInfo = collection.Info
            };

            await SuccessfulUpload.InvokeAsync(apiCollection);
        }
        catch (JsonException exception)
        {
            if (ProgressSnackbar != null)
            {
                SnackBar.Value?.Remove(ProgressSnackbar);
            }
            SnackBar.Value?.Add($"Json could not be deserialized. {exception.Message}", Severity.Error);
        }
        catch (Exception exception)
		{
		    if (ProgressSnackbar != null)
		    {
		        SnackBar.Value?.Remove(ProgressSnackbar);
		    }
			SnackBar.Value?.Add($"Something went wrong. {exception.Message}", Severity.Error);
		}
        finally
        {
            _uploadedFile = null;
        }
    }
    private Snackbar? ProgressSnackbar { get; set; }
    private void StartTrackingGenerator(ApiClientGenerator apiClientGenerator)
    {
        var options = new ProgressPopupOptions("Deserializing collection...", "Finished Generating ApiClients!");
        apiClientGenerator.ProgressCallback += options.InvokeProgressCallback;
        apiClientGenerator.OnStageChanged += options.InvokeStageChangedCallback;

        ProgressSnackbar = SnackBar.Value?.Add<ProgressPopup>(new Dictionary<string, object>()
        {
            {"Options", options }
        }, Severity.Normal, configure =>
        {
            configure.ActionVariant = Variant.Text;
            configure.CloseAfterNavigation = false;
            configure.HideIcon = true;
            configure.ShowCloseIcon = false;
            configure.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
            configure.VisibleStateDuration = 200000;
        });
        if (ProgressSnackbar == null) return;
        options.Snackbar = ProgressSnackbar;
    }
}
