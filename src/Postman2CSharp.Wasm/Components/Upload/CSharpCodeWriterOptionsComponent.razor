@using Convert = Postman2CSharp.Wasm.Pages.Convert
@implements IDisposable
<div class="f-row-column" style="gap: 10px;">
    <div style="width: 90%;">
        <MudText Style="font-weight: 500;" Typo="Typo.h2">Json Class Generation Options</MudText>
        <br />
        <p>Applies to classes generated for requests and responses that have a Json body. Use default settings for best results.</p>
    </div>
    <div class="f-column end-start" style="gap: 25px;">
        <MudTooltip Text="Resets settings to default values">
            <MudButton Style="white-space: nowrap;" Color="Color.Error" Disabled="LastSavedInputModel.Equals(InputModelWithDefaults())" Variant="Variant.Filled" OnClick="SetInputModelToDefault">Reset To Default</MudButton>
        </MudTooltip>
    </div>
</div>
<br />
<MudGrid>
    <MudItem xs="12" sm="6" md="4" lg="3">
        <EnumSelectComponent @bind-Value="InputModel.CollectionType" Label="Collection Type"></EnumSelectComponent>
    </MudItem>
    <MudItem xs="12" sm="6" md="4" lg="3">
        <EnumSelectComponent @bind-Value="InputModel.OutputType" Label="Output Type"></EnumSelectComponent>
    </MudItem>
    <MudItem xs="12" sm="6" md="4" lg="3">
        <EnumSelectComponent @bind-Value="InputModel.OutputMembers" Label="Output Members"></EnumSelectComponent>
    </MudItem>
    <MudItem xs="12" sm="6" md="4" lg="3">
        <MudCheckBox Color="Color.Primary" @bind-Checked="InputModel.NullValueHandlingIgnore" Disabled="Convert.LastSavedApiClientOptions.JsonLibrary == JsonLibrary.SystemTextJson" Label="Null Value Handling Ignore"></MudCheckBox>
    </MudItem>
    <MudItem xs="12" sm="6" md="4" lg="3">
        <MudCheckBox Color="Color.Primary" @bind-Checked="InputModel.ReadOnlyCollectionProperties" Label="Read Only Collection Properties"></MudCheckBox>
    </MudItem>
    <MudItem xs="12" sm="6" md="4" lg="3">
        <MudCheckBox Color="Color.Primary" @bind-Checked="InputModel.AlwaysUseNullables" Label="Always Use Nullables"></MudCheckBox>
    </MudItem>
    <MudItem xs="12" sm="6" md="4" lg="3">
        <MudCheckBox Color="Color.Primary" @bind-Checked="InputModel.UsePascalCase" Label="Use Pascal Case"></MudCheckBox>
    </MudItem>
    <MudItem xs="12" sm="6" md="4" lg="3">
        @{
            var toolTipColor = Color.Warning;
            var toolTipVisible = false;
            string toolTipMessage = "";
            if (!InputModel.Equals(LastSavedInputModel))
            {
                toolTipColor = Color.Warning;
                toolTipVisible = true;
                toolTipMessage = "There are unsaved changes. Click save to ensure your changes take effect.";
            }
        }
        <div class="f-row aic" style="gap: 15px; width: 100%; justify-content: space-around;">
            <MudButton Color="Color.Primary" OnClick="SaveOptions" Disabled="InputModel.Equals(LastSavedInputModel)" Variant="Variant.Outlined" EndIcon="@Icons.Save">Save</MudButton>
            @if (toolTipVisible)
            {
                <MudTooltip Style="position: absolute; top: 10px; right: 10px;" Text="@toolTipMessage">
                    <MudIcon Icon="@Icons.Warning" Color="@toolTipColor" Title="Warning" Size="Size.Large"></MudIcon>
                </MudTooltip>
            }
            else
            {
                <div style="width: 20px;">
                </div>
            }
        </div>
    </MudItem>
</MudGrid>


@code {
    public static CSharpCodeWriterConfig Options { get; set; } = InputModelWithDefaults().ToCSharpCodeWriterConfig();
    public static CSharpCodeWriterConfigInputModel LastSavedInputModel = InputModelWithDefaults();

    [Inject] private Lazy<ISnackbar?> SnackBar { get; set; } = default!;
    private CSharpCodeWriterConfigInputModel InputModel { get; set; } = InputModelWithDefaults();

    protected override void OnInitialized()
    {
        if (!LastSavedInputModel.Equals(InputModelWithDefaults()))
        {
            InputModel = LastSavedInputModel.Clone();
        }
        InputModel.PropertyChanged += OnInputModelPropertyChanged;
        MainLayout.OnSettingsChanged += OnSettingsChanged;
    }

    private void SetInputModelToLastSaved()
    {
        InputModel.PropertyChanged -= OnInputModelPropertyChanged;
        InputModel = LastSavedInputModel.Clone();
        InputModel.PropertyChanged += OnInputModelPropertyChanged;
    }
    private void SetInputModelToDefault()
    {
        InputModel.PropertyChanged -= OnInputModelPropertyChanged;
        InputModel = InputModelWithDefaults();
        InputModel.PropertyChanged += OnInputModelPropertyChanged;
    }

    private void OnSettingsChanged()
    {
        SetInputModelToLastSaved();
        StateHasChanged();
    }

    private void OnInputModelPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }

    private static CSharpCodeWriterConfigInputModel InputModelWithDefaults() => new ()
    {
        AttributeUsage = JsonPropertyAttributeUsage.OnlyWhenNecessary,
        CollectionType = OutputCollectionType.MutableList,
        AttributeLibrary = JsonLibrary.SystemTextJson,
        OutputMembers = OutputMembers.AsProperties,
        OutputType = OutputTypes.MutableClass,
        ReadOnlyCollectionProperties = false,
        NullValueHandlingIgnore = false,
        AlwaysUseNullables = false,
        UseNestedClasses = false,
        UsePascalCase = true
    };

    private void SaveOptions()
    {
        Options = InputModel.ToCSharpCodeWriterConfig();
        LastSavedInputModel = InputModel.Clone();
        SnackBar.Value?.Add($"Class generation options saved", Severity.Success);
    }

    public void Dispose()
    {
        InputModel.PropertyChanged -= OnInputModelPropertyChanged;
        MainLayout.OnSettingsChanged -= OnSettingsChanged;
    }

}
