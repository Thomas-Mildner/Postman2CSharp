@implements IDisposable
<style>
    .setting-section-header {
        margin-bottom: 10px; 
        font-weight: 100;
    }
</style>
<div class="f-row-column" style="gap: 10px;">
    <div class="f-column small-w-100" style="width: 90%;">
        <MudText Style="font-weight: 500;" Typo="Typo.h2">ApiClient Generation Configurations</MudText>
        <br/>
        <MudAlert Variant="Variant.Outlined" Elevation="2" Severity="Severity.Info" Style="width: fit-content;">
            For an in depth explanation on how these settings work, see <a class="link-normal" href="/ApiClient-Configurations-Explained">ApiClient Configurations Explanation</a>.
        </MudAlert>
    </div>
</div>
<br />
<MudText Class="setting-section-header" Typo="Typo.h5">Important</MudText>
<MudGrid Spacing="3">
    <AdvancedSettingItem ToolTip="This will determine the attributes used on classes generated from Json and the extension methods used on http client calls.">
        <EnumSelectComponent TEnum="JsonLibrary" @bind-Value="ApiClientOptions.JsonLibrary" Label="Json Library"></EnumSelectComponent>
    </AdvancedSettingItem>
    
    <AdvancedSettingItem ToolTip="Use this setting to choose where descriptions are turned into xml comments.">
        <MultiEnumSelectComponent TEnum="XmlCommentTypes" Value="ApiClientOptions.XmlCommentTypes" Label="Comment Types" SelectedValuesChanged="SelectedCommentTypesChanged"></MultiEnumSelectComponent>
    </AdvancedSettingItem>
</MudGrid>
<MudDivider Class="my-divider" Light="true" FlexItem="true" />
<MudText Class="setting-section-header" Typo="Typo.h5">Multiple Response Handling</MudText>
<MudGrid Spacing="3">
    <AdvancedSettingItem ToolTip="This will determine whether the generated ApiClient will handle multiple responses, or just the first success response (if present).">
        <MudSwitch Color="Color.Primary" @bind-Checked="ApiClientOptions.HandleMultipleResponses">Handle Multiple Responses</MudSwitch>
    </AdvancedSettingItem>

    <AdvancedSettingItem ToolTip="This will determine what the return type will be if Handle Multiple Responses is enabled and a request has multiple response types.">
        <EnumSelectComponent TEnum="MultipleResponseHandling" @bind-Value="ApiClientOptions.MultipleResponseHandling" Label="Multiple Response Handling"></EnumSelectComponent>
    </AdvancedSettingItem>
</MudGrid>
<MudDivider Class="my-divider" Light="true" FlexItem="true" />
<MudText Class="setting-section-header" Typo="Typo.h5">Error Handling</MudText>
<MudGrid Spacing="3">
    <AdvancedSettingItem ToolTip="Determines whether or not to handle errors when making http client calls and how to handle them when they happen.">
        <EnumSelectComponent @bind-Value="ApiClientOptions.ErrorHandlingStrategy" AlwaysShowAllEnumValues Label="Error Handling Strategy"></EnumSelectComponent>
    </AdvancedSettingItem>

    <AdvancedSettingItem ToolTip="Choose how to output your exceptions, if at all.">
        <MultiEnumSelectComponent TEnum="ErrorHandlingSinks" Value="ApiClientOptions.ErrorHandlingSinks" Label="Error Handling Sinks" SelectedValuesChanged="SelectedErrorHandlingSinksChanged"></MultiEnumSelectComponent>
    </AdvancedSettingItem>

    <AdvancedSettingItem ToolTip="If ErrorHandlingStrategy does not equal none, these are the exceptions that will be caught and handled by the sinks.">
        <MultiEnumSelectComponent TEnum="CatchExceptionTypes" Label="Catch Exception Types" ForbidNoValue Value="ApiClientOptions.CatchExceptionTypes" SelectedValuesChanged="SelectedCatchExceptionTypesChanged"></MultiEnumSelectComponent>
    </AdvancedSettingItem>
    
    <AdvancedSettingItem ToolTip="When using LogException as an Error Handling Sink, this is the log level that the exception(s) will be logged at.">
        <EnumSelectComponent @bind-Value="ApiClientOptions.LogLevel" AlwaysShowAllEnumValues Label="Log Level"></EnumSelectComponent>
    </AdvancedSettingItem>
</MudGrid>
<MudDivider Class="my-divider" Light="true" FlexItem="true" />
<MudText Class="setting-section-header" Typo="Typo.h5">Function Configurations</MudText>
<MudGrid Spacing="3">
    <AdvancedSettingItem ToolTip="Each request in the generated ApiClient will call EnsureSuccessStatusCode() on the HttpResponseMessage before deserializing or returning the response stream.">
        <MudSwitch Color="Color.Primary" @bind-Checked="ApiClientOptions.EnsureResponseIsSuccessStatusCode">Ensure Success Status Code</MudSwitch>
    </AdvancedSettingItem>

    <AdvancedSettingItem ToolTip="@(@"All actual ""path variables"" (/:pathVariable/) are automatically treated as function parameters, but collection variables in paths (/{{variable}}/) will by default be instance variables of the ApiClient. This setting will change it to treat collection variables in the path as path variables (function parameter instead of instance variable).")">
        <MudSwitch Color="Color.Primary" @bind-Checked="ApiClientOptions.MakePathCollectionVariablesFunctionParameters">Make Path Collection Variables Function Parameters</MudSwitch>
    </AdvancedSettingItem>

    <AdvancedSettingItem ToolTip="@(@"If true each request function on the generated ApiClient will be have a Cancellation token parameter with a default value of default.")">
        <MudSwitch Color="Color.Primary" @bind-Checked="ApiClientOptions.UseCancellationTokens">Use Cancellation Tokens</MudSwitch>
    </AdvancedSettingItem>
</MudGrid>
<MudDivider Class="my-divider" Light="true" FlexItem="true" />
<MudText Class="setting-section-header" Typo="Typo.h5">Class Generation</MudText>
<p style="margin-bottom: 20px;">
</p>
<MudGrid Spacing="3">
    <AdvancedSettingItem ToolTip="This will determine whether the generated ApiClient will handle multiple responses, or just the first success response (if present).">
        <MudSwitch Color="Color.Primary" @bind-Checked="ApiClientOptions.RemoveSemiDuplicates">Remove Semi-Duplicate Classes</MudSwitch>
    </AdvancedSettingItem>
    
    <AdvancedSettingItem ToolTip="This will determine whether root classes are considered for deduping.">
        <MudSwitch Color="Color.Primary" @bind-Checked="ApiClientOptions.RemoveDuplicateRoots">Remove Duplicate Roots</MudSwitch>
    </AdvancedSettingItem>
</MudGrid>
<MudDivider Class="my-divider" Light="true" FlexItem="true" />
<MudText Class="setting-section-header" Typo="Typo.h5">Miscellaneous</MudText>
<MudGrid Spacing="3">
     <AdvancedSettingItem ToolTip="Any types choosen in here will cause disabled parameters of that type to be removed in pre-processing..">
         <MultiEnumSelectComponent TEnum="RemoveDisabled" Value="ApiClientOptions.RemoveDisabled" Label="Remove Disabled" SelectedValuesChanged="SelectedRemovedDisabledChanged"></MultiEnumSelectComponent>
     </AdvancedSettingItem>

    <AdvancedSettingItem ToolTip="WARNING: Authorizations will be lost is this setting is enabled. This will reorganize requests by authority. See options explained page for full explanation.">
         <EnumSelectComponent @bind-Value="ApiClientOptions.RootDefinition" AlwaysShowAllEnumValues Label="Root Definition"></EnumSelectComponent>
     </AdvancedSettingItem>
</MudGrid>
@{
    var toolTipColor = Color.Warning;
    var toolTipVisible = false;
    string toolTipMessage = "";
    if (!Equals(ApiClientOptions, LastSavedApiClientOptions))
    {
        toolTipColor = Color.Warning;
        toolTipVisible = true;
        toolTipMessage = "There are unsaved changes. Click save to ensure your changes take effect.";
    }
}
<div class="f-row" style="margin-top: 25px; gap: 20px;" >
    <MudButton Color="Color.Primary" OnClick="SaveOptions" Disabled="Equals(ApiClientOptions, LastSavedApiClientOptions)" Variant="Variant.Outlined" EndIcon="@Icons.Save">Save</MudButton>
    <MudTooltip Text="Resets settings to default values">
        <MudButton Disabled="Equals(LastSavedApiClientOptions, new ApiClientOptions())" Style="text-wrap: nowrap;" Color="Color.Error" Variant="Variant.Filled" OnClick="() => { ApiClientOptions = new ApiClientOptions();  }">Reset to default</MudButton>
    </MudTooltip>
    @if (toolTipVisible)
    {
        <MudTooltip Style="position: absolute; top: 10px; right: 10px;" Text="@toolTipMessage">
            <MudIcon Icon="@Icons.Warning" Color="@toolTipColor" Title="Warning" Size="Size.Large"></MudIcon>
        </MudTooltip>
    }
</div>

@code {
    [Inject] private ISnackbar? Snackbar { get; set; }
    public static ApiClientOptions ApiClientOptions { get; private set; } = new();
    public static ApiClientOptions LastSavedApiClientOptions { get; private set; } = new();

    protected override void OnInitialized()
    {
        MainLayout.OnSettingsChanged += OnSettingsChanged;
    }

    private void OnSettingsChanged()
    {
        StateHasChanged();
    }

    public static void SetApiClientOptions(ApiClientOptions options)
    {
        LastSavedApiClientOptions = options.Clone();
        ApiClientOptions = options.Clone();
    }

    private void SelectedErrorHandlingSinksChanged(IEnumerable<string> errorHandlingSinks)
    {
        ApiClientOptions.ErrorHandlingSinks = errorHandlingSinks.Select(Enum.Parse<ErrorHandlingSinks>).ToList();
    }
    private void SelectedCatchExceptionTypesChanged(IEnumerable<string> catchTypes)
    {
        ApiClientOptions.CatchExceptionTypes = catchTypes.Select(Enum.Parse<CatchExceptionTypes>).ToList();
    }
    private void SelectedCommentTypesChanged(IEnumerable<string> commentTypes)
    {
        ApiClientOptions.XmlCommentTypes = commentTypes.Select(Enum.Parse<XmlCommentTypes>).ToList();
    }
    private void SelectedRemovedDisabledChanged(IEnumerable<string> commentTypes)
    {
        ApiClientOptions.RemoveDisabled = commentTypes.Select(Enum.Parse<RemoveDisabled>).ToList();
    }

    private static ApiClientOptions DefaultOptions() => new();
    private static bool Equals(ApiClientOptions options1, ApiClientOptions options2)
    {
        var allRemovedDisabledMatch = options1.RemoveDisabled.Count == options2.RemoveDisabled.Count && options1.RemoveDisabled.All(type => options2.RemoveDisabled.Contains(type));
        var allCommentTypesMatch = options1.XmlCommentTypes.Count == options2.XmlCommentTypes.Count && options1.XmlCommentTypes.All(type => options2.XmlCommentTypes.Contains(type));
        var allSinksMatch = options1.ErrorHandlingSinks.Count == options2.ErrorHandlingSinks.Count && options1.ErrorHandlingSinks.All(sink => options2.ErrorHandlingSinks.Contains(sink));
        var allCatchTypesMatch = options1.CatchExceptionTypes.Count == options2.CatchExceptionTypes.Count && options1.CatchExceptionTypes.All(type => options2.CatchExceptionTypes.Contains(type));
        return options1.EnsureResponseIsSuccessStatusCode == options2.EnsureResponseIsSuccessStatusCode
               && options1.MakePathCollectionVariablesFunctionParameters == options2.MakePathCollectionVariablesFunctionParameters
               && options1.ErrorHandlingStrategy == options2.ErrorHandlingStrategy
               && options1.LogLevel == options2.LogLevel
               && options1.RootDefinition == options2.RootDefinition
               && options1.UseCancellationTokens == options2.UseCancellationTokens
               && options1.JsonLibrary == options2.JsonLibrary
               && options1.MultipleResponseHandling == options2.MultipleResponseHandling
               && options1.HandleMultipleResponses == options2.HandleMultipleResponses
               && options1.RemoveSemiDuplicates == options2.RemoveSemiDuplicates
               && options1.RemoveDuplicateRoots == options2.RemoveDuplicateRoots
               && allSinksMatch && allCatchTypesMatch && allCommentTypesMatch && allRemovedDisabledMatch;
    }

    private void SaveOptions()
    {
        LastSavedApiClientOptions = ApiClientOptions.Clone();
        Snackbar?.Add($"Saved {nameof(ApiClientOptions)}", Severity.Success);
    }

    public void Dispose()
    {
        MainLayout.OnSettingsChanged -= OnSettingsChanged;
    }

}
