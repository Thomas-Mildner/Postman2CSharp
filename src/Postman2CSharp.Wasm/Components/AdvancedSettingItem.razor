<MudItem xs="@Xs" sm="@Sm" md="@Md" lg="@Lg" Style="display: flex; align-items: baseline; gap: 10px;">
    <div style="flex-grow: 1;">
        @ChildContent
    </div>
    <MudTooltip Delay="400" Duration="300">
        <ChildContent>
            <MudIcon Icon="@Icons.HelpOutline" Size="MudBlazor.Size.Small"></MudIcon>
        </ChildContent>
        <TooltipContent>
            <MudText Typo="Typo.body2" Style="min-width: 12em; max-width: 17em;">@ToolTip</MudText>
        </TooltipContent>
    </MudTooltip>
    <div style="flex-grow: 1"></div>
</MudItem>
@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter, EditorRequired] public string ToolTip { get; set; } = null!;

    [Parameter] public AdvancedItemSize Size { get; set; } = AdvancedItemSize.Large;

    private int Xs => Size switch{
        AdvancedItemSize.Small => 4,
        AdvancedItemSize.Medium => 8,
        AdvancedItemSize.Large => 12,
        AdvancedItemSize.ExtraLarge => 12,
        AdvancedItemSize.ExtraExtraLarge => 12,
        _ => throw new ArgumentOutOfRangeException()
    };

    private int Sm => Size switch{
        AdvancedItemSize.Small => 2,
        AdvancedItemSize.Medium => 4,
        AdvancedItemSize.Large => 6,
        AdvancedItemSize.ExtraLarge => 12,
        AdvancedItemSize.ExtraExtraLarge => 12,
        _ => throw new ArgumentOutOfRangeException()
    };

    private int Md => Size switch{
        AdvancedItemSize.Small => 1,
        AdvancedItemSize.Medium => 3,
        AdvancedItemSize.Large => 4,
        AdvancedItemSize.ExtraLarge => 8,
        AdvancedItemSize.ExtraExtraLarge => 12,
        _ => throw new ArgumentOutOfRangeException()
    };

    private int Lg => Size switch{
        AdvancedItemSize.Small => 1,
        AdvancedItemSize.Medium => 2,
        AdvancedItemSize.Large => 3,
        AdvancedItemSize.ExtraLarge => 6,
        AdvancedItemSize.ExtraExtraLarge => 12,
        _ => throw new ArgumentOutOfRangeException()
    };

}
