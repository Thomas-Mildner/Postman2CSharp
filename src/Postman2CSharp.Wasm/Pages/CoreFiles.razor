@page "/CoreFiles"
@inherits MainLayoutComponent

<PageHeader Title="Core Files"
            SubTitle="Postman2CSharp creates a few files with every ApiClient. Those files are viewable here."
            Keywords="core files, query helpers, http extensions, interfaces, helper extensions" />

<style>
    .mud-tab.mud-ripple {
        max-width: 300px;
        display: inline-flex;
    }
</style>

<PageHeader Title="Core Files"
            SubTitle="Understand the core files generated by Postman2CSharp, including API Client classes, models, and more."
            Keywords="core files" />

<BreadCrumbs Items="@BreadCrumbs"></BreadCrumbs>
<br />

<MudPaper Elevation="4" Class="header-paper">
    <MudText Typo="Typo.h1" Class="mt-4">Core Files</MudText>
    <br/>

    <MudText Typo="Typo.subtitle1">
        These are the core files that all Api Clients will be downloaded with. They are just the bare minimum assortment of interfaces, classes,
        and extension methods that are needed to make a clean C# Api Client. It is recommended to look through each of these (class/function/..) and 
        delete any you don't need. Especially with the extension methods, I had to ensure every case was covered, so there is a good chance there are
        a lot of extension methods that you may not need. Feel free to keep them if you find them useful in development though.
    </MudText>
</MudPaper>

<MudDivider Class="my-divider" DividerType="DividerType.FullWidth"></MudDivider>
<br />

<MudTabs>
    @foreach(var coreFile in CoreCsFile.Dict)
    {
        <MudTabPanel Text="@coreFile.Key" Icon="@Icons.Code">
            <br/>
            <p>@FileExplanations[coreFile.Key]</p>
            <br/>
            <PrismCodeBlock FileName="@coreFile.Key" Language="PrismLanguage.CSharp" Value="@coreFile.Value" />
        </MudTabPanel>
    }
</MudTabs>

@code
{
    private static readonly List<BreadcrumbItem> BreadCrumbs = new()
    {
        new("Home", "/", icon: Icons.Home),
        new("Core Files", "/CoreFiles", true, Icons.Code)
    };

    private static Dictionary<string, string> FileExplanations { get; set; } = new Dictionary<string, string>()
    {
        { nameof(CoreCsFile.QueryHelpers), "This is just one extension method that is used to add query parameters to a string." },
        { nameof(CoreCsFile.HelperExtensions), "This is one extension method that acts as last minute insurance to make sure duplicate query parameters aren't added." },
        { nameof(CoreCsFile.OAuth2QueryParameters), "If your API client uses OAuth2 and uses query parameters, you're Api client will be shipped with this " },
        { nameof(CoreCsFile.Interfaces), "These are the interfaces that query parameters classes and form data classes will use." },
        { nameof(CoreCsFile.HttpJsonExtensions), "These are the extension methods used to facilitate Api calls that use JSON. It will only be packaged with the project" +
                                                 " if the selected JsonLibrary is System.Text.Json" },
        { nameof(CoreCsFile.NewtonsoftHttpJsonExtensions), "These are the extension methods used to facilitate Api calls that use JSON. It will only be packaged with the project" +
                                                           " if the selected JsonLibrary is Newtonsoft.Json" },
    };

    protected override void OnInitialized()
    {
        TabsService.Value.SetHome(null);
    }
}
