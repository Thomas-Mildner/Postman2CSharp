@page "/Collection/{CollectionId}/ApiClient/{ApiClientId}/DuplicateRoots"
@inherits MainLayoutComponent

<PageTitle>Duplicate Roots</PageTitle>

<BreadCrumbs Items="@_breadCrumbs"></BreadCrumbs>

<br />

<MudText Typo="Typo.h1" Style="font-size: 2.3em">@SelectedApiClient?.Name - Duplicate Roots</MudText>
<br/>
<p>
    If you are seeing this page, it's because you enabled the remove duplicate roots option on the Convert page.
    What that settings does, is it removes duplicate classes from the generated code even if it is a root class.
    What this means, is that if DeleteUserResponse and DeleteItemResponse (and every duplicate root after) 
    both have the same properties, only the root will be generated. This is usually ideal in most situations, be it a
    request or response, however it can cause some confusion due to naming; you don't want the DeleteItem function
    returning a DeleteUserResponse. This page allows you to rename the duplicate roots to something more appropriate.
</p>
<br/>
<br/>
@if (SelectedApiClient != null)
{
    <RenameDuplicateRootsComponent ApiClient="SelectedApiClient"></RenameDuplicateRootsComponent>
}

@code {
    private List<BreadcrumbItem> _breadCrumbs = new();

    [Parameter] public string? ApiClientId { get; set; }
    [Parameter] public string? CollectionId { get; set; }

    private ApiClient? SelectedApiClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!GetApiClientFromParameters()) return;
        if (ApiClientId == null || CollectionId == null) return;
        await TabsService.Value.AddApiClientDuplicateRootsTab(CollectionId, ApiClientId);
    }

    private ApiClient? _cachedApiClient;
    protected override async Task OnParametersSetAsync()
    {
        if (!GetApiClientFromParameters()) return;
        if (ApiClientId == null || CollectionId == null) return;

        if (SelectedApiClient != null && SelectedApiClient != _cachedApiClient)
        {
            _cachedApiClient = SelectedApiClient;
            await TabsService.Value.AddApiClientDuplicateRootsTab(CollectionId, ApiClientId);
        }
        _breadCrumbs = new()
        {
            new("Home", "/", icon: Icons.Home),
            new("Collection", $"/Collection/{CollectionId}", icon: NavMenu.FavIcon),
            new(SelectedApiClient!.Name, $"/Collection/{CollectionId}/ApiClient/{ApiClientId}"),
            new("Duplicate Roots", $"/Collection/{CollectionId}/ApiClient/{ApiClientId}/DuplicateRoots", true),
        };

    }

    private bool GetApiClientFromParameters()
    {
        if (ApiCollections == null || ApiClientId == null || CollectionId == null)
        {
            return false;
        }
        SelectedApiClient = ApiCollections?.FirstOrDefault(x => x.Id == CollectionId)?
            .ApiClients.FirstOrDefault(x => x.Id == ApiClientId);
        if (SelectedApiClient == null)
        {
            return false;
        }
        return true;
    }
}