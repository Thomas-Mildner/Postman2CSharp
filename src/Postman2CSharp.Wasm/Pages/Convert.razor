@inherits MainLayoutComponent
@page "/Upload"
@page "/Convert"
@implements IDisposable

<PageHeader Title="Convert"
            SubTitle="Convert your Postman collections and transform them into C# HttpClients with Postman2CSharp"
            Keywords="Convert, generator, postman collections, transform, C# HttpClient" />

<BreadCrumbs Items="@BreadCrumbs"></BreadCrumbs>

<br/>

<MudPaper Elevation="4" Class="header-paper" >
    <MudText Typo="Typo.h1" Class="mt-4">Convert Your Postman Collection</MudText>

    <br />

    <MudText Typo="Typo.subtitle1">
        <strong style="font-size: large;" >Privacy Assurance:</strong> Your Postman collections never leave your computer. This tool operates with Blazor WebAssembly (Wasm),
        a framework that allows it to run entirely in your browser without making any network calls or sharing information about your collections. 
        Your data stays on your machine.
    </MudText>
    <br/>
    <MudText Typo="Typo.subtitle1">
        <strong style="font-size: large;">Have a collection in another format?</strong> Postman supports a variety of type and specification for importing. 
        OpenAPI, GraphQL, cURL, RAML, HAR and more are all supported. For more information, visit their page: <a target="_blank" class="link-normal" href="https://learning.postman.com/docs/designing-and-developing-your-api/importing-an-api/#supported-api-definitions-formats">Supported API definitions formats</a>
        The imports are well written and create a well-structured collection. If you have a collection in one of these formats, you can import it into Postman and then
        follow the directions <a class="link-normal"  href="/getting-started">here</a>.
    </MudText>
</MudPaper>

<br/>
<MudDivider Class="my-divider" DividerType="DividerType.FullWidth"></MudDivider>

@if (LazyLoader.ConvertLoaded)
{
    <div class="code-writing-options-contianer">
        <ApiClientOptionsComponent></ApiClientOptionsComponent>
    </div>

    <CollectionUpload SuccessfulUpload="OnSuccessfulUpload"></CollectionUpload>
}


@code {
    [Inject] private LazyLoader? LazyAssemblyLoader { get; set; }
    private static readonly List<BreadcrumbItem> BreadCrumbs = new()
    {
        new("Home", "/", icon: Icons.Home),
        new("Convert", "/Convert", true, Icons.ImportExport)
    };

    protected override void OnInitialized()
    {
        TabsService.Value.SetHome(null);
        if (!LazyLoader.ConvertLoaded)
        {
            throw new Exception("Something went wrong. Reload the page.");
        }
        LazyLoader.UploadLoadedChanged += OnUploadLoaded;
    }

    private async Task OnSuccessfulUpload(ApiCollection apiCollection)
    {
        await Layout.AddApiCollection(apiCollection);
        Navigate.Value.ToCollection(apiCollection.Id);
        NavMenu.CollectionsExpanded = true;
    }

    private async Task OnUploadLoaded(bool loaded)
    {
        if (loaded)
        {
            await InvokeAsync(StateHasChanged);
        }
    }


    public void Dispose()
    {
        LazyLoader.UploadLoadedChanged -= OnUploadLoaded;
    }

}
