using System.IO;
using System.Threading.Tasks;
namespace MerakiDashboard
{
    public interface IMerakiDashboardApiClient
    {
        Task<ListTheOrganizationsResponse> ListTheOrganizations();
        Task<ListTheNetworksInAnOrganizationResponse> ListTheNetworksInAnOrganization(ListTheNetworksInAnOrganizationParameters queryParameters, string organizationId);
        Task<ListTheDevicesInAnOrganizationResponse> ListTheDevicesInAnOrganization(ListTheDevicesInAnOrganizationParameters queryParameters, string organizationId);
        Task<ListTheClientsInANetworkResponse> ListTheClientsInANetwork(ListTheClientsInANetworkParameters queryParameters, string networkId);
        Task<ReturnsTheIdentityOfTheCurrentUserResponse> ReturnsTheIdentityOfTheCurrentUser();
        Task<ReturnTheDHCPSubnetInformationForAnApplianceResponse> ReturnTheDHCPSubnetInformationForAnAppliance(string serial);
        Task<ReturnThePerformanceScoreForASingleMXResponse> ReturnThePerformanceScoreForASingleMX(string serial);
        Task<TurnCurrentDelegatedIPv6PrefixesOnAnApplianceResponse> TurnCurrentDelegatedIPv6PrefixesOnAnAppliance(string serial);
        Task<ListTheSecurityEventsForAClientResponse> ListTheSecurityEventsForAClient(ListTheSecurityEventsForAClientParameters queryParameters, string networkId, string clientId);
        Task<ListTheSecurityEventsForANetworkResponse> ListTheSecurityEventsForANetwork(ListTheSecurityEventsForANetworkParameters queryParameters, string networkId);
        Task<ListTheSecurityEventsForAnOrganizationResponse> ListTheSecurityEventsForAnOrganization(ListTheSecurityEventsForAnOrganizationParameters queryParameters, string organizationId);
        Task<HeSentAndReceivedBytesForEachUplinkOfANetworkResponse> HeSentAndReceivedBytesForEachUplinkOfANetwork(HeSentAndReceivedBytesForEachUplinkOfANetworkParameters queryParameters, string networkId);
        Task<MerakiMXAndZSeriesAppliancesInTheOrganizationResponse> MerakiMXAndZSeriesAppliancesInTheOrganization(MerakiMXAndZSeriesAppliancesInTheOrganizationParameters queryParameters, string organizationId);
        Task<ShowVPNHistoryStatForNetworksInAnOrganizationResponse> ShowVPNHistoryStatForNetworksInAnOrganization(ShowVPNHistoryStatForNetworksInAnOrganizationParameters queryParameters, string organizationId);
        Task<ShowVPNStatusForNetworksInAnOrganizationResponse> ShowVPNStatusForNetworksInAnOrganization(ShowVPNStatusForNetworksInAnOrganizationParameters queryParameters, string organizationId);
        Task<ReturnTheRadioSettingsOfAnApplianceResponse> ReturnTheRadioSettingsOfAnAppliance(string serial);
        Task<UpdateTheRadioSettingsOfAnApplianceResponse> UpdateTheRadioSettingsOfAnAppliance(UpdateTheRadioSettingsOfAnApplianceRequest request, string serial);
        Task<ReturnTheUplinkSettingsForAnMXApplianceResponse> ReturnTheUplinkSettingsForAnMXAppliance(string serial);
        Task<UpdateTheUplinkSettingsForAnMXApplianceResponse> UpdateTheUplinkSettingsForAnMXAppliance(UpdateTheUplinkSettingsForAnMXApplianceRequest request, string serial);
        Task<Stream> GenerateANewVMXAuthenticationToken(string serial);
        Task<ConnectivityTestingDestinationsForAnMXNetworkResponse> ConnectivityTestingDestinationsForAnMXNetwork(string networkId);
        Task<ConnectivityTestingDestinationsForAnMXNetwork2Response> ConnectivityTestingDestinationsForAnMXNetwork2(ConnectivityTestingDestinationsForAnMXNetwork2Request request, string networkId);
        Task<TurnTheContentFilteringSettingsForAnMXNetworkResponse> TurnTheContentFilteringSettingsForAnMXNetwork(string networkId);
        Task<DateTheContentFilteringSettingsForAnMXNetworkResponse> DateTheContentFilteringSettingsForAnMXNetwork(DateTheContentFilteringSettingsForAnMXNetworkRequest request, string networkId);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> ReturnTheCellularFirewallRulesForAnMXNetwork(string networkId);
        Task<UpdateTheCellularFirewallRulesOfAnMXNetworkResponse> UpdateTheCellularFirewallRulesOfAnMXNetwork(UpdateTheCellularFirewallRulesOfAnMXNetworkRequest request, string networkId);
        Task<HeApplianceServicesAndTheirAccessibilityRulesResponse> HeApplianceServicesAndTheirAccessibilityRules(string networkId);
        Task<IbilitySettingsOfTheGivenServiceICMPWebOrSNMPResponse> IbilitySettingsOfTheGivenServiceICMPWebOrSNMP(string networkId, string service);
        Task<BilitySettingsForTheGivenServiceICMPWebOrSNMPResponse> BilitySettingsForTheGivenServiceICMPWebOrSNMP(BilitySettingsForTheGivenServiceICMPWebOrSNMPRequest request, string networkId, string service);
        Task<TheInboundCellularFirewallRulesForAnMXNetworkResponse> TheInboundCellularFirewallRulesForAnMXNetwork(string networkId);
        Task<ETheInboundCellularFirewallRulesOfAnMXNetworkResponse> ETheInboundCellularFirewallRulesOfAnMXNetwork(ETheInboundCellularFirewallRulesOfAnMXNetworkRequest request, string networkId);
        Task<ReturnTheInboundFirewallRulesForAnMXNetworkResponse> ReturnTheInboundFirewallRulesForAnMXNetwork(string networkId);
        Task<UpdateTheInboundFirewallRulesOfAnMXNetworkResponse> UpdateTheInboundFirewallRulesOfAnMXNetwork(UpdateTheInboundFirewallRulesOfAnMXNetworkRequest request, string networkId);
        Task<ReturnTheL3FirewallRulesForAnMXNetworkResponse> ReturnTheL3FirewallRulesForAnMXNetwork(string networkId);
        Task<UpdateTheL3FirewallRulesOfAnMXNetworkResponse> UpdateTheL3FirewallRulesOfAnMXNetwork(UpdateTheL3FirewallRulesOfAnMXNetworkRequest request, string networkId);
        Task<ListTheMXL7FirewallRulesForAnMXNetworkResponse> ListTheMXL7FirewallRulesForAnMXNetwork(string networkId);
        Task<UpdateTheMXL7FirewallRulesForAnMXNetworkResponse> UpdateTheMXL7FirewallRulesForAnMXNetwork(UpdateTheMXL7FirewallRulesForAnMXNetworkRequest request, string networkId);
        Task<ReturnThe1ManyNATMappingRulesForAnMXNetworkResponse> ReturnThe1ManyNATMappingRulesForAnMXNetwork(string networkId);
        Task<SetThe1ManyNATMappingRulesForAnMXNetworkResponse> SetThe1ManyNATMappingRulesForAnMXNetwork(SetThe1ManyNATMappingRulesForAnMXNetworkRequest request, string networkId);
        Task<ReturnThe11NATMappingRulesForAnMXNetworkResponse> ReturnThe11NATMappingRulesForAnMXNetwork(string networkId);
        Task<SetThe11NATMappingRulesForAnMXNetworkResponse> SetThe11NATMappingRulesForAnMXNetwork(SetThe11NATMappingRulesForAnMXNetworkRequest request, string networkId);
        Task<ReturnThePortForwardingRulesForAnMXNetworkResponse> ReturnThePortForwardingRulesForAnMXNetwork(string networkId);
        Task<UpdateThePortForwardingRulesForAnMXNetworkResponse> UpdateThePortForwardingRulesForAnMXNetwork(UpdateThePortForwardingRulesForAnMXNetworkRequest request, string networkId);
        Task<ReturnTheFirewallSettingsForThisNetworkResponse> ReturnTheFirewallSettingsForThisNetwork(string networkId);
        Task<UpdateTheFirewallSettingsForThisNetworkResponse> UpdateTheFirewallSettingsForThisNetwork(UpdateTheFirewallSettingsForThisNetworkRequest request, string networkId);
        Task<ListPerPortVLANSettingsForAllPortsOfAMXResponse> ListPerPortVLANSettingsForAllPortsOfAMX(string networkId);
        Task<ReturnPerPortVLANSettingsForASingleMXPortResponse> ReturnPerPortVLANSettingsForASingleMXPort(string networkId, string portId);
        Task<UpdateThePerPortVLANSettingsForASingleMXPortResponse> UpdateThePerPortVLANSettingsForASingleMXPort(UpdateThePerPortVLANSettingsForASingleMXPortRequest request, string networkId, string portId);
        Task<ListStaticDelegatedPrefixesForANetworkResponse> ListStaticDelegatedPrefixesForANetwork(string networkId);
        Task<Stream> AddAStaticDelegatedPrefixFromANetwork(AddAStaticDelegatedPrefixFromANetworkRequest request, string networkId);
        Task<ReturnAStaticDelegatedPrefixFromANetworkResponse> ReturnAStaticDelegatedPrefixFromANetwork(string networkId, string staticDelegatedPrefixId);
        Task<UpdateAStaticDelegatedPrefixFromANetworkResponse> UpdateAStaticDelegatedPrefixFromANetwork(UpdateAStaticDelegatedPrefixFromANetworkRequest request, string networkId, string staticDelegatedPrefixId);
        Task<Stream> DeleteAStaticDelegatedPrefixFromANetwork(string networkId, string staticDelegatedPrefixId);
        Task<ListTheRFProfilesForThisNetworkResponse> ListTheRFProfilesForThisNetwork(string networkId);
        Task<NsAllSupportedIntrusionSettingsForAnMXNetworkResponse> NsAllSupportedIntrusionSettingsForAnMXNetwork(string networkId);
        Task<EtTheSupportedIntrusionSettingsForAnMXNetworkResponse> EtTheSupportedIntrusionSettingsForAnMXNetwork(EtTheSupportedIntrusionSettingsForAnMXNetworkRequest request, string networkId);
        Task<LlSupportedIntrusionSettingsForAnOrganizationResponse> LlSupportedIntrusionSettingsForAnOrganization(string organizationId);
        Task<TsSupportedIntrusionSettingsForAnOrganizationResponse> TsSupportedIntrusionSettingsForAnOrganization(TsSupportedIntrusionSettingsForAnOrganizationRequest request, string organizationId);
        Task<UrnsAllSupportedMalwareSettingsForAnMXNetworkResponse> UrnsAllSupportedMalwareSettingsForAnMXNetwork(string networkId);
        Task<SetTheSupportedMalwareSettingsForAnMXNetworkResponse> SetTheSupportedMalwareSettingsForAnMXNetwork(SetTheSupportedMalwareSettingsForAnMXNetworkRequest request, string networkId);
        Task<ReturnTheApplianceSettingsForANetworkResponse> ReturnTheApplianceSettingsForANetwork(string networkId);
        Task<UpdateTheApplianceSettingsForANetworkResponse> UpdateTheApplianceSettingsForANetwork(UpdateTheApplianceSettingsForANetworkRequest request, string networkId);
        Task<ReturnSingleLANConfigurationResponse> ReturnSingleLANConfiguration(string networkId);
        Task<UpdateSingleLANConfigurationResponse> UpdateSingleLANConfiguration(UpdateSingleLANConfigurationRequest request, string networkId);
        Task<ListTheMXSSIDsInANetworkResponse> ListTheMXSSIDsInANetwork(string networkId);
        Task<ReturnASingleMXSSIDResponse> ReturnASingleMXSSID(string networkId, string number);
        Task<UpdateTheAttributesOfAnMXSSIDResponse> UpdateTheAttributesOfAnMXSSID(UpdateTheAttributesOfAnMXSSIDRequest request, string networkId, string number);
        Task<ListTheStaticRoutesForAnMXOrTeleworkerNetworkResponse> ListTheStaticRoutesForAnMXOrTeleworkerNetwork(string networkId);
        Task<Stream> AddAStaticRouteForAnMXOrTeleworkerNetwork(AddAStaticRouteForAnMXOrTeleworkerNetworkRequest request, string networkId);
        Task<ReturnAStaticRouteForAnMXOrTeleworkerNetworkResponse> ReturnAStaticRouteForAnMXOrTeleworkerNetwork(string networkId, string staticRouteId);
        Task<UpdateAStaticRouteForAnMXOrTeleworkerNetworkResponse> UpdateAStaticRouteForAnMXOrTeleworkerNetwork(UpdateAStaticRouteForAnMXOrTeleworkerNetworkRequest request, string networkId, string staticRouteId);
        Task<Stream> DeleteAStaticRouteFromAnMXOrTeleworkerNetwork(string networkId, string staticRouteId);
        Task<IsplayTheTrafficShapingSettingsForAnMXNetworkResponse> IsplayTheTrafficShapingSettingsForAnMXNetwork(string networkId);
        Task<UpdateTheTrafficShapingSettingsForAnMXNetworkResponse> UpdateTheTrafficShapingSettingsForAnMXNetwork(UpdateTheTrafficShapingSettingsForAnMXNetworkRequest request, string networkId);
        Task<ListTheVLANsForAnMXNetworkResponse> ListTheVLANsForAnMXNetwork(string networkId);
        Task<Stream> AddAVLAN(AddAVLANRequest request, string networkId);
        Task<ReturnAVLANResponse> ReturnAVLAN(string networkId, string vlanId);
        Task<UpdateAVLANResponse> UpdateAVLAN(UpdateAVLANRequest request, string networkId, string vlanId);
        Task<Stream> DeleteAVLANFromANetwork(string networkId, string vlanId);
        Task<ReturnAHubBGPConfigurationResponse> ReturnAHubBGPConfiguration(string networkId);
        Task<UpdateAHubBGPConfigurationResponse> UpdateAHubBGPConfiguration(UpdateAHubBGPConfigurationRequest request, string networkId);
        Task<ReturnTheSiteToSiteVPNSettingsOfANetworkResponse> ReturnTheSiteToSiteVPNSettingsOfANetwork(string networkId);
        Task<UpdateTheSiteToSiteVPNSettingsOfANetworkResponse> UpdateTheSiteToSiteVPNSettingsOfANetwork(UpdateTheSiteToSiteVPNSettingsOfANetworkRequest request, string networkId);
        Task<ReturnTheThirdPartyVPNPeersForAnOrganizationResponse> ReturnTheThirdPartyVPNPeersForAnOrganization(string organizationId);
        Task<UpdateTheThirdPartyVPNPeersForAnOrganizationResponse> UpdateTheThirdPartyVPNPeersForAnOrganization(UpdateTheThirdPartyVPNPeersForAnOrganizationRequest request, string organizationId);
        Task<EFirewallRulesForAnOrganizationsSiteToSiteVPNResponse> EFirewallRulesForAnOrganizationsSiteToSiteVPN(string organizationId);
        Task<HeFirewallRulesOfAnOrganizationsSiteToSiteVPNResponse> HeFirewallRulesOfAnOrganizationsSiteToSiteVPN(HeFirewallRulesOfAnOrganizationsSiteToSiteVPNRequest request, string organizationId);
        Task<ReturnMXWarmSpareSettingsResponse> ReturnMXWarmSpareSettings(string networkId);
        Task<UpdateMXWarmSpareSettingsResponse> UpdateMXWarmSpareSettings(UpdateMXWarmSpareSettingsRequest request, string networkId);
        Task<SwapMXPrimaryAndWarmSpareAppliancesResponse> SwapMXPrimaryAndWarmSpareAppliances(string networkId);
        Task<Stream> EsAtTheSpecifiedTimeAndReturnALinkToThatImage(EsAtTheSpecifiedTimeAndReturnALinkToThatImageRequest request, string serial);
        Task<ReturnCustomAnalyticsSettingsForACameraResponse> ReturnCustomAnalyticsSettingsForACamera(string serial);
        Task<UpdateCustomAnalyticsSettingsForACameraResponse> UpdateCustomAnalyticsSettingsForACamera(UpdateCustomAnalyticsSettingsForACameraRequest request, string serial);
        Task<SQualityAndRetentionSettingsForTheGivenCameraResponse> SQualityAndRetentionSettingsForTheGivenCamera(string serial);
        Task<EQualityAndRetentionSettingsForTheGivenCameraResponse> EQualityAndRetentionSettingsForTheGivenCamera(EQualityAndRetentionSettingsForTheGivenCameraRequest request, string serial);
        Task<ReturnsSenseSettingsForAGivenCameraResponse> ReturnsSenseSettingsForAGivenCamera(string serial);
        Task<UpdateSenseSettingsForTheGivenCameraResponse> UpdateSenseSettingsForTheGivenCamera(UpdateSenseSettingsForTheGivenCameraRequest request, string serial);
        Task<ReturnsVideoSettingsForTheGivenCameraResponse> ReturnsVideoSettingsForTheGivenCamera(string serial);
        Task<UpdateVideoSettingsForTheGivenCameraResponse> UpdateVideoSettingsForTheGivenCamera(UpdateVideoSettingsForTheGivenCameraRequest request, string serial);
        Task<ReturnsVideoLinkToTheSpecifiedCameraResponse> ReturnsVideoLinkToTheSpecifiedCamera(ReturnsVideoLinkToTheSpecifiedCameraParameters queryParameters, string serial);
        Task<EturnsWirelessProfileAssignedToTheGivenCameraResponse> EturnsWirelessProfileAssignedToTheGivenCamera(string serial);
        Task<AssignWirelessProfilesToTheGivenCameraResponse> AssignWirelessProfilesToTheGivenCamera(AssignWirelessProfilesToTheGivenCameraRequest request, string serial);
        Task<ReatesANewCameraWirelessProfileForThisNetworkResponse> ReatesANewCameraWirelessProfileForThisNetwork(ReatesANewCameraWirelessProfileForThisNetworkRequest request, string networkId);
        Task<ListTheCameraWirelessProfilesForThisNetworkResponse> ListTheCameraWirelessProfilesForThisNetwork(string networkId);
        Task<RetrieveASingleCameraWirelessProfileResponse> RetrieveASingleCameraWirelessProfile(string networkId, string wirelessProfileId);
        Task<EAnExistingCameraWirelessProfileInThisNetworkResponse> EAnExistingCameraWirelessProfileInThisNetwork(EAnExistingCameraWirelessProfileInThisNetworkRequest request, string networkId, string wirelessProfileId);
        Task<Stream> AnExistingCameraWirelessProfileForThisNetwork(string networkId, string wirelessProfileId);
        Task<ListTheQualityRetentionProfilesForThisNetworkResponse> ListTheQualityRetentionProfilesForThisNetwork(string networkId);
        Task<EatesNewQualityRetentionProfileForThisNetworkResponse> EatesNewQualityRetentionProfileForThisNetwork(EatesNewQualityRetentionProfileForThisNetworkRequest request, string networkId);
        Task<ExistingQualityRetentionProfileForThisNetworkResponse> ExistingQualityRetentionProfileForThisNetwork(ExistingQualityRetentionProfileForThisNetworkRequest request, string networkId, string qualityRetentionProfileId);
        Task<Stream> ExistingQualityRetentionProfileForThisNetwork2(string networkId, string qualityRetentionProfileId);
        Task<RetrieveASingleQualityRetentionProfileResponse> RetrieveASingleQualityRetentionProfile(string networkId, string qualityRetentionProfileId);
        Task<ReturnsAListOfAllCameraRecordingSchedulesResponse> ReturnsAListOfAllCameraRecordingSchedules(string networkId);
        Task<FetchOnboardingStatusOfCamerasResponse> FetchOnboardingStatusOfCameras(FetchOnboardingStatusOfCamerasParameters queryParameters, string organizationId);
        Task<TifyThatCredentialHandoffToCameraHasCompletedResponse> TifyThatCredentialHandoffToCameraHasCompleted(TifyThatCredentialHandoffToCameraHasCompletedRequest request, string organizationId);
        Task<ShowTheLANSettingsOfAMGResponse> ShowTheLANSettingsOfAMG(string serial);
        Task<UpdateTheLANSettingsForASingleMGResponse> UpdateTheLANSettingsForASingleMG(UpdateTheLANSettingsForASingleMGRequest request, string serial);
        Task<ReturnsThePortForwardingRulesForASingleMGResponse> ReturnsThePortForwardingRulesForASingleMG(string serial);
        Task<UpdatesThePortForwardingRulesForASingleMGResponse> UpdatesThePortForwardingRulesForASingleMG(UpdatesThePortForwardingRulesForASingleMGRequest request, string serial);
        Task<ConnectivityTestingDestinationsForAnMGNetworkResponse> ConnectivityTestingDestinationsForAnMGNetwork(string networkId);
        Task<ConnectivityTestingDestinationsForAnMGNetwork2Response> ConnectivityTestingDestinationsForAnMGNetwork2(ConnectivityTestingDestinationsForAnMGNetwork2Request request, string networkId);
        Task<ListCommonDHCPSettingsOfMGsResponse> ListCommonDHCPSettingsOfMGs(string networkId);
        Task<UpdateCommonDHCPSettingsOfMGsResponse> UpdateCommonDHCPSettingsOfMGs(UpdateCommonDHCPSettingsOfMGsRequest request, string networkId);
        Task<SubnetPoolAndMaskConfiguredForMGsInTheNetworkResponse> SubnetPoolAndMaskConfiguredForMGsInTheNetwork(string networkId);
        Task<NetPoolAndMaskConfigurationForMGsInTheNetworkResponse> NetPoolAndMaskConfigurationForMGsInTheNetwork(NetPoolAndMaskConfigurationForMGsInTheNetworkRequest request, string networkId);
        Task<ReturnsTheUplinkSettingsForYourMGNetworkResponse> ReturnsTheUplinkSettingsForYourMGNetwork(string networkId);
        Task<UpdatesTheUplinkSettingsForYourMGNetworkResponse> UpdatesTheUplinkSettingsForYourMGNetwork(UpdatesTheUplinkSettingsForYourMGNetworkRequest request, string networkId);
        Task<EveryMerakiMGCellularGatewayInTheOrganizationResponse> EveryMerakiMGCellularGatewayInTheOrganization(EveryMerakiMGCellularGatewayInTheOrganizationParameters queryParameters, string organizationId);
        Task<StTheSensorRolesForAGivenSensorOrCameraDeviceResponse> StTheSensorRolesForAGivenSensorOrCameraDevice(string serial);
        Task<OrMoreSensorRolesToAGivenSensorOrCameraDeviceResponse> OrMoreSensorRolesToAGivenSensorOrCameraDevice(OrMoreSensorRolesToAGivenSensorOrCameraDeviceRequest request, string serial);
        Task<ListTheSensorRolesForDevicesInAGivenNetworkResponse> ListTheSensorRolesForDevicesInAGivenNetwork(string networkId);
        Task<ListsAllSensorAlertProfilesForANetworkResponse> ListsAllSensorAlertProfilesForANetwork(string networkId);
        Task<CreatesASensorAlertProfileForANetworkResponse> CreatesASensorAlertProfileForANetwork(CreatesASensorAlertProfileForANetworkRequest request, string networkId);
        Task<ShowDetailsOfASensorAlertProfileForANetworkResponse> ShowDetailsOfASensorAlertProfileForANetwork(string networkId, string id);
        Task<UpdatesASensorAlertProfileForANetworkResponse> UpdatesASensorAlertProfileForANetwork(UpdatesASensorAlertProfileForANetworkRequest request, string networkId, string id);
        Task<Stream> DeletesASensorAlertProfileFromANetwork(string networkId, string id);
        Task<ESensorSettingsOfAllMQTTBrokersForThisNetworkResponse> ESensorSettingsOfAllMQTTBrokersForThisNetwork(string networkId);
        Task<ReturnTheSensorSettingsOfAnMQTTBrokerResponse> ReturnTheSensorSettingsOfAnMQTTBroker(string networkId, string mqttBrokerId);
        Task<UpdateTheSensorSettingsOfAnMQTTBrokerResponse> UpdateTheSensorSettingsOfAnMQTTBroker(UpdateTheSensorSettingsOfAnMQTTBrokerRequest request, string networkId, string mqttBrokerId);
        Task<NAnOverviewOfCurrentlyAlertingSensorsByMetricResponse> NAnOverviewOfCurrentlyAlertingSensorsByMetric(string networkId);
        Task<ErviewOfAlertOccurrencesOverATimespanByMetricResponse> ErviewOfAlertOccurrencesOverATimespanByMetric(ErviewOfAlertOccurrencesOverATimespanByMetricParameters queryParameters, string networkId);
        Task<SFromSensorsInAGivenTimespanSortedByTimestampResponse> SFromSensorsInAGivenTimespanSortedByTimestamp(SFromSensorsInAGivenTimespanSortedByTimestampParameters queryParameters, string organizationId);
        Task<REachMetricFromEachSensorSortedBySensorSerialResponse> REachMetricFromEachSensorSortedBySensorSerial(REachMetricFromEachSensorSortedBySensorSerialParameters queryParameters, string organizationId);
        Task<ListTheSwitchPortsForASwitchResponse> ListTheSwitchPortsForASwitch(string serial);
        Task<ReturnASwitchPortResponse> ReturnASwitchPort(string serial, string portId);
        Task<UpdateASwitchPortResponse> UpdateASwitchPort(UpdateASwitchPortRequest request, string serial, string portId);
        Task<ListLayer3InterfacesForASwitchResponse> ListLayer3InterfacesForASwitch(string serial);
        Task<Stream> CreateALayer3InterfaceForASwitch(CreateALayer3InterfaceForASwitchRequest request, string serial);
        Task<ReturnALayer3InterfaceForASwitchResponse> ReturnALayer3InterfaceForASwitch(string serial, string interfaceId);
        Task<UpdateALayer3InterfaceForASwitchResponse> UpdateALayer3InterfaceForASwitch(UpdateALayer3InterfaceForASwitchRequest request, string serial, string interfaceId);
        Task<Stream> DeleteALayer3InterfaceFromTheSwitch(string serial, string interfaceId);
        Task<ListLayer3StaticRoutesForASwitchResponse> ListLayer3StaticRoutesForASwitch(string serial);
        Task<Stream> CreateALayer3StaticRouteForASwitch(CreateALayer3StaticRouteForASwitchRequest request, string serial);
        Task<ReturnALayer3StaticRouteForASwitchResponse> ReturnALayer3StaticRouteForASwitch(string serial, string staticRouteId);
        Task<UpdateALayer3StaticRouteForASwitchResponse> UpdateALayer3StaticRouteForASwitch(UpdateALayer3StaticRouteForASwitchRequest request, string serial, string staticRouteId);
        Task<Stream> DeleteALayer3StaticRouteForASwitch(string serial, string staticRouteId);
        Task<ReturnMulticastSettingsForANetworkResponse> ReturnMulticastSettingsForANetwork(string networkId);
        Task<UpdateMulticastSettingsForANetworkResponse> UpdateMulticastSettingsForANetwork(UpdateMulticastSettingsForANetworkRequest request, string networkId);
        Task<ReturnLayer3OSPFRoutingConfigurationResponse> ReturnLayer3OSPFRoutingConfiguration(string networkId);
        Task<UpdateLayer3OSPFRoutingConfigurationResponse> UpdateLayer3OSPFRoutingConfiguration(UpdateLayer3OSPFRoutingConfigurationRequest request, string networkId);
        Task<ReturnWarmSpareConfigurationForASwitchResponse> ReturnWarmSpareConfigurationForASwitch(string serial);
        Task<UpdateWarmSpareConfigurationForASwitchResponse> UpdateWarmSpareConfigurationForASwitch(UpdateWarmSpareConfigurationForASwitchRequest request, string serial);
        Task<ReturnTheAccessControlListsForAMSNetworkResponse> ReturnTheAccessControlListsForAMSNetwork(string networkId);
        Task<UpdateTheAccessControlListsForAMSNetworkResponse> UpdateTheAccessControlListsForAMSNetwork(UpdateTheAccessControlListsForAMSNetworkRequest request, string networkId);
        Task<ListTheAccessPoliciesForASwitchNetworkResponse> ListTheAccessPoliciesForASwitchNetwork(string networkId);
        Task<Stream> CreateAnAccessPolicyForASwitchNetwork(CreateAnAccessPolicyForASwitchNetworkRequest request, string networkId);
        Task<ReturnASpecificAccessPolicyForASwitchNetworkResponse> ReturnASpecificAccessPolicyForASwitchNetwork(string networkId, string accessPolicyNumber);
        Task<UpdateAnAccessPolicyForASwitchNetworkResponse> UpdateAnAccessPolicyForASwitchNetwork(UpdateAnAccessPolicyForASwitchNetworkRequest request, string networkId, string accessPolicyNumber);
        Task<Stream> DeleteAnAccessPolicyForASwitchNetwork(string networkId, string accessPolicyNumber);
        Task<ItchAlternateManagementInterfaceForTheNetworkResponse> ItchAlternateManagementInterfaceForTheNetwork(string networkId);
        Task<ItchAlternateManagementInterfaceForTheNetwork2Response> ItchAlternateManagementInterfaceForTheNetwork2(ItchAlternateManagementInterfaceForTheNetwork2Request request, string networkId);
        Task<VersSeenWithinTheSelectedTimeframeDefault1DayResponse> VersSeenWithinTheSelectedTimeframeDefault1Day(VersSeenWithinTheSelectedTimeframeDefault1DayParameters queryParameters, string networkId);
        Task<ReturnTheDHCPServerSettingsResponse> ReturnTheDHCPServerSettings(string networkId);
        Task<UpdateTheDHCPServerSettingsResponse> UpdateTheDHCPServerSettings(UpdateTheDHCPServerSettingsRequest request, string networkId);
        Task<ReturnTheDSCPToCoSMappingsResponse> ReturnTheDSCPToCoSMappings(string networkId);
        Task<UpdateTheDSCPToCoSMappingsResponse> UpdateTheDSCPToCoSMappings(UpdateTheDSCPToCoSMappingsRequest request, string networkId);
        Task<ListLinkAggregationGroupsResponse> ListLinkAggregationGroups(string networkId);
        Task<Stream> CreateALinkAggregationGroup(CreateALinkAggregationGroupRequest request, string networkId);
        Task<UpdateALinkAggregationGroupResponse> UpdateALinkAggregationGroup(UpdateALinkAggregationGroupRequest request, string networkId, string linkAggregationId);
        Task<Stream> SplitALinkAggregationGroupIntoSeparatePorts(string networkId, string linkAggregationId);
        Task<ReturnTheMTUConfigurationResponse> ReturnTheMTUConfiguration(string networkId);
        Task<UpdateTheMTUConfigurationResponse> UpdateTheMTUConfiguration(UpdateTheMTUConfigurationRequest request, string networkId);
        Task<ListSwitchPortSchedulesResponse> ListSwitchPortSchedules(string networkId);
        Task<Stream> AddASwitchPortSchedule(AddASwitchPortScheduleRequest request, string networkId);
        Task<Stream> DeleteASwitchPortSchedule(string networkId, string portScheduleId);
        Task<UpdateASwitchPortScheduleResponse> UpdateASwitchPortSchedule(UpdateASwitchPortScheduleRequest request, string networkId, string portScheduleId);
        Task<ListQualityOfServiceRulesResponse> ListQualityOfServiceRules(string networkId);
        Task<Stream> AddAQualityOfServiceRule(AddAQualityOfServiceRuleRequest request, string networkId);
        Task<ReturnAQualityOfServiceRuleResponse> ReturnAQualityOfServiceRule(string networkId, string qosRuleId);
        Task<Stream> DeleteAQualityOfServiceRule(string networkId, string qosRuleId);
        Task<UpdateAQualityOfServiceRuleResponse> UpdateAQualityOfServiceRule(UpdateAQualityOfServiceRuleRequest request, string networkId, string qosRuleId);
        Task<ReturnsTheSwitchNetworkSettingsResponse> ReturnsTheSwitchNetworkSettings(string networkId);
        Task<UpdateSwitchNetworkSettingsResponse> UpdateSwitchNetworkSettings(UpdateSwitchNetworkSettingsRequest request, string networkId);
        Task<ListTheSwitchStacksInANetworkResponse> ListTheSwitchStacksInANetwork(string networkId);
        Task<Stream> CreateAStack(CreateAStackRequest request, string networkId);
        Task<ShowASwitchStackResponse> ShowASwitchStack(string networkId, string switchStackId);
        Task<Stream> DeleteAStack(string networkId, string switchStackId);
        Task<AddASwitchToAStackResponse> AddASwitchToAStack(AddASwitchToAStackRequest request, string networkId, string switchStackId);
        Task<RemoveASwitchFromAStackResponse> RemoveASwitchFromAStack(RemoveASwitchFromAStackRequest request, string networkId, string switchStackId);
        Task<TheStormControlConfigurationForASwitchNetworkResponse> TheStormControlConfigurationForASwitchNetwork(string networkId);
        Task<TheStormControlConfigurationForASwitchNetwork2Response> TheStormControlConfigurationForASwitchNetwork2(TheStormControlConfigurationForASwitchNetwork2Request request, string networkId);
        Task<ReturnsSTPSettingsResponse> ReturnsSTPSettings(string networkId);
        Task<UpdatesSTPSettingsResponse> UpdatesSTPSettings(UpdatesSTPSettingsRequest request, string networkId);
        Task<TchProfilesForYourSwitchTemplateConfigurationResponse> TchProfilesForYourSwitchTemplateConfiguration(string organizationId, string configTemplateId);
        Task<NgsFromASourceSwitchToOneOrMoreTargetSwitchesResponse> NgsFromASourceSwitchToOneOrMoreTargetSwitches(NgsFromASourceSwitchToOneOrMoreTargetSwitchesRequest request, string organizationId);
        Task<CycleASetOfSwitchPortsResponse> CycleASetOfSwitchPorts(CycleASetOfSwitchPortsRequest request, string serial);
        Task<ReturnTheStatusForAllThePortsOfASwitchResponse> ReturnTheStatusForAllThePortsOfASwitch(ReturnTheStatusForAllThePortsOfASwitchParameters queryParameters, string serial);
        Task<UpdateTheBluetoothSettingsForAWirelessDeviceResponse> UpdateTheBluetoothSettingsForAWirelessDevice(UpdateTheBluetoothSettingsForAWirelessDeviceRequest request, string serial);
        Task<ReturnTheBluetoothSettingsForAWirelessDeviceResponse> ReturnTheBluetoothSettingsForAWirelessDevice(string serial);
        Task<LEBluetoothSettingsAMustBeEnabledOnTheNetworkResponse> LEBluetoothSettingsAMustBeEnabledOnTheNetwork(string networkId);
        Task<UpdateTheBluetoothSettingsForANetworkResponse> UpdateTheBluetoothSettingsForANetwork(UpdateTheBluetoothSettingsForANetworkRequest request, string networkId);
        Task<ReturnTheRadioSettingsOfADeviceResponse> ReturnTheRadioSettingsOfADevice(string serial);
        Task<UpdateTheRadioSettingsOfADeviceResponse> UpdateTheRadioSettingsOfADevice(UpdateTheRadioSettingsOfADeviceRequest request, string serial);
        Task<TeManagementInterfaceAndDevicesWithIPAssignedResponse> TeManagementInterfaceAndDevicesWithIPAssigned(string networkId);
        Task<AlternateManagementInterfaceAndDeviceStaticIPResponse> AlternateManagementInterfaceAndDeviceStaticIP(AlternateManagementInterfaceAndDeviceStaticIPRequest request, string networkId);
        Task<ReturnTheBillingSettingsOfThisNetworkResponse> ReturnTheBillingSettingsOfThisNetwork(string networkId);
        Task<UpdateTheBillingSettingsResponse> UpdateTheBillingSettings(UpdateTheBillingSettingsRequest request, string networkId);
        Task<ListRFProfilesForThisNetworkResponse> ListRFProfilesForThisNetwork(ListRFProfilesForThisNetworkParameters queryParameters, string networkId);
        Task<ReturnTheWirelessSettingsForANetworkResponse> ReturnTheWirelessSettingsForANetwork(string networkId);
        Task<UpdateTheWirelessSettingsForANetworkResponse> UpdateTheWirelessSettingsForANetwork(UpdateTheWirelessSettingsForANetworkRequest request, string networkId);
        Task<ListTheMRSSIDsInANetworkResponse> ListTheMRSSIDsInANetwork(string networkId);
        Task<ReturnASingleMRSSIDResponse> ReturnASingleMRSSID(string networkId, string number);
        Task<UpdateTheAttributesOfAnMRSSIDResponse> UpdateTheAttributesOfAnMRSSID(UpdateTheAttributesOfAnMRSSIDRequest request, string networkId, string number);
        Task<GatedConnectivityInfoForAGivenAPOnThisNetworkResponse> GatedConnectivityInfoForAGivenAPOnThisNetwork(GatedConnectivityInfoForAGivenAPOnThisNetworkParameters queryParameters, string serial);
        Task<AggregatedConnectivityInfoForThisNetworkResponse> AggregatedConnectivityInfoForThisNetwork(AggregatedConnectivityInfoForThisNetworkParameters queryParameters, string networkId);
        Task<AggregatedLatencyInfoForAGivenAPOnThisNetworkResponse> AggregatedLatencyInfoForAGivenAPOnThisNetwork(AggregatedLatencyInfoForAGivenAPOnThisNetworkParameters queryParameters, string serial);
        Task<AggregatedLatencyInfoForThisNetworkResponse> AggregatedLatencyInfoForThisNetwork(AggregatedLatencyInfoForThisNetworkParameters queryParameters, string networkId);
        Task<ReturnTheSSIDStatusesOfAnAccessPointResponse> ReturnTheSSIDStatusesOfAnAccessPoint(string serial);
        Task<ListAirMarshalScanResultsFromANetworkResponse> ListAirMarshalScanResultsFromANetwork(ListAirMarshalScanResultsFromANetworkParameters queryParameters, string networkId);
        Task<LUtilizationOverTimeForADeviceOrNetworkClientResponse> LUtilizationOverTimeForADeviceOrNetworkClient(LUtilizationOverTimeForADeviceOrNetworkClientParameters queryParameters, string networkId);
        Task<OuntsOverTimeForANetworkDeviceOrNetworkClientResponse> OuntsOverTimeForANetworkDeviceOrNetworkClient(OuntsOverTimeForANetworkDeviceOrNetworkClientParameters queryParameters, string networkId);
        Task<OnnectivityInfoForThisNetworkGroupedByClientsResponse> OnnectivityInfoForThisNetworkGroupedByClients(OnnectivityInfoForThisNetworkGroupedByClientsParameters queryParameters, string networkId);
        Task<DConnectivityInfoForAGivenClientOnThisNetworkResponse> DConnectivityInfoForAGivenClientOnThisNetwork(DConnectivityInfoForAGivenClientOnThisNetworkParameters queryParameters, string networkId, string clientId);
        Task<AtedLatencyInfoForThisNetworkGroupedByClientsResponse> AtedLatencyInfoForThisNetworkGroupedByClients(AtedLatencyInfoForThisNetworkGroupedByClientsParameters queryParameters, string networkId);
        Task<EgatedLatencyInfoForAGivenClientOnThisNetworkResponse> EgatedLatencyInfoForAGivenClientOnThisNetwork(EgatedLatencyInfoForAGivenClientOnThisNetworkParameters queryParameters, string networkId, string clientId);
        Task<TyEventsForAClientWithinANetworkInTheTimespanResponse> TyEventsForAClientWithinANetworkInTheTimespan(TyEventsForAClientWithinANetworkInTheTimespanParameters queryParameters, string networkId, string clientId);
        Task<ReturnTheLatencyHistoryForAClientResponse> ReturnTheLatencyHistoryForAClient(ReturnTheLatencyHistoryForAClientParameters queryParameters, string networkId, string clientId);
        Task<RatesOverTimeForANetworkDeviceOrNetworkClientResponse> RatesOverTimeForANetworkDeviceOrNetworkClient(RatesOverTimeForANetworkDeviceOrNetworkClientParameters queryParameters, string networkId);
        Task<EdConnectivityInfoForThisNetworkGroupedByNodeResponse> EdConnectivityInfoForThisNetworkGroupedByNode(EdConnectivityInfoForThisNetworkGroupedByNodeParameters queryParameters, string networkId);
        Task<RegatedLatencyInfoForThisNetworkGroupedByNodeResponse> RegatedLatencyInfoForThisNetworkGroupedByNode(RegatedLatencyInfoForThisNetworkGroupedByNodeParameters queryParameters, string networkId);
        Task<NnelUtilizationForAllBandsInANetworkSplitByAPResponse> NnelUtilizationForAllBandsInANetworkSplitByAP(NnelUtilizationForAllBandsInANetworkSplitByAPParameters queryParameters, string organizationId);
        Task<AcrossAllBandsForAllNetworksInTheOrganizationResponse> AcrossAllBandsForAllNetworksInTheOrganization(AcrossAllBandsForAllNetworksInTheOrganizationParameters queryParameters, string organizationId);
        Task<HannelUtilizationForAllBandsSegmentedByDeviceResponse> HannelUtilizationForAllBandsSegmentedByDevice(HannelUtilizationForAllBandsSegmentedByDeviceParameters queryParameters, string organizationId);
        Task<ESeriesOfAverageChannelUtilizationForAllBandsResponse> ESeriesOfAverageChannelUtilizationForAllBands(ESeriesOfAverageChannelUtilizationForAllBandsParameters queryParameters, string organizationId);
        Task<EndpointToSeePowerStatusForWirelessDevicesResponse> EndpointToSeePowerStatusForWirelessDevices(EndpointToSeePowerStatusForWirelessDevicesParameters queryParameters, string organizationId);
        Task<OnnectionEventsOnThisNetworkInAGivenTimeRangeResponse> OnnectionEventsOnThisNetworkInAGivenTimeRange(OnnectionEventsOnThisNetworkInAGivenTimeRangeParameters queryParameters, string networkId);
        Task<TencyOverTimeForANetworkDeviceOrNetworkClientResponse> TencyOverTimeForANetworkDeviceOrNetworkClient(TencyOverTimeForANetworkDeviceOrNetworkClientParameters queryParameters, string networkId);
        Task<ListWirelessMeshStatusesForRepeatersResponse> ListWirelessMeshStatusesForRepeaters(ListWirelessMeshStatusesForRepeatersParameters queryParameters, string networkId);
        Task<AlitySNRRSSIOverTimeForADeviceOrNetworkClientResponse> AlitySNRRSSIOverTimeForADeviceOrNetworkClient(AlitySNRRSSIOverTimeForADeviceOrNetworkClientParameters queryParameters, string networkId);
        Task<EturnAPUsageOverTimeForADeviceOrNetworkClientResponse> EturnAPUsageOverTimeForADeviceOrNetworkClient(EturnAPUsageOverTimeForADeviceOrNetworkClientParameters queryParameters, string networkId);
        Task<Stream> CreatesNewRFProfileForThisNetwork(CreatesNewRFProfileForThisNetworkRequest request, string networkId);
        Task<UpdatesSpecifiedRFProfileForThisNetworkResponse> UpdatesSpecifiedRFProfileForThisNetwork(UpdatesSpecifiedRFProfileForThisNetworkRequest request, string networkId, string rfProfileId);
        Task<Stream> DeleteARFProfile(string networkId, string rfProfileId);
        Task<ReturnARFProfileResponse> ReturnARFProfile(string networkId, string rfProfileId);
        Task<Stream> CreatesNewRFProfileForThisNetwork2(CreatesNewRFProfileForThisNetwork2Request request, string networkId);
        Task<UpdatesSpecifiedRFProfileForThisNetwork2Response> UpdatesSpecifiedRFProfileForThisNetwork2(UpdatesSpecifiedRFProfileForThisNetwork2Request request, string networkId, string rfProfileId);
        Task<Stream> DeleteARFProfile2(string networkId, string rfProfileId);
        Task<ReturnARFProfile2Response> ReturnARFProfile2(string networkId, string rfProfileId);
        Task<GetApplicationHealthByTimeResponse> GetApplicationHealthByTime(GetApplicationHealthByTimeParameters queryParameters, string networkId, string applicationId);
        Task<ListAllInsightTrackedApplicationsResponse> ListAllInsightTrackedApplications(string organizationId);
        Task<StTheMonitoredMediaServersForThisOrganizationResponse> StTheMonitoredMediaServersForThisOrganization(string organizationId);
        Task<Stream> DAMediaServerToBeMonitoredForThisOrganization(DAMediaServerToBeMonitoredForThisOrganizationRequest request, string organizationId);
        Task<EturnAMonitoredMediaServerForThisOrganizationResponse> EturnAMonitoredMediaServerForThisOrganization(string organizationId, string monitoredMediaServerId);
        Task<PdateAMonitoredMediaServerForThisOrganizationResponse> PdateAMonitoredMediaServerForThisOrganization(PdateAMonitoredMediaServerForThisOrganizationRequest request, string organizationId, string monitoredMediaServerId);
        Task<Stream> LeteAMonitoredMediaServerFromThisOrganization(string organizationId, string monitoredMediaServerId);
        Task<Stream> BypassActivationLockAttempt(BypassActivationLockAttemptRequest request, string networkId);
        Task<BypassActivationLockAttemptStatusResponse> BypassActivationLockAttemptStatus(string networkId, string attemptId);
        Task<SMNetworkWithVariousSpecifiedFieldsAndFiltersResponse> SMNetworkWithVariousSpecifiedFieldsAndFilters(SMNetworkWithVariousSpecifiedFieldsAndFiltersParameters queryParameters, string networkId);
        Task<ForceCheckInASetOfDevicesResponse> ForceCheckInASetOfDevices(ForceCheckInASetOfDevicesRequest request, string networkId);
        Task<LockASetOfDevicesResponse> LockASetOfDevices(LockASetOfDevicesRequest request, string networkId);
        Task<AddDeleteOrUpdateTheTagsOfASetOfDevicesResponse> AddDeleteOrUpdateTheTagsOfASetOfDevices(AddDeleteOrUpdateTheTagsOfASetOfDevicesRequest request, string networkId);
        Task<MoveASetOfDevicesToANewNetworkResponse> MoveASetOfDevicesToANewNetwork(MoveASetOfDevicesToANewNetworkRequest request, string networkId);
        Task<WipeADeviceResponse> WipeADevice(WipeADeviceRequest request, string networkId);
        Task<EmptyResponse> RefreshTheDetailsOfADevice(string networkId, string deviceId);
        Task<UnenrollADeviceResponse> UnenrollADevice(string networkId, string deviceId);
        Task<ListAllProfilesInANetworkResponse> ListAllProfilesInANetwork(string networkId);
        Task<ListTheTargetGroupsInThisNetworkResponse> ListTheTargetGroupsInThisNetwork(ListTheTargetGroupsInThisNetworkParameters queryParameters, string networkId);
        Task<Stream> AddATargetGroup(AddATargetGroupRequest request, string networkId);
        Task<ReturnATargetGroupResponse> ReturnATargetGroup(ReturnATargetGroupParameters queryParameters, string networkId, string targetGroupId);
        Task<UpdateATargetGroupResponse> UpdateATargetGroup(UpdateATargetGroupRequest request, string networkId, string targetGroupId);
        Task<Stream> DeleteATargetGroupFromANetwork(string networkId, string targetGroupId);
        Task<ListTrustedAccessConfigsResponse> ListTrustedAccessConfigs(ListTrustedAccessConfigsParameters queryParameters, string networkId);
        Task<ErAccessDevicesAndItsTrustedAccessConnectionsResponse> ErAccessDevicesAndItsTrustedAccessConnections(ErAccessDevicesAndItsTrustedAccessConnectionsParameters queryParameters, string networkId);
        Task<Stream> DeleteAUserAccessDevice(string networkId, string userAccessDeviceId);
        Task<SMNetworkWithVariousSpecifiedFieldsAndFilters2Response> SMNetworkWithVariousSpecifiedFieldsAndFilters2(SMNetworkWithVariousSpecifiedFieldsAndFilters2Parameters queryParameters, string networkId);
        Task<GetTheOrganizationsAPNSCertificateResponse> GetTheOrganizationsAPNSCertificate(string organizationId);
        Task<ListTheVPPAccountsInTheOrganizationResponse> ListTheVPPAccountsInTheOrganization(string organizationId);
        Task<TheUnparsedTokenOfTheVPPAccountWithTheGivenIDResponse> TheUnparsedTokenOfTheVPPAccountWithTheGivenID(string organizationId, string vppAccountId);
        Task<ReturnTheClientsDailyCellularDataUsageHistoryResponse> ReturnTheClientsDailyCellularDataUsageHistory(string networkId, string deviceId);
        Task<HetherADeviceIsRegularlyCheckingInToDashboardResponse> HetherADeviceIsRegularlyCheckingInToDashboard(HetherADeviceIsRegularlyCheckingInToDashboardParameters queryParameters, string networkId, string deviceId);
        Task<AgerNetworkConnectionDetailsForDesktopDevicesResponse> AgerNetworkConnectionDetailsForDesktopDevices(AgerNetworkConnectionDetailsForDesktopDevicesParameters queryParameters, string networkId, string deviceId);
        Task<LRecordsOfCommandsSentToSystemsManagerDevicesResponse> LRecordsOfCommandsSentToSystemsManagerDevices(LRecordsOfCommandsSentToSystemsManagerDevicesParameters queryParameters, string networkId, string deviceId);
        Task<SSystemsManagerClientMetricsForDesktopDevicesResponse> SSystemsManagerClientMetricsForDesktopDevices(SSystemsManagerClientMetricsForDesktopDevicesParameters queryParameters, string networkId, string deviceId);
        Task<ListTheLicensesInACotermOrganizationResponse> ListTheLicensesInACotermOrganization(ListTheLicensesInACotermOrganizationParameters queryParameters, string organizationId);
        Task<VesALicenseToADifferentOrganizationCotermOnlyResponse> VesALicenseToADifferentOrganizationCotermOnly(VesALicenseToADifferentOrganizationCotermOnlyRequest request, string organizationId);
        Task<ReturnASingleDeviceResponse> ReturnASingleDevice(string serial);
        Task<UpdateTheAttributesOfADeviceResponse> UpdateTheAttributesOfADevice(UpdateTheAttributesOfADeviceRequest request, string serial);
        Task<Stream> BlinkTheLEDsOnADevice(BlinkTheLEDsOnADeviceRequest request, string serial);
        Task<Stream> RebootADevice(string serial);
        Task<IstTheClientsOfADeviceUpToAMaximumOfAMonthAgoResponse> IstTheClientsOfADeviceUpToAMaximumOfAMonthAgo(IstTheClientsOfADeviceUpToAMaximumOfAMonthAgoParameters queryParameters, string serial);
        Task<ListLLDPAndCDPInformationForADeviceResponse> ListLLDPAndCDPInformationForADevice(string serial);
        Task<DputInKilobitsPerSecondForAWiredNetworkDeviceResponse> DputInKilobitsPerSecondForAWiredNetworkDevice(DputInKilobitsPerSecondForAWiredNetworkDeviceParameters queryParameters, string serial);
        Task<BindANetworkToATemplateResponse> BindANetworkToATemplate(BindANetworkToATemplateRequest request, string networkId);
        Task<Stream> DeleteANetwork(string networkId);
        Task<ReturnANetworkResponse> ReturnANetwork(string networkId);
        Task<WorkIntoIndividualNetworksForEachTypeOfDeviceResponse> WorkIntoIndividualNetworksForEachTypeOfDevice(string networkId);
        Task<UnbindANetworkFromATemplateResponse> UnbindANetworkFromATemplate(UnbindANetworkFromATemplateRequest request, string networkId);
        Task<UpdateANetworkResponse> UpdateANetwork(UpdateANetworkRequest request, string networkId);
        Task<ReturnTheAlertHistoryForThisNetworkResponse> ReturnTheAlertHistoryForThisNetwork(ReturnTheAlertHistoryForThisNetworkParameters queryParameters, string networkId);
        Task<ListTheBluetoothClientsSeenByAPsInThisNetworkResponse> ListTheBluetoothClientsSeenByAPsInThisNetwork(ListTheBluetoothClientsSeenByAPsInThisNetworkParameters queryParameters, string networkId);
        Task<ReturnABluetoothClientResponse> ReturnABluetoothClient(ReturnABluetoothClientParameters queryParameters, string networkId, string bluetoothClientId);
        Task<HeClientsThatHaveUsedThisNetworkInTheTimespanResponse> HeClientsThatHaveUsedThisNetworkInTheTimespan(HeClientsThatHaveUsedThisNetworkInTheTimespanParameters queryParameters, string networkId);
        Task<TurnTheClientAssociatedWithTheGivenIdentifierResponse> TurnTheClientAssociatedWithTheGivenIdentifier(string networkId, string clientId);
        Task<ListTheEventsForTheNetworkResponse> ListTheEventsForTheNetwork(ListTheEventsForTheNetworkParameters queryParameters, string networkId);
        Task<ElUtilizationOverEachRadioForAllAPsInANetworkResponse> ElUtilizationOverEachRadioForAllAPsInANetwork(ElUtilizationOverEachRadioForAllAPsInANetworkParameters queryParameters, string networkId);
        Task<ListTheSplashLoginAttemptsForANetworkResponse> ListTheSplashLoginAttemptsForANetwork(ListTheSplashLoginAttemptsForANetworkParameters queryParameters, string networkId);
        Task<RAllDiscoveredDevicesAndConnectionsInANetworkResponse> RAllDiscoveredDevicesAndConnectionsInANetwork(string networkId);
        Task<ReturnTheTrafficAnalysisDataForThisNetworkResponse> ReturnTheTrafficAnalysisDataForThisNetwork(ReturnTheTrafficAnalysisDataForThisNetworkParameters queryParameters, string networkId);
        Task<FDevicesLicensesAndOrOrdersIntoAnOrganizationResponse> FDevicesLicensesAndOrOrdersIntoAnOrganization(FDevicesLicensesAndOrOrdersIntoAnOrganizationRequest request, string organizationId);
        Task<Stream> CreateANewOrganization(CreateANewOrganizationRequest request);
        Task<Stream> OrganizationByCloningTheAddressedOrganization(OrganizationByCloningTheAddressedOrganizationRequest request, string organizationId);
        Task<Stream> DeleteAnOrganization(string organizationId);
        Task<IstTheOrganizationsThatTheUserHasPrivilegesOnResponse> IstTheOrganizationsThatTheUserHasPrivilegesOn();
        Task<ReturnAnOrganizationResponse> ReturnAnOrganization(string organizationId);
        Task<UpdateAnOrganizationResponse> UpdateAnOrganization(UpdateAnOrganizationRequest request, string organizationId);
        Task<IvePolicyAggregateStatisticsForAnOrganizationResponse> IvePolicyAggregateStatisticsForAnOrganization(string organizationId);
        Task<ListTheAPIRequestsMadeByAnOrganizationResponse> ListTheAPIRequestsMadeByAnOrganization(ListTheAPIRequestsMadeByAnOrganizationParameters queryParameters, string organizationId);
        Task<TsInTheGivenOrganizationWithinAGivenTimeRangeResponse> TsInTheGivenOrganizationWithinAGivenTimeRange(TsInTheGivenOrganizationWithinAGivenTimeRangeParameters queryParameters, string organizationId);
        Task<ClientDataUsageInMbAcrossTheGivenOrganizationResponse> ClientDataUsageInMbAcrossTheGivenOrganization(ClientDataUsageInMbAcrossTheGivenOrganizationParameters queryParameters, string organizationId);
        Task<ViewTheChangeLogForYourOrganizationResponse> ViewTheChangeLogForYourOrganization(ViewTheChangeLogForYourOrganizationParameters queryParameters, string organizationId);
        Task<LabilityInformationForDevicesInAnOrganizationResponse> LabilityInformationForDevicesInAnOrganization(LabilityInformationForDevicesInAnOrganizationParameters queryParameters, string organizationId);
        Task<ErStatusInformationForDevicesInAnOrganizationResponse> ErStatusInformationForDevicesInAnOrganization(ErStatusInformationForDevicesInAnOrganizationParameters queryParameters, string organizationId);
        Task<StatusesInformationForDevicesInAnOrganizationResponse> StatusesInformationForDevicesInAnOrganization(StatusesInformationForDevicesInAnOrganizationParameters queryParameters, string organizationId);
        Task<TheStatusOfEveryMerakiDeviceInTheOrganizationResponse> TheStatusOfEveryMerakiDeviceInTheOrganization(TheStatusOfEveryMerakiDeviceInTheOrganizationParameters queryParameters, string organizationId);
        Task<RentUplinkAddressesForDevicesInAnOrganizationResponse> RentUplinkAddressesForDevicesInAnOrganization(RentUplinkAddressesForDevicesInAnOrganizationParameters queryParameters, string organizationId);
        Task<EryMXInTheOrganizationFromAtLatest2MinutesAgoResponse> EryMXInTheOrganizationFromAtLatest2MinutesAgo(EryMXInTheOrganizationFromAtLatest2MinutesAgoParameters queryParameters, string organizationId);
        Task<NAnOverviewOfTheLicenseStateForAnOrganizationResponse> NAnOverviewOfTheLicenseStateForAnOrganization(string organizationId);
        Task<AtionOfTheOrganizationsAPIDocumentationInJSONResponse> AtionOfTheOrganizationsAPIDocumentationInJSON(AtionOfTheOrganizationsAPIDocumentationInJSONParameters queryParameters, string organizationId);
        Task<PliancesSortedByUtilizationOverGivenTimeRangeResponse> PliancesSortedByUtilizationOverGivenTimeRange(PliancesSortedByUtilizationOverGivenTimeRangeParameters queryParameters, string organizationId);
        Task<Top10ClientsByDataUsageInMbOverGivenTimeRangeResponse> Top10ClientsByDataUsageInMbOverGivenTimeRange(Top10ClientsByDataUsageInMbOverGivenTimeRangeParameters queryParameters, string organizationId);
        Task<GeInMbOverGivenTimeRangeGroupedByManufacturerResponse> GeInMbOverGivenTimeRangeGroupedByManufacturer(GeInMbOverGivenTimeRangeGroupedByManufacturerParameters queryParameters, string organizationId);
        Task<P10DevicesSortedByDataUsageOverGivenTimeRangeResponse> P10DevicesSortedByDataUsageOverGivenTimeRange(P10DevicesSortedByDataUsageOverGivenTimeRangeParameters queryParameters, string organizationId);
        Task<ViceModelsSortedByDataUsageOverGivenTimeRangeResponse> ViceModelsSortedByDataUsageOverGivenTimeRange(ViceModelsSortedByDataUsageOverGivenTimeRangeParameters queryParameters, string organizationId);
        Task<AtionsTop10SsidsByDataUsageOverGivenTimeRangeResponse> AtionsTop10SsidsByDataUsageOverGivenTimeRange(AtionsTop10SsidsByDataUsageOverGivenTimeRangeParameters queryParameters, string organizationId);
        Task<STop10SwitchesByEnergyUsageOverGivenTimeRangeResponse> STop10SwitchesByEnergyUsageOverGivenTimeRange(STop10SwitchesByEnergyUsageOverGivenTimeRangeParameters queryParameters, string organizationId);
        Task<YMerakiMXMGAndZSeriesDevicesInTheOrganizationResponse> YMerakiMXMGAndZSeriesDevicesInTheOrganization(YMerakiMXMGAndZSeriesDevicesInTheOrganizationParameters queryParameters, string organizationId);
        Task<OfAlertTypesToBeUsedWithManagingWebhookAlertsResponse> OfAlertTypesToBeUsedWithManagingWebhookAlerts(OfAlertTypesToBeUsedWithManagingWebhookAlertsParameters queryParameters, string organizationId);
        Task<ReturnTheLogOfWebhookPOSTsSentResponse> ReturnTheLogOfWebhookPOSTsSent(ReturnTheLogOfWebhookPOSTsSentParameters queryParameters, string organizationId);
    }
}