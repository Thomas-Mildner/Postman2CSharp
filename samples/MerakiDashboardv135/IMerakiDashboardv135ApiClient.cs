using System.IO;
using System.Threading.Tasks;
namespace MerakiDashboardv135
{
    public interface IMerakiDashboardv135ApiClient
    {
        Task<ListTheOrganizationsResponse> ListTheOrganizations();
        Task<ListTheNetworksInAnOrganizationResponse> ListTheNetworksInAnOrganization(ListTheNetworksInAnOrganizationParameters queryParameters, string organizationId);
        Task<ListTheDevicesInAnOrganizationResponse> ListTheDevicesInAnOrganization(ListTheDevicesInAnOrganizationParameters queryParameters, string organizationId);
        Task<ListTheClientsInANetworkResponse> ListTheClientsInANetwork(ListTheClientsInANetworkParameters queryParameters, string networkId);
        Task<ReturnsTheIdentityOfTheCurrentUserResponse> ReturnsTheIdentityOfTheCurrentUser();
        Task<ReturnTheDHCPSubnetInformationForAnApplianceResponse> ReturnTheDHCPSubnetInformationForAnAppliance(string serial);
        Task<ReturnThePerformanceScoreForASingleMXResponse> ReturnThePerformanceScoreForASingleMX(string serial);
        Task<ReturnCurrentDelegatedIPv6PrefixesOnAnApplianceResponse> ReturnCurrentDelegatedIPv6PrefixesOnAnAppliance(string serial);
        Task<ListTheSecurityEventsForAClientResponse> ListTheSecurityEventsForAClient(ListTheSecurityEventsForAClientParameters queryParameters, string networkId, string clientId);
        Task<ListTheSecurityEventsForAClientResponse> ListTheSecurityEventsForANetwork(ListTheSecurityEventsForANetworkParameters queryParameters, string networkId);
        Task<ListTheSecurityEventsForAClientResponse> ListTheSecurityEventsForAnOrganization(ListTheSecurityEventsForAnOrganizationParameters queryParameters, string organizationId);
        Task<GetTheSentAndReceivedBytesForEachUplinkOfANetworkResponse> GetTheSentAndReceivedBytesForEachUplinkOfANetwork(GetTheSentAndReceivedBytesForEachUplinkOfANetworkParameters queryParameters, string networkId);
        Task<EveryMerakiMXAndZSeriesAppliancesInTheOrganizationResponse> EveryMerakiMXAndZSeriesAppliancesInTheOrganization(EveryMerakiMXAndZSeriesAppliancesInTheOrganizationParameters queryParameters, string organizationId);
        Task<REachUplinkOfAllMXAndZNetworksWithinAnOrganizationResponse> REachUplinkOfAllMXAndZNetworksWithinAnOrganization(REachUplinkOfAllMXAndZNetworksWithinAnOrganizationParameters queryParameters, string organizationId);
        Task<ShowVPNHistoryStatForNetworksInAnOrganizationResponse> ShowVPNHistoryStatForNetworksInAnOrganization(ShowVPNHistoryStatForNetworksInAnOrganizationParameters queryParameters, string organizationId);
        Task<ShowVPNStatusForNetworksInAnOrganizationResponse> ShowVPNStatusForNetworksInAnOrganization(ShowVPNStatusForNetworksInAnOrganizationParameters queryParameters, string organizationId);
        Task<ReturnTheRadioSettingsOfAnApplianceResponse> ReturnTheRadioSettingsOfAnAppliance(string serial);
        Task<ReturnTheRadioSettingsOfAnApplianceResponse> UpdateTheRadioSettingsOfAnAppliance(ReturnTheRadioSettingsOfAnApplianceResponse request, string serial);
        Task<ReturnTheUplinkSettingsForAnMXApplianceResponse> ReturnTheUplinkSettingsForAnMXAppliance(string serial);
        Task<ReturnTheUplinkSettingsForAnMXApplianceResponse> UpdateTheUplinkSettingsForAnMXAppliance(ReturnTheUplinkSettingsForAnMXApplianceResponse request, string serial);
        Task<GenerateANewVMXAuthenticationTokenResponse> GenerateANewVMXAuthenticationToken(string serial);
        Task<RnTheConnectivityTestingDestinationsForAnMXNetworkResponse> RnTheConnectivityTestingDestinationsForAnMXNetwork(string networkId);
        Task<RnTheConnectivityTestingDestinationsForAnMXNetworkResponse> TeTheConnectivityTestingDestinationsForAnMXNetwork(RnTheConnectivityTestingDestinationsForAnMXNetworkResponse request, string networkId);
        Task<ReturnTheContentFilteringSettingsForAnMXNetworkResponse> ReturnTheContentFilteringSettingsForAnMXNetwork(string networkId);
        Task<ReturnTheContentFilteringSettingsForAnMXNetworkResponse> UpdateTheContentFilteringSettingsForAnMXNetwork(ReturnTheContentFilteringSettingsForAnMXNetworkResponse request, string networkId);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> ReturnTheCellularFirewallRulesForAnMXNetwork(string networkId);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> UpdateTheCellularFirewallRulesOfAnMXNetwork(ReturnTheCellularFirewallRulesForAnMXNetworkResponse request, string networkId);
        Task<ListTheApplianceServicesAndTheirAccessibilityRulesResponse> ListTheApplianceServicesAndTheirAccessibilityRules(string networkId);
        Task<ListTheApplianceServicesAndTheirAccessibilityRulesResponse> CcessibilitySettingsOfTheGivenServiceICMPWebOrSNMP(string networkId, string service);
        Task<ListTheApplianceServicesAndTheirAccessibilityRulesResponse> CessibilitySettingsForTheGivenServiceICMPWebOrSNMP(ListTheApplianceServicesAndTheirAccessibilityRulesResponse request, string networkId, string service);
        Task<Rules> EturnTheInboundCellularFirewallRulesForAnMXNetwork(string networkId);
        Task<Rules> UpdateTheInboundCellularFirewallRulesOfAnMXNetwork(ReturnTheCellularFirewallRulesForAnMXNetworkResponse request, string networkId);
        Task<ReturnTheInboundFirewallRulesForAnMXNetworkResponse> ReturnTheInboundFirewallRulesForAnMXNetwork(string networkId);
        Task<ReturnTheInboundFirewallRulesForAnMXNetworkResponse> UpdateTheInboundFirewallRulesOfAnMXNetwork(UpdateTheInboundFirewallRulesOfAnMXNetworkRequest request, string networkId);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> ReturnTheL3FirewallRulesForAnMXNetwork(string networkId);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> UpdateTheL3FirewallRulesOfAnMXNetwork(UpdateTheInboundFirewallRulesOfAnMXNetworkRequest request, string networkId);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> ListTheMXL7FirewallRulesForAnMXNetwork(string networkId);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> UpdateTheMXL7FirewallRulesForAnMXNetwork(ReturnTheCellularFirewallRulesForAnMXNetworkResponse request, string networkId);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> ReturnThe1ManyNATMappingRulesForAnMXNetwork(string networkId);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> SetThe1ManyNATMappingRulesForAnMXNetwork(ReturnTheCellularFirewallRulesForAnMXNetworkResponse request, string networkId);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> ReturnThe11NATMappingRulesForAnMXNetwork(string networkId);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> SetThe11NATMappingRulesForAnMXNetwork(ReturnTheCellularFirewallRulesForAnMXNetworkResponse request, string networkId);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> ReturnThePortForwardingRulesForAnMXNetwork(string networkId);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> UpdateThePortForwardingRulesForAnMXNetwork(ReturnTheCellularFirewallRulesForAnMXNetworkResponse request, string networkId);
        Task<ReturnTheFirewallSettingsForThisNetworkResponse> ReturnTheFirewallSettingsForThisNetwork(string networkId);
        Task<ReturnTheFirewallSettingsForThisNetworkResponse> UpdateTheFirewallSettingsForThisNetwork(ReturnTheFirewallSettingsForThisNetworkResponse request, string networkId);
        Task<ListPerPortVLANSettingsForAllPortsOfAMXResponse> ListPerPortVLANSettingsForAllPortsOfAMX(string networkId);
        Task<ListPerPortVLANSettingsForAllPortsOfAMXResponse> ReturnPerPortVLANSettingsForASingleMXPort(string networkId, string portId);
        Task<ListPerPortVLANSettingsForAllPortsOfAMXResponse> UpdateThePerPortVLANSettingsForASingleMXPort(UpdateThePerPortVLANSettingsForASingleMXPortRequest request, string networkId, string portId);
        Task<ListStaticDelegatedPrefixesForANetworkResponse> ListStaticDelegatedPrefixesForANetwork(string networkId);
        Task<ListStaticDelegatedPrefixesForANetworkResponse> AddAStaticDelegatedPrefixFromANetwork(ReturnCurrentDelegatedIPv6PrefixesOnAnApplianceResponse request, string networkId);
        Task<ListStaticDelegatedPrefixesForANetworkResponse> ReturnAStaticDelegatedPrefixFromANetwork(string networkId, string staticDelegatedPrefixId);
        Task<ListStaticDelegatedPrefixesForANetworkResponse> UpdateAStaticDelegatedPrefixFromANetwork(ReturnCurrentDelegatedIPv6PrefixesOnAnApplianceResponse request, string networkId, string staticDelegatedPrefixId);
        Task<EmptyResponse> DeleteAStaticDelegatedPrefixFromANetwork(string networkId, string staticDelegatedPrefixId);
        Task<ListTheRFProfilesForThisNetworkResponse> ListTheRFProfilesForThisNetwork(string networkId);
        Task<ReturnsAllSupportedIntrusionSettingsForAnMXNetworkResponse> ReturnsAllSupportedIntrusionSettingsForAnMXNetwork(string networkId);
        Task<ReturnsAllSupportedIntrusionSettingsForAnMXNetworkResponse> SetTheSupportedIntrusionSettingsForAnMXNetwork(ReturnsAllSupportedIntrusionSettingsForAnMXNetworkResponse request, string networkId);
        Task<UrnsAllSupportedIntrusionSettingsForAnOrganizationResponse> UrnsAllSupportedIntrusionSettingsForAnOrganization(string organizationId);
        Task<UrnsAllSupportedIntrusionSettingsForAnOrganizationResponse> SetsSupportedIntrusionSettingsForAnOrganization(UrnsAllSupportedIntrusionSettingsForAnOrganizationResponse request, string organizationId);
        Task<ReturnsAllSupportedMalwareSettingsForAnMXNetworkResponse> ReturnsAllSupportedMalwareSettingsForAnMXNetwork(string networkId);
        Task<ReturnsAllSupportedMalwareSettingsForAnMXNetworkResponse> SetTheSupportedMalwareSettingsForAnMXNetwork(ReturnsAllSupportedMalwareSettingsForAnMXNetworkResponse request, string networkId);
        Task<ReturnTheApplianceSettingsForANetworkResponse> ReturnTheApplianceSettingsForANetwork(string networkId);
        Task<ReturnTheApplianceSettingsForANetworkResponse> UpdateTheApplianceSettingsForANetwork(ReturnTheApplianceSettingsForANetworkResponse request, string networkId);
        Task<ReturnSingleLANConfigurationResponse> ReturnSingleLANConfiguration(string networkId);
        Task<ReturnSingleLANConfigurationResponse> UpdateSingleLANConfiguration(ReturnSingleLANConfigurationResponse request, string networkId);
        Task<ListTheMXSSIDsInANetworkResponse> ListTheMXSSIDsInANetwork(string networkId);
        Task<ListTheMXSSIDsInANetworkResponse> ReturnASingleMXSSID(string networkId, string number);
        Task<ListTheMXSSIDsInANetworkResponse> UpdateTheAttributesOfAnMXSSID(UpdateTheAttributesOfAnMXSSIDRequest request, string networkId, string number);
        Task<ListTheStaticRoutesForAnMXOrTeleworkerNetworkResponse> ListTheStaticRoutesForAnMXOrTeleworkerNetwork(string networkId);
        Task<AddAStaticRouteForAnMXOrTeleworkerNetworkResponse> AddAStaticRouteForAnMXOrTeleworkerNetwork(AddAStaticRouteForAnMXOrTeleworkerNetworkRequest request, string networkId);
        Task<ListTheStaticRoutesForAnMXOrTeleworkerNetworkResponse> ReturnAStaticRouteForAnMXOrTeleworkerNetwork(string networkId, string staticRouteId);
        Task<ListTheStaticRoutesForAnMXOrTeleworkerNetworkResponse> UpdateAStaticRouteForAnMXOrTeleworkerNetwork(UpdateAStaticRouteForAnMXOrTeleworkerNetworkRequest request, string networkId, string staticRouteId);
        Task<EmptyResponse> DeleteAStaticRouteFromAnMXOrTeleworkerNetwork(string networkId, string staticRouteId);
        Task<DisplayTheTrafficShapingSettingsForAnMXNetworkResponse> DisplayTheTrafficShapingSettingsForAnMXNetwork(string networkId);
        Task<DisplayTheTrafficShapingSettingsForAnMXNetworkResponse> UpdateTheTrafficShapingSettingsForAnMXNetwork(DisplayTheTrafficShapingSettingsForAnMXNetworkResponse request, string networkId);
        Task<ListTheVLANsForAnMXNetworkResponse> ListTheVLANsForAnMXNetwork(string networkId);
        Task<ListTheVLANsForAnMXNetworkResponse> AddAVLAN(AddAVLANRequest request, string networkId);
        Task<ListTheVLANsForAnMXNetworkResponse> ReturnAVLAN(string networkId, string vlanId);
        Task<ListTheVLANsForAnMXNetworkResponse> UpdateAVLAN(UpdateAVLANRequest request, string networkId, string vlanId);
        Task<EmptyResponse> DeleteAVLANFromANetwork(string networkId, string vlanId);
        Task<ReturnAHubBGPConfigurationResponse> ReturnAHubBGPConfiguration(string networkId);
        Task<ReturnAHubBGPConfigurationResponse> UpdateAHubBGPConfiguration(UpdateAHubBGPConfigurationRequest request, string networkId);
        Task<ReturnTheSiteToSiteVPNSettingsOfANetworkResponse> ReturnTheSiteToSiteVPNSettingsOfANetwork(string networkId);
        Task<ReturnTheSiteToSiteVPNSettingsOfANetworkResponse> UpdateTheSiteToSiteVPNSettingsOfANetwork(ReturnTheSiteToSiteVPNSettingsOfANetworkResponse request, string networkId);
        Task<ReturnTheThirdPartyVPNPeersForAnOrganizationResponse> ReturnTheThirdPartyVPNPeersForAnOrganization(string organizationId);
        Task<ReturnTheThirdPartyVPNPeersForAnOrganizationResponse> UpdateTheThirdPartyVPNPeersForAnOrganization(ReturnTheThirdPartyVPNPeersForAnOrganizationResponse request, string organizationId);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> UrnTheFirewallRulesForAnOrganizationsSiteToSiteVPN(string organizationId);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> DateTheFirewallRulesOfAnOrganizationsSiteToSiteVPN(UpdateTheInboundFirewallRulesOfAnMXNetworkRequest request, string organizationId);
        Task<ReturnMXWarmSpareSettingsResponse> ReturnMXWarmSpareSettings(string networkId);
        Task<ReturnMXWarmSpareSettingsResponse> UpdateMXWarmSpareSettings(UpdateMXWarmSpareSettingsRequest request, string networkId);
        Task<ReturnMXWarmSpareSettingsResponse> SwapMXPrimaryAndWarmSpareAppliances(string networkId);
        Task<EraSeesAtTheSpecifiedTimeAndReturnALinkToThatImageResponse> EraSeesAtTheSpecifiedTimeAndReturnALinkToThatImage(EraSeesAtTheSpecifiedTimeAndReturnALinkToThatImageRequest request, string serial);
        Task<ReturnCustomAnalyticsSettingsForACameraResponse> ReturnCustomAnalyticsSettingsForACamera(string serial);
        Task<ReturnCustomAnalyticsSettingsForACameraResponse> UpdateCustomAnalyticsSettingsForACamera(UpdateCustomAnalyticsSettingsForACameraRequest request, string serial);
        Task<EturnsQualityAndRetentionSettingsForTheGivenCameraResponse> EturnsQualityAndRetentionSettingsForTheGivenCamera(string serial);
        Task<EturnsQualityAndRetentionSettingsForTheGivenCameraResponse> UpdateQualityAndRetentionSettingsForTheGivenCamera(UpdateQualityAndRetentionSettingsForTheGivenCameraRequest request, string serial);
        Task<ReturnsSenseSettingsForAGivenCameraResponse> ReturnsSenseSettingsForAGivenCamera(string serial);
        Task<ReturnsSenseSettingsForAGivenCameraResponse> UpdateSenseSettingsForTheGivenCamera(UpdateSenseSettingsForTheGivenCameraRequest request, string serial);
        Task<ReturnsVideoSettingsForTheGivenCameraResponse> ReturnsVideoSettingsForTheGivenCamera(string serial);
        Task<ReturnsVideoSettingsForTheGivenCameraResponse> UpdateVideoSettingsForTheGivenCamera(UpdateVideoSettingsForTheGivenCameraRequest request, string serial);
        Task<ListTheOrganizationsResponse> ReturnsVideoLinkToTheSpecifiedCamera(ReturnsVideoLinkToTheSpecifiedCameraParameters queryParameters, string serial);
        Task<ReturnsWirelessProfileAssignedToTheGivenCameraResponse> ReturnsWirelessProfileAssignedToTheGivenCamera(string serial);
        Task<ReturnsWirelessProfileAssignedToTheGivenCameraResponse> AssignWirelessProfilesToTheGivenCamera(ReturnsWirelessProfileAssignedToTheGivenCameraResponse request, string serial);
        Task<CreatesANewCameraWirelessProfileForThisNetworkResponse> CreatesANewCameraWirelessProfileForThisNetwork(CreatesANewCameraWirelessProfileForThisNetworkRequest request, string networkId);
        Task<CreatesANewCameraWirelessProfileForThisNetworkResponse> ListTheCameraWirelessProfilesForThisNetwork(string networkId);
        Task<CreatesANewCameraWirelessProfileForThisNetworkResponse> RetrieveASingleCameraWirelessProfile(string networkId, string wirelessProfileId);
        Task<CreatesANewCameraWirelessProfileForThisNetworkResponse> UpdateAnExistingCameraWirelessProfileInThisNetwork(CreatesANewCameraWirelessProfileForThisNetworkRequest request, string networkId, string wirelessProfileId);
        Task<EmptyResponse> EleteAnExistingCameraWirelessProfileForThisNetwork(string networkId, string wirelessProfileId);
        Task<ListTheQualityRetentionProfilesForThisNetworkResponse> ListTheQualityRetentionProfilesForThisNetwork(string networkId);
        Task<ListTheQualityRetentionProfilesForThisNetworkResponse> CreatesNewQualityRetentionProfileForThisNetwork(CreatesNewQualityRetentionProfileForThisNetworkRequest request, string networkId);
        Task<ListTheQualityRetentionProfilesForThisNetworkResponse> AteAnExistingQualityRetentionProfileForThisNetwork(CreatesNewQualityRetentionProfileForThisNetworkRequest request, string networkId, string qualityRetentionProfileId);
        Task<EmptyResponse> EteAnExistingQualityRetentionProfileForThisNetwork(string networkId, string qualityRetentionProfileId);
        Task<ListTheQualityRetentionProfilesForThisNetworkResponse> RetrieveASingleQualityRetentionProfile(string networkId, string qualityRetentionProfileId);
        Task<ListTheOrganizationsResponse> ReturnsAListOfAllCameraRecordingSchedules(string networkId);
        Task<FetchOnboardingStatusOfCamerasResponse> FetchOnboardingStatusOfCameras(FetchOnboardingStatusOfCamerasParameters queryParameters, string organizationId);
        Task<NotifyThatCredentialHandoffToCameraHasCompletedResponse> NotifyThatCredentialHandoffToCameraHasCompleted(NotifyThatCredentialHandoffToCameraHasCompletedRequest request, string organizationId);
        Task<ShowTheLANSettingsOfAMGResponse> ShowTheLANSettingsOfAMG(string serial);
        Task<ShowTheLANSettingsOfAMGResponse> UpdateTheLANSettingsForASingleMG(ShowTheLANSettingsOfAMGResponse request, string serial);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> ReturnsThePortForwardingRulesForASingleMG(string serial);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> UpdatesThePortForwardingRulesForASingleMG(ReturnTheCellularFirewallRulesForAnMXNetworkResponse request, string serial);
        Task<RnTheConnectivityTestingDestinationsForAnMXNetworkResponse> RnTheConnectivityTestingDestinationsForAnMGNetwork(string networkId);
        Task<RnTheConnectivityTestingDestinationsForAnMXNetworkResponse> TeTheConnectivityTestingDestinationsForAnMGNetwork(RnTheConnectivityTestingDestinationsForAnMXNetworkResponse request, string networkId);
        Task<ListCommonDHCPSettingsOfMGsResponse> ListCommonDHCPSettingsOfMGs(string networkId);
        Task<ListCommonDHCPSettingsOfMGsResponse> UpdateCommonDHCPSettingsOfMGs(ListCommonDHCPSettingsOfMGsResponse request, string networkId);
        Task<RnTheSubnetPoolAndMaskConfiguredForMGsInTheNetworkResponse> RnTheSubnetPoolAndMaskConfiguredForMGsInTheNetwork(string networkId);
        Task<RnTheSubnetPoolAndMaskConfiguredForMGsInTheNetworkResponse> HeSubnetPoolAndMaskConfigurationForMGsInTheNetwork(AddAVLANRequest request, string networkId);
        Task<ReturnsTheUplinkSettingsForYourMGNetworkResponse> ReturnsTheUplinkSettingsForYourMGNetwork(string networkId);
        Task<ReturnsTheUplinkSettingsForYourMGNetworkResponse> UpdatesTheUplinkSettingsForYourMGNetwork(ReturnsTheUplinkSettingsForYourMGNetworkResponse request, string networkId);
        Task<EveryMerakiMXAndZSeriesAppliancesInTheOrganizationResponse> TusOfEveryMerakiMGCellularGatewayInTheOrganization(TusOfEveryMerakiMGCellularGatewayInTheOrganizationParameters queryParameters, string organizationId);
        Task<ListTheSensorRolesForAGivenSensorOrCameraDeviceResponse> ListTheSensorRolesForAGivenSensorOrCameraDevice(string serial);
        Task<ListTheSensorRolesForAGivenSensorOrCameraDeviceResponse> GnOneOrMoreSensorRolesToAGivenSensorOrCameraDevice(ListTheSensorRolesForAGivenSensorOrCameraDeviceResponse request, string serial);
        Task<ListTheSensorRolesForDevicesInAGivenNetworkResponse> ListTheSensorRolesForDevicesInAGivenNetwork(string networkId);
        Task<ListsAllSensorAlertProfilesForANetworkResponse> ListsAllSensorAlertProfilesForANetwork(string networkId);
        Task<ListsAllSensorAlertProfilesForANetworkResponse> CreatesASensorAlertProfileForANetwork(ListsAllSensorAlertProfilesForANetworkResponse request, string networkId);
        Task<ListsAllSensorAlertProfilesForANetworkResponse> ShowDetailsOfASensorAlertProfileForANetwork(string networkId, string id);
        Task<ListsAllSensorAlertProfilesForANetworkResponse> UpdatesASensorAlertProfileForANetwork(ListsAllSensorAlertProfilesForANetworkResponse request, string networkId, string id);
        Task<EmptyResponse> DeletesASensorAlertProfileFromANetwork(string networkId, string id);
        Task<IstTheSensorSettingsOfAllMQTTBrokersForThisNetworkResponse> IstTheSensorSettingsOfAllMQTTBrokersForThisNetwork(string networkId);
        Task<IstTheSensorSettingsOfAllMQTTBrokersForThisNetworkResponse> ReturnTheSensorSettingsOfAnMQTTBroker(string networkId, string mqttBrokerId);
        Task<IstTheSensorSettingsOfAllMQTTBrokersForThisNetworkResponse> UpdateTheSensorSettingsOfAnMQTTBroker(UpdateThePerPortVLANSettingsForASingleMXPortRequest request, string networkId, string mqttBrokerId);
        Task<ReturnAnOverviewOfCurrentlyAlertingSensorsByMetricResponse> ReturnAnOverviewOfCurrentlyAlertingSensorsByMetric(string networkId);
        Task<NAnOverviewOfAlertOccurrencesOverATimespanByMetricResponse> NAnOverviewOfAlertOccurrencesOverATimespanByMetric(NAnOverviewOfAlertOccurrencesOverATimespanByMetricParameters queryParameters, string networkId);
        Task<AdingsFromSensorsInAGivenTimespanSortedByTimestampResponse> AdingsFromSensorsInAGivenTimespanSortedByTimestamp(AdingsFromSensorsInAGivenTimespanSortedByTimestampParameters queryParameters, string organizationId);
        Task<IngForEachMetricFromEachSensorSortedBySensorSerialResponse> IngForEachMetricFromEachSensorSortedBySensorSerial(IngForEachMetricFromEachSensorSortedBySensorSerialParameters queryParameters, string organizationId);
        Task<ListTheSwitchPortsForASwitchResponse> ListTheSwitchPortsForASwitch(string serial);
        Task<ListTheSwitchPortsForASwitchResponse> ReturnASwitchPort(string serial, string portId);
        Task<ListTheSwitchPortsForASwitchResponse> UpdateASwitchPort(UpdateASwitchPortRequest request, string serial, string portId);
        Task<ListLayer3InterfacesForASwitchResponse> ListLayer3InterfacesForASwitch(string serial);
        Task<ListLayer3InterfacesForASwitchResponse> CreateALayer3InterfaceForASwitch(CreateALayer3InterfaceForASwitchRequest request, string serial);
        Task<ListLayer3InterfacesForASwitchResponse> ReturnALayer3InterfaceForASwitch(string serial, string interfaceId);
        Task<ListLayer3InterfacesForASwitchResponse> UpdateALayer3InterfaceForASwitch(CreateALayer3InterfaceForASwitchRequest request, string serial, string interfaceId);
        Task<EmptyResponse> DeleteALayer3InterfaceFromTheSwitch(string serial, string interfaceId);
        Task<ListLayer3StaticRoutesForASwitchResponse> ListLayer3StaticRoutesForASwitch(string serial);
        Task<ListLayer3StaticRoutesForASwitchResponse> CreateALayer3StaticRouteForASwitch(CreateALayer3StaticRouteForASwitchRequest request, string serial);
        Task<ListLayer3StaticRoutesForASwitchResponse> ReturnALayer3StaticRouteForASwitch(string serial, string staticRouteId);
        Task<ListLayer3StaticRoutesForASwitchResponse> UpdateALayer3StaticRouteForASwitch(CreateALayer3StaticRouteForASwitchRequest request, string serial, string staticRouteId);
        Task<EmptyResponse> DeleteALayer3StaticRouteForASwitch(string serial, string staticRouteId);
        Task<ReturnMulticastSettingsForANetworkResponse> ReturnMulticastSettingsForANetwork(string networkId);
        Task<ReturnMulticastSettingsForANetworkResponse> UpdateMulticastSettingsForANetwork(ReturnMulticastSettingsForANetworkResponse request, string networkId);
        Task<ReturnLayer3OSPFRoutingConfigurationResponse> ReturnLayer3OSPFRoutingConfiguration(string networkId);
        Task<ReturnLayer3OSPFRoutingConfigurationResponse> UpdateLayer3OSPFRoutingConfiguration(UpdateLayer3OSPFRoutingConfigurationRequest request, string networkId);
        Task<ReturnMXWarmSpareSettingsResponse> ReturnWarmSpareConfigurationForASwitch(string serial);
        Task<ReturnMXWarmSpareSettingsResponse> UpdateWarmSpareConfigurationForASwitch(UpdateMXWarmSpareSettingsRequest request, string serial);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> ReturnTheAccessControlListsForAMSNetwork(string networkId);
        Task<ReturnTheCellularFirewallRulesForAnMXNetworkResponse> UpdateTheAccessControlListsForAMSNetwork(ReturnTheCellularFirewallRulesForAnMXNetworkResponse request, string networkId);
        Task<ListTheAccessPoliciesForASwitchNetworkResponse> ListTheAccessPoliciesForASwitchNetwork(string networkId);
        Task<ListTheAccessPoliciesForASwitchNetworkResponse> CreateAnAccessPolicyForASwitchNetwork(CreateAnAccessPolicyForASwitchNetworkRequest request, string networkId);
        Task<ListTheAccessPoliciesForASwitchNetworkResponse> ReturnASpecificAccessPolicyForASwitchNetwork(string networkId, string accessPolicyNumber);
        Task<ListTheAccessPoliciesForASwitchNetworkResponse> UpdateAnAccessPolicyForASwitchNetwork(CreateAnAccessPolicyForASwitchNetworkRequest request, string networkId, string accessPolicyNumber);
        Task<EmptyResponse> DeleteAnAccessPolicyForASwitchNetwork(string networkId, string accessPolicyNumber);
        Task<TheSwitchAlternateManagementInterfaceForTheNetworkResponse> TheSwitchAlternateManagementInterfaceForTheNetwork(string networkId);
        Task<TheSwitchAlternateManagementInterfaceForTheNetworkResponse> TheSwitchAlternateManagementInterfaceForTheNetwork2(TheSwitchAlternateManagementInterfaceForTheNetwork2Request request, string networkId);
        Task<V4ServersSeenWithinTheSelectedTimeframeDefault1DayResponse> V4ServersSeenWithinTheSelectedTimeframeDefault1Day(V4ServersSeenWithinTheSelectedTimeframeDefault1DayParameters queryParameters, string networkId);
        Task<ReturnTheDHCPServerSettingsResponse> ReturnTheDHCPServerSettings(string networkId);
        Task<ReturnTheDHCPServerSettingsResponse> UpdateTheDHCPServerSettings(ReturnTheDHCPServerSettingsResponse request, string networkId);
        Task<ReturnTheDSCPToCoSMappingsResponse> ReturnTheDSCPToCoSMappings(string networkId);
        Task<ReturnTheDSCPToCoSMappingsResponse> UpdateTheDSCPToCoSMappings(ReturnTheDSCPToCoSMappingsResponse request, string networkId);
        Task<ListLinkAggregationGroupsResponse> ListLinkAggregationGroups(string networkId);
        Task<ListLinkAggregationGroupsResponse> CreateALinkAggregationGroup(CreateALinkAggregationGroupRequest request, string networkId);
        Task<ListLinkAggregationGroupsResponse> UpdateALinkAggregationGroup(CreateALinkAggregationGroupRequest request, string networkId, string linkAggregationId);
        Task<EmptyResponse> SplitALinkAggregationGroupIntoSeparatePorts(string networkId, string linkAggregationId);
        Task<ReturnTheMTUConfigurationResponse> ReturnTheMTUConfiguration(string networkId);
        Task<ReturnTheMTUConfigurationResponse> UpdateTheMTUConfiguration(UpdateTheMTUConfigurationRequest request, string networkId);
        Task<ListSwitchPortSchedulesResponse> ListSwitchPortSchedules(string networkId);
        Task<ListSwitchPortSchedulesResponse> AddASwitchPortSchedule(ListSwitchPortSchedulesResponse request, string networkId);
        Task<EmptyResponse> DeleteASwitchPortSchedule(string networkId, string portScheduleId);
        Task<ListSwitchPortSchedulesResponse> UpdateASwitchPortSchedule(ListSwitchPortSchedulesResponse request, string networkId, string portScheduleId);
        Task<ListQualityOfServiceRulesResponse> ListQualityOfServiceRules(string networkId);
        Task<ListQualityOfServiceRulesResponse> AddAQualityOfServiceRule(AddAQualityOfServiceRuleRequest request, string networkId);
        Task<ListQualityOfServiceRulesResponse> ReturnAQualityOfServiceRule(string networkId, string qosRuleId);
        Task<EmptyResponse> DeleteAQualityOfServiceRule(string networkId, string qosRuleId);
        Task<ListQualityOfServiceRulesResponse> UpdateAQualityOfServiceRule(AddAQualityOfServiceRuleRequest request, string networkId, string qosRuleId);
        Task<ReturnsTheSwitchNetworkSettingsResponse> ReturnsTheSwitchNetworkSettings(string networkId);
        Task<ReturnsTheSwitchNetworkSettingsResponse> UpdateSwitchNetworkSettings(UpdateSwitchNetworkSettingsRequest request, string networkId);
        Task<ListTheSwitchStacksInANetworkResponse> ListTheSwitchStacksInANetwork(string networkId);
        Task<ListTheSwitchStacksInANetworkResponse> CreateAStack(ListsAllSensorAlertProfilesForANetworkResponse request, string networkId);
        Task<ListTheSwitchStacksInANetworkResponse> ShowASwitchStack(string networkId, string switchStackId);
        Task<EmptyResponse> DeleteAStack(string networkId, string switchStackId);
        Task<ListTheSwitchStacksInANetworkResponse> AddASwitchToAStack(ListTheDevicesInAnOrganizationResponse request, string networkId, string switchStackId);
        Task<ListTheSwitchStacksInANetworkResponse> RemoveASwitchFromAStack(ListTheDevicesInAnOrganizationResponse request, string networkId, string switchStackId);
        Task<EturnTheStormControlConfigurationForASwitchNetworkResponse> EturnTheStormControlConfigurationForASwitchNetwork(string networkId);
        Task<EturnTheStormControlConfigurationForASwitchNetworkResponse> PdateTheStormControlConfigurationForASwitchNetwork(PdateTheStormControlConfigurationForASwitchNetworkRequest request, string networkId);
        Task<ReturnsSTPSettingsResponse> ReturnsSTPSettings(string networkId);
        Task<ReturnsSTPSettingsResponse> UpdatesSTPSettings(UpdatesSTPSettingsRequest request, string networkId);
        Task<ESwitchTemplatesForYourSwitchTemplateConfigurationResponse> ESwitchTemplatesForYourSwitchTemplateConfiguration(string organizationId, string configTemplateId);
        Task<SettingsFromASourceSwitchToOneOrMoreTargetSwitchesRequest> SettingsFromASourceSwitchToOneOrMoreTargetSwitches(SettingsFromASourceSwitchToOneOrMoreTargetSwitchesRequest request, string organizationId);
        Task<CycleASetOfSwitchPortsRequest> CycleASetOfSwitchPorts(CycleASetOfSwitchPortsRequest request, string serial);
        Task<ReturnTheStatusForAllThePortsOfASwitchResponse> ReturnTheStatusForAllThePortsOfASwitch(ReturnTheStatusForAllThePortsOfASwitchParameters queryParameters, string serial);
        Task<UpdateTheBluetoothSettingsForAWirelessDeviceResponse> UpdateTheBluetoothSettingsForAWirelessDevice(UpdateTheBluetoothSettingsForAWirelessDeviceRequest request, string serial);
        Task<UpdateTheBluetoothSettingsForAWirelessDeviceResponse> ReturnTheBluetoothSettingsForAWirelessDevice(string serial);
        Task<ErgyBLEBluetoothSettingsAMustBeEnabledOnTheNetworkResponse> ErgyBLEBluetoothSettingsAMustBeEnabledOnTheNetwork(string networkId);
        Task<ErgyBLEBluetoothSettingsAMustBeEnabledOnTheNetworkResponse> UpdateTheBluetoothSettingsForANetwork(UpdateTheBluetoothSettingsForANetworkRequest request, string networkId);
        Task<ReturnTheRadioSettingsOfAnApplianceResponse> ReturnTheRadioSettingsOfADevice(string serial);
        Task<ReturnTheRadioSettingsOfAnApplianceResponse> UpdateTheRadioSettingsOfADevice(ReturnTheRadioSettingsOfAnApplianceResponse request, string serial);
        Task<TernateManagementInterfaceAndDevicesWithIPAssignedResponse> TernateManagementInterfaceAndDevicesWithIPAssigned(string networkId);
        Task<TernateManagementInterfaceAndDevicesWithIPAssignedResponse> PdateAlternateManagementInterfaceAndDeviceStaticIP(PdateAlternateManagementInterfaceAndDeviceStaticIPRequest request, string networkId);
        Task<ReturnTheBillingSettingsOfThisNetworkResponse> ReturnTheBillingSettingsOfThisNetwork(string networkId);
        Task<ReturnTheBillingSettingsOfThisNetworkResponse> UpdateTheBillingSettings(ReturnTheBillingSettingsOfThisNetworkResponse request, string networkId);
        Task<ListRFProfilesForThisNetworkResponse> ListRFProfilesForThisNetwork(ListRFProfilesForThisNetworkParameters queryParameters, string networkId);
        Task<ReturnTheWirelessSettingsForANetworkResponse> ReturnTheWirelessSettingsForANetwork(string networkId);
        Task<ReturnTheWirelessSettingsForANetworkResponse> UpdateTheWirelessSettingsForANetwork(UpdateTheWirelessSettingsForANetworkRequest request, string networkId);
        Task<ListTheMRSSIDsInANetworkResponse> ListTheMRSSIDsInANetwork(string networkId);
        Task<ListTheMRSSIDsInANetworkResponse> ReturnASingleMRSSID(string networkId, string number);
        Task<ListTheMRSSIDsInANetworkResponse> UpdateTheAttributesOfAnMRSSID(UpdateTheAttributesOfAnMRSSIDRequest request, string networkId, string number);
        Task<AggregatedConnectivityInfoForAGivenAPOnThisNetworkResponse> AggregatedConnectivityInfoForAGivenAPOnThisNetwork(AggregatedConnectivityInfoForAGivenAPOnThisNetworkParameters queryParameters, string serial);
        Task<ConnectionStats> AggregatedConnectivityInfoForThisNetwork(AggregatedConnectivityInfoForThisNetworkParameters queryParameters, string networkId);
        Task<AggregatedLatencyInfoForAGivenAPOnThisNetworkResponse> AggregatedLatencyInfoForAGivenAPOnThisNetwork(AggregatedLatencyInfoForAGivenAPOnThisNetworkParameters queryParameters, string serial);
        Task<LatencyStats> AggregatedLatencyInfoForThisNetwork(AggregatedLatencyInfoForThisNetworkParameters queryParameters, string networkId);
        Task<ReturnTheSSIDStatusesOfAnAccessPointResponse> ReturnTheSSIDStatusesOfAnAccessPoint(string serial);
        Task<ListAirMarshalScanResultsFromANetworkResponse> ListAirMarshalScanResultsFromANetwork(ListAirMarshalScanResultsFromANetworkParameters queryParameters, string networkId);
        Task<HannelUtilizationOverTimeForADeviceOrNetworkClientResponse> HannelUtilizationOverTimeForADeviceOrNetworkClient(HannelUtilizationOverTimeForADeviceOrNetworkClientParameters queryParameters, string networkId);
        Task<IentCountsOverTimeForANetworkDeviceOrNetworkClientResponse> IentCountsOverTimeForANetworkDeviceOrNetworkClient(IentCountsOverTimeForANetworkDeviceOrNetworkClientParameters queryParameters, string networkId);
        Task<AtedConnectivityInfoForThisNetworkGroupedByClientsResponse> AtedConnectivityInfoForThisNetworkGroupedByClients(AtedConnectivityInfoForThisNetworkGroupedByClientsParameters queryParameters, string networkId);
        Task<AtedConnectivityInfoForThisNetworkGroupedByClientsResponse> EgatedConnectivityInfoForAGivenClientOnThisNetwork(EgatedConnectivityInfoForAGivenClientOnThisNetworkParameters queryParameters, string networkId, string clientId);
        Task<GgregatedLatencyInfoForThisNetworkGroupedByClientsResponse> GgregatedLatencyInfoForThisNetworkGroupedByClients(GgregatedLatencyInfoForThisNetworkGroupedByClientsParameters queryParameters, string networkId);
        Task<GgregatedLatencyInfoForThisNetworkGroupedByClientsResponse> AggregatedLatencyInfoForAGivenClientOnThisNetwork(AggregatedLatencyInfoForAGivenClientOnThisNetworkParameters queryParameters, string networkId, string clientId);
        Task<CtivityEventsForAClientWithinANetworkInTheTimespanResponse> CtivityEventsForAClientWithinANetworkInTheTimespan(CtivityEventsForAClientWithinANetworkInTheTimespanParameters queryParameters, string networkId, string clientId);
        Task<ReturnTheLatencyHistoryForAClientResponse> ReturnTheLatencyHistoryForAClient(ReturnTheLatencyHistoryForAClientParameters queryParameters, string networkId, string clientId);
        Task<YDataRatesOverTimeForANetworkDeviceOrNetworkClientResponse> YDataRatesOverTimeForANetworkDeviceOrNetworkClient(YDataRatesOverTimeForANetworkDeviceOrNetworkClientParameters queryParameters, string networkId);
        Task<AggregatedConnectivityInfoForAGivenAPOnThisNetworkResponse> RegatedConnectivityInfoForThisNetworkGroupedByNode(RegatedConnectivityInfoForThisNetworkGroupedByNodeParameters queryParameters, string networkId);
        Task<AggregatedLatencyInfoForAGivenAPOnThisNetworkResponse> AggregatedLatencyInfoForThisNetworkGroupedByNode(AggregatedLatencyInfoForThisNetworkGroupedByNodeParameters queryParameters, string networkId);
        Task<GeChannelUtilizationForAllBandsInANetworkSplitByAPResponse> GeChannelUtilizationForAllBandsInANetworkSplitByAP(GeChannelUtilizationForAllBandsInANetworkSplitByAPParameters queryParameters, string organizationId);
        Task<GeChannelUtilizationForAllBandsInANetworkSplitByAPResponse> AtionAcrossAllBandsForAllNetworksInTheOrganization(AtionAcrossAllBandsForAllNetworksInTheOrganizationParameters queryParameters, string organizationId);
        Task<RageChannelUtilizationForAllBandsSegmentedByDeviceResponse> RageChannelUtilizationForAllBandsSegmentedByDevice(RageChannelUtilizationForAllBandsSegmentedByDeviceParameters queryParameters, string organizationId);
        Task<RageChannelUtilizationForAllBandsSegmentedByDeviceResponse> TATimeSeriesOfAverageChannelUtilizationForAllBands(TATimeSeriesOfAverageChannelUtilizationForAllBandsParameters queryParameters, string organizationId);
        Task<EndpointToSeePowerStatusForWirelessDevicesResponse> EndpointToSeePowerStatusForWirelessDevices(EndpointToSeePowerStatusForWirelessDevicesParameters queryParameters, string organizationId);
        Task<IentConnectionEventsOnThisNetworkInAGivenTimeRangeResponse> IentConnectionEventsOnThisNetworkInAGivenTimeRange(IentConnectionEventsOnThisNetworkInAGivenTimeRangeParameters queryParameters, string networkId);
        Task<EssLatencyOverTimeForANetworkDeviceOrNetworkClientResponse> EssLatencyOverTimeForANetworkDeviceOrNetworkClient(EssLatencyOverTimeForANetworkDeviceOrNetworkClientParameters queryParameters, string networkId);
        Task<ListWirelessMeshStatusesForRepeatersResponse> ListWirelessMeshStatusesForRepeaters(ListWirelessMeshStatusesForRepeatersParameters queryParameters, string networkId);
        Task<NalQualitySNRRSSIOverTimeForADeviceOrNetworkClientResponse> NalQualitySNRRSSIOverTimeForADeviceOrNetworkClient(NalQualitySNRRSSIOverTimeForADeviceOrNetworkClientParameters queryParameters, string networkId);
        Task<ReturnAPUsageOverTimeForADeviceOrNetworkClientResponse> ReturnAPUsageOverTimeForADeviceOrNetworkClient(ReturnAPUsageOverTimeForADeviceOrNetworkClientParameters queryParameters, string networkId);
        Task<Assigned> CreatesNewRFProfileForThisNetwork(Assigned request, string networkId);
        Task<Assigned> UpdatesSpecifiedRFProfileForThisNetwork(Assigned request, string networkId, string rfProfileId);
        Task<EmptyResponse> DeleteARFProfile(string networkId, string rfProfileId);
        Task<Assigned> ReturnARFProfile(string networkId, string rfProfileId);
        Task<ListRFProfilesForThisNetworkResponse> CreatesNewRFProfileForThisNetwork2(CreatesNewRFProfileForThisNetwork2Request request, string networkId);
        Task<ListRFProfilesForThisNetworkResponse> UpdatesSpecifiedRFProfileForThisNetwork2(CreatesNewRFProfileForThisNetwork2Request request, string networkId, string rfProfileId);
        Task<EmptyResponse> DeleteARFProfile2(string networkId, string rfProfileId);
        Task<ListRFProfilesForThisNetworkResponse> ReturnARFProfile2(string networkId, string rfProfileId);
        Task<GetApplicationHealthByTimeResponse> GetApplicationHealthByTime(GetApplicationHealthByTimeParameters queryParameters, string networkId, string applicationId);
        Task<ListAllInsightTrackedApplicationsResponse> ListAllInsightTrackedApplications(string organizationId);
        Task<ListTheMonitoredMediaServersForThisOrganizationResponse> ListTheMonitoredMediaServersForThisOrganization(string organizationId);
        Task<ListTheMonitoredMediaServersForThisOrganizationResponse> AddAMediaServerToBeMonitoredForThisOrganization(AddAMediaServerToBeMonitoredForThisOrganizationRequest request, string organizationId);
        Task<ListTheMonitoredMediaServersForThisOrganizationResponse> ReturnAMonitoredMediaServerForThisOrganization(string organizationId, string monitoredMediaServerId);
        Task<ListTheMonitoredMediaServersForThisOrganizationResponse> UpdateAMonitoredMediaServerForThisOrganization(AddAMediaServerToBeMonitoredForThisOrganizationRequest request, string organizationId, string monitoredMediaServerId);
        Task<EmptyResponse> DeleteAMonitoredMediaServerFromThisOrganization(string organizationId, string monitoredMediaServerId);
        Task<BypassActivationLockAttemptResponse> BypassActivationLockAttempt(BypassActivationLockAttemptRequest request, string networkId);
        Task<BypassActivationLockAttemptResponse> BypassActivationLockAttemptStatus(string networkId, string attemptId);
        Task<DInAnSMNetworkWithVariousSpecifiedFieldsAndFiltersResponse> DInAnSMNetworkWithVariousSpecifiedFieldsAndFilters(DInAnSMNetworkWithVariousSpecifiedFieldsAndFiltersParameters queryParameters, string networkId);
        Task<BypassActivationLockAttemptRequest> ForceCheckInASetOfDevices(ForceCheckInASetOfDevicesRequest request, string networkId);
        Task<BypassActivationLockAttemptRequest> LockASetOfDevices(LockASetOfDevicesRequest request, string networkId);
        Task<DInAnSMNetworkWithVariousSpecifiedFieldsAndFiltersResponse> AddDeleteOrUpdateTheTagsOfASetOfDevices(AddDeleteOrUpdateTheTagsOfASetOfDevicesRequest request, string networkId);
        Task<MoveASetOfDevicesToANewNetworkRequest> MoveASetOfDevicesToANewNetwork(MoveASetOfDevicesToANewNetworkRequest request, string networkId);
        Task<ListTheOrganizationsResponse> WipeADevice(WipeADeviceRequest request, string networkId);
        Task<EmptyResponse> RefreshTheDetailsOfADevice(string networkId, string deviceId);
        Task<NotifyThatCredentialHandoffToCameraHasCompletedResponse> UnenrollADevice(string networkId, string deviceId);
        Task<ListAllProfilesInANetworkResponse> ListAllProfilesInANetwork(string networkId);
        Task<ListTheTargetGroupsInThisNetworkResponse> ListTheTargetGroupsInThisNetwork(ListTheTargetGroupsInThisNetworkParameters queryParameters, string networkId);
        Task<ListTheTargetGroupsInThisNetworkResponse> AddATargetGroup(ListAllProfilesInANetworkResponse request, string networkId);
        Task<ListTheTargetGroupsInThisNetworkResponse> ReturnATargetGroup(ReturnATargetGroupParameters queryParameters, string networkId, string targetGroupId);
        Task<ListTheTargetGroupsInThisNetworkResponse> UpdateATargetGroup(ListAllProfilesInANetworkResponse request, string networkId, string targetGroupId);
        Task<EmptyResponse> DeleteATargetGroupFromANetwork(string networkId, string targetGroupId);
        Task<ListTrustedAccessConfigsResponse> ListTrustedAccessConfigs(ListTrustedAccessConfigsParameters queryParameters, string networkId);
        Task<IstUserAccessDevicesAndItsTrustedAccessConnectionsResponse> IstUserAccessDevicesAndItsTrustedAccessConnections(IstUserAccessDevicesAndItsTrustedAccessConnectionsParameters queryParameters, string networkId);
        Task<EmptyResponse> DeleteAUserAccessDevice(string networkId, string userAccessDeviceId);
        Task<SInAnSMNetworkWithVariousSpecifiedFieldsAndFiltersResponse> SInAnSMNetworkWithVariousSpecifiedFieldsAndFilters(SInAnSMNetworkWithVariousSpecifiedFieldsAndFiltersParameters queryParameters, string networkId);
        Task<GetTheOrganizationsAPNSCertificateResponse> GetTheOrganizationsAPNSCertificate(string organizationId);
        Task<ListTheVPPAccountsInTheOrganizationResponse> ListTheVPPAccountsInTheOrganization(string organizationId);
        Task<ListTheVPPAccountsInTheOrganizationResponse> IningTheUnparsedTokenOfTheVPPAccountWithTheGivenID(string organizationId, string vppAccountId);
        Task<ReturnTheClientsDailyCellularDataUsageHistoryResponse> ReturnTheClientsDailyCellularDataUsageHistory(string networkId, string deviceId);
        Task<DataWhetherADeviceIsRegularlyCheckingInToDashboardResponse> DataWhetherADeviceIsRegularlyCheckingInToDashboard(DataWhetherADeviceIsRegularlyCheckingInToDashboardParameters queryParameters, string networkId, string deviceId);
        Task<MsManagerNetworkConnectionDetailsForDesktopDevicesResponse> MsManagerNetworkConnectionDetailsForDesktopDevices(MsManagerNetworkConnectionDetailsForDesktopDevicesParameters queryParameters, string networkId, string deviceId);
        Task<OricalRecordsOfCommandsSentToSystemsManagerDevicesResponse> OricalRecordsOfCommandsSentToSystemsManagerDevices(OricalRecordsOfCommandsSentToSystemsManagerDevicesParameters queryParameters, string networkId, string deviceId);
        Task<AriousSystemsManagerClientMetricsForDesktopDevicesResponse> AriousSystemsManagerClientMetricsForDesktopDevices(AriousSystemsManagerClientMetricsForDesktopDevicesParameters queryParameters, string networkId, string deviceId);
        Task<ListTheLicensesInACotermOrganizationResponse> ListTheLicensesInACotermOrganization(ListTheLicensesInACotermOrganizationParameters queryParameters, string organizationId);
        Task<MovesALicenseToADifferentOrganizationCotermOnlyResponse> MovesALicenseToADifferentOrganizationCotermOnly(MovesALicenseToADifferentOrganizationCotermOnlyRequest request, string organizationId);
        Task<ReturnASingleDeviceResponse> ReturnASingleDevice(string serial);
        Task<ReturnASingleDeviceResponse> UpdateTheAttributesOfADevice(UpdateTheAttributesOfADeviceRequest request, string serial);
        Task<BlinkTheLEDsOnADeviceResponse> BlinkTheLEDsOnADevice(BlinkTheLEDsOnADeviceRequest request, string serial);
        Task<NotifyThatCredentialHandoffToCameraHasCompletedResponse> RebootADevice(string serial);
        Task<ListTheClientsOfADeviceUpToAMaximumOfAMonthAgoResponse> ListTheClientsOfADeviceUpToAMaximumOfAMonthAgo(ListTheClientsOfADeviceUpToAMaximumOfAMonthAgoParameters queryParameters, string serial);
        Task<ListLLDPAndCDPInformationForADeviceResponse> ListLLDPAndCDPInformationForADevice(string serial);
        Task<NdGoodputInKilobitsPerSecondForAWiredNetworkDeviceResponse> NdGoodputInKilobitsPerSecondForAWiredNetworkDevice(NdGoodputInKilobitsPerSecondForAWiredNetworkDeviceParameters queryParameters, string serial);
        Task<BindANetworkToATemplateResponse> BindANetworkToATemplate(BindANetworkToATemplateRequest request, string networkId);
        Task<EmptyResponse> DeleteANetwork(string networkId);
        Task<ReturnANetworkResponse> ReturnANetwork(string networkId);
        Task<EdNetworkIntoIndividualNetworksForEachTypeOfDeviceResponse> EdNetworkIntoIndividualNetworksForEachTypeOfDevice(string networkId);
        Task<ReturnANetworkResponse> UnbindANetworkFromATemplate(UnbindANetworkFromATemplateRequest request, string networkId);
        Task<ReturnANetworkResponse> UpdateANetwork(BindANetworkToATemplateResponse request, string networkId);
        Task<ReturnTheAlertHistoryForThisNetworkResponse> ReturnTheAlertHistoryForThisNetwork(ReturnTheAlertHistoryForThisNetworkParameters queryParameters, string networkId);
        Task<ListTheBluetoothClientsSeenByAPsInThisNetworkResponse> ListTheBluetoothClientsSeenByAPsInThisNetwork(ListTheBluetoothClientsSeenByAPsInThisNetworkParameters queryParameters, string networkId);
        Task<ListTheBluetoothClientsSeenByAPsInThisNetworkResponse> ReturnABluetoothClient(ReturnABluetoothClientParameters queryParameters, string networkId, string bluetoothClientId);
        Task<ListTheClientsThatHaveUsedThisNetworkInTheTimespanResponse> ListTheClientsThatHaveUsedThisNetworkInTheTimespan(ListTheClientsThatHaveUsedThisNetworkInTheTimespanParameters queryParameters, string networkId);
        Task<ReturnTheClientAssociatedWithTheGivenIdentifierResponse> ReturnTheClientAssociatedWithTheGivenIdentifier(string networkId, string clientId);
        Task<ListTheEventsForTheNetworkResponse> ListTheEventsForTheNetwork(ListTheEventsForTheNetworkParameters queryParameters, string networkId);
        Task<ChannelUtilizationOverEachRadioForAllAPsInANetworkResponse> ChannelUtilizationOverEachRadioForAllAPsInANetwork(ChannelUtilizationOverEachRadioForAllAPsInANetworkParameters queryParameters, string networkId);
        Task<ListTheSplashLoginAttemptsForANetworkResponse> ListTheSplashLoginAttemptsForANetwork(ListTheSplashLoginAttemptsForANetworkParameters queryParameters, string networkId);
        Task<IonForAllDiscoveredDevicesAndConnectionsInANetworkResponse> IonForAllDiscoveredDevicesAndConnectionsInANetwork(string networkId);
        Task<ReturnTheTrafficAnalysisDataForThisNetworkResponse> ReturnTheTrafficAnalysisDataForThisNetwork(ReturnTheTrafficAnalysisDataForThisNetworkParameters queryParameters, string networkId);
        Task<ListOfDevicesLicensesAndOrOrdersIntoAnOrganizationRequest> ListOfDevicesLicensesAndOrOrdersIntoAnOrganization(ListOfDevicesLicensesAndOrOrdersIntoAnOrganizationRequest request, string organizationId);
        Task<CreateANewOrganizationResponse> CreateANewOrganization(CreateANewOrganizationRequest request);
        Task<CreateANewOrganizationResponse> EANewOrganizationByCloningTheAddressedOrganization(ListTheOrganizationsResponse request, string organizationId);
        Task<EmptyResponse> DeleteAnOrganization(string organizationId);
        Task<CreateANewOrganizationResponse> ListTheOrganizationsThatTheUserHasPrivilegesOn();
        Task<CreateANewOrganizationResponse> ReturnAnOrganization(string organizationId);
        Task<CreateANewOrganizationResponse> UpdateAnOrganization(CreateANewOrganizationResponse request, string organizationId);
        Task<AdaptivePolicyAggregateStatisticsForAnOrganizationResponse> AdaptivePolicyAggregateStatisticsForAnOrganization(string organizationId);
        Task<ListTheAPIRequestsMadeByAnOrganizationResponse> ListTheAPIRequestsMadeByAnOrganization(ListTheAPIRequestsMadeByAnOrganizationParameters queryParameters, string organizationId);
        Task<ClientsInTheGivenOrganizationWithinAGivenTimeRangeResponse> ClientsInTheGivenOrganizationWithinAGivenTimeRange(ClientsInTheGivenOrganizationWithinAGivenTimeRangeParameters queryParameters, string organizationId);
        Task<RoundClientDataUsageInMbAcrossTheGivenOrganizationResponse> RoundClientDataUsageInMbAcrossTheGivenOrganization(RoundClientDataUsageInMbAcrossTheGivenOrganizationParameters queryParameters, string organizationId);
        Task<ViewTheChangeLogForYourOrganizationResponse> ViewTheChangeLogForYourOrganization(ViewTheChangeLogForYourOrganizationParameters queryParameters, string organizationId);
        Task<EAvailabilityInformationForDevicesInAnOrganizationResponse> EAvailabilityInformationForDevicesInAnOrganization(EAvailabilityInformationForDevicesInAnOrganizationParameters queryParameters, string organizationId);
        Task<HePowerStatusInformationForDevicesInAnOrganizationResponse> HePowerStatusInformationForDevicesInAnOrganization(HePowerStatusInformationForDevicesInAnOrganizationParameters queryParameters, string organizationId);
        Task<EAvailabilityInformationForDevicesInAnOrganizationResponse> OningStatusesInformationForDevicesInAnOrganization(OningStatusesInformationForDevicesInAnOrganizationParameters queryParameters, string organizationId);
        Task<ListTheStatusOfEveryMerakiDeviceInTheOrganizationResponse> ListTheStatusOfEveryMerakiDeviceInTheOrganization(ListTheStatusOfEveryMerakiDeviceInTheOrganizationParameters queryParameters, string organizationId);
        Task<HeCurrentUplinkAddressesForDevicesInAnOrganizationResponse> HeCurrentUplinkAddressesForDevicesInAnOrganization(HeCurrentUplinkAddressesForDevicesInAnOrganizationParameters queryParameters, string organizationId);
        Task<ForEveryMXInTheOrganizationFromAtLatest2MinutesAgoResponse> ForEveryMXInTheOrganizationFromAtLatest2MinutesAgo(ForEveryMXInTheOrganizationFromAtLatest2MinutesAgoParameters queryParameters, string organizationId);
        Task<ReturnAnOverviewOfTheLicenseStateForAnOrganizationResponse> ReturnAnOverviewOfTheLicenseStateForAnOrganization(string organizationId);
        Task<CificationOfTheOrganizationsAPIDocumentationInJSONResponse> CificationOfTheOrganizationsAPIDocumentationInJSON(CificationOfTheOrganizationsAPIDocumentationInJSONParameters queryParameters, string organizationId);
        Task<P10AppliancesSortedByUtilizationOverGivenTimeRangeResponse> P10AppliancesSortedByUtilizationOverGivenTimeRange(P10AppliancesSortedByUtilizationOverGivenTimeRangeParameters queryParameters, string organizationId);
        Task<TionsTop10ClientsByDataUsageInMbOverGivenTimeRangeResponse> TionsTop10ClientsByDataUsageInMbOverGivenTimeRange(TionsTop10ClientsByDataUsageInMbOverGivenTimeRangeParameters queryParameters, string organizationId);
        Task<TaUsageInMbOverGivenTimeRangeGroupedByManufacturerResponse> TaUsageInMbOverGivenTimeRangeGroupedByManufacturer(TaUsageInMbOverGivenTimeRangeGroupedByManufacturerParameters queryParameters, string organizationId);
        Task<OnsTop10DevicesSortedByDataUsageOverGivenTimeRangeResponse> OnsTop10DevicesSortedByDataUsageOverGivenTimeRange(OnsTop10DevicesSortedByDataUsageOverGivenTimeRangeParameters queryParameters, string organizationId);
        Task<P10DeviceModelsSortedByDataUsageOverGivenTimeRangeResponse> P10DeviceModelsSortedByDataUsageOverGivenTimeRange(P10DeviceModelsSortedByDataUsageOverGivenTimeRangeParameters queryParameters, string organizationId);
        Task<TaUsageInMbOverGivenTimeRangeGroupedByManufacturerResponse> GanizationsTop10SsidsByDataUsageOverGivenTimeRange(GanizationsTop10SsidsByDataUsageOverGivenTimeRangeParameters queryParameters, string organizationId);
        Task<OnsTop10DevicesSortedByDataUsageOverGivenTimeRangeResponse> AtionsTop10SwitchesByEnergyUsageOverGivenTimeRange(AtionsTop10SwitchesByEnergyUsageOverGivenTimeRangeParameters queryParameters, string organizationId);
        Task<EveryMerakiMXAndZSeriesAppliancesInTheOrganizationResponse> FEveryMerakiMXMGAndZSeriesDevicesInTheOrganization(FEveryMerakiMXMGAndZSeriesDevicesInTheOrganizationParameters queryParameters, string organizationId);
        Task<AListOfAlertTypesToBeUsedWithManagingWebhookAlertsResponse> AListOfAlertTypesToBeUsedWithManagingWebhookAlerts(AListOfAlertTypesToBeUsedWithManagingWebhookAlertsParameters queryParameters, string organizationId);
        Task<ReturnTheLogOfWebhookPOSTsSentResponse> ReturnTheLogOfWebhookPOSTsSent(ReturnTheLogOfWebhookPOSTsSentParameters queryParameters, string organizationId);
    }
}